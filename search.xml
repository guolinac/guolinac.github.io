<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>pdf压缩脚本</title>
    <url>/2023/07/30/pdf%E5%8E%8B%E7%BC%A9%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="一个写pyr"><a href="#一个写pyr" class="headerlink" title="一个写pyr"></a>一个写pyr</h1><p>adsa dsa</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>C++实现LRU缓存淘汰算法</title>
    <url>/2023/02/10/C++%E5%AE%9E%E7%8E%B0LRU%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="LRU算法简介"><a href="#LRU算法简介" class="headerlink" title="LRU算法简介"></a>LRU算法简介</h1><p>对于web开发而言，缓存必不可少，也是提高性能最常用的方式。无论是浏览器缓存，还是服务端的缓存(通过memcached或者redis等内存数据库)。缓存不仅可以加速用户的访问，同时也可以降低服务器的负载和压力。那么，了解常见的缓存淘汰算法的策略和原理就显得特别重要。</p>
<h2 id="常见的缓存算法"><a href="#常见的缓存算法" class="headerlink" title="常见的缓存算法"></a>常见的缓存算法</h2><p>LRU (Least recently used) 最近最少使用，如果数据最近被访问过，那么将来被访问的几率也更高。</p>
<p>LFU (Least frequently used) 最不经常使用，如果一个数据在最近一段时间内使用次数很少，那么在将来一段时间内被使用的可能性也很小。</p>
<p>FIFO (Fist in first out) 先进先出， 如果一个数据最先进入缓存中，则应该最早淘汰掉。</p>
<h2 id="时间局部性原理"><a href="#时间局部性原理" class="headerlink" title="时间局部性原理"></a>时间局部性原理</h2><p>它是按照一个非常著名的计算机操作系统基础理论得来的：<strong>最近使用的页面数据会在未来一段时期内仍然被使用,已经很久没有使用的页面很有可能在未来较长的一段时间内仍然不会被使用</strong>。基于这个思想,会存在一种缓存淘汰机制，每次从内存中找到最久未使用的数据然后置换出来，从而存入新的数据！它的主要衡量指标是使用的时间，附加指标是使用的次数。在计算机中大量使用了这个机制，它的合理性在于优先筛选热点数据，所谓热点数据，就是最近最多使用的数据！因为，利用LRU我们可以解决很多实际开发中的问题，并且很符合业务场景。</p>
<p>像浏览器的缓存策略、memcached的缓存策略都是使用LRU这个算法，LRU算法会将近期最不会访问的数据淘汰掉。LRU如此流行的原因是实现比较简单，而且对于实际问题也很实用，良好的运行时性能，命中率较高。下面谈谈如何实现LRU缓存：</p>
<ul>
<li>新数据插入到链表头部</li>
<li>每当缓存命中（即缓存数据被访问），则将数据移到链表头部</li>
<li>当链表满的时候，将链表尾部的数据丢弃</li>
</ul>
<h2 id="LRU-Cache具备的操作"><a href="#LRU-Cache具备的操作" class="headerlink" title="LRU Cache具备的操作"></a>LRU Cache具备的操作</h2><p><strong>set(key,value)：</strong>如果key在hashmap中存在，则先重置对应的value值，然后获取对应的节点cur，将cur节点从链表删除，并移动到链表的头部；若果key在hashmap不存在，则新建一个节点，并将节点放到链表的头部。当Cache存满的时候，将链表最后一个节点删除即可。</p>
<p><strong>get(key)：</strong>如果key在hashmap中存在，则把对应的节点放到链表头部，并返回对应的value值；如果不存在，则返回-1。</p>
<h1 id="C-实现"><a href="#C-实现" class="headerlink" title="C++实现"></a>C++实现</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LRUCache</span>(<span class="type">int</span> capacity) : <span class="built_in">cap</span>(capacity) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.<span class="built_in">find</span>(key) == map.<span class="built_in">end</span>()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">auto</span> key_value = *map[key]; <span class="comment">// 通过迭代器可以读取它指向的元素，*迭代器名就表示迭代器指向的元素。通过非常量迭代器还能修改其指向的元素</span></span><br><span class="line">        cache.<span class="built_in">erase</span>(map[key]);</span><br><span class="line">        cache.<span class="built_in">push_front</span>(key_value);</span><br><span class="line">        map[key] = cache.<span class="built_in">begin</span>(); <span class="comment">// 返回指向容器中第一个元素的双向迭代器，迭代器在list中位置变了，所以要把新的迭代器的逻辑位置信息赋给哈希表</span></span><br><span class="line">        <span class="keyword">return</span> key_value.second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.<span class="built_in">find</span>(key) == map.<span class="built_in">end</span>()) &#123; <span class="comment">// 查找以 key 为键的键值对，如果找到，则返回一个指向该键值对的正向迭代器；反之，则返回一个指向容器中最后一个键值对之后位置的迭代器（如果 end() 方法返回的迭代器）</span></span><br><span class="line">            <span class="keyword">if</span> (cache.<span class="built_in">size</span>() == cap) &#123;</span><br><span class="line">                map.<span class="built_in">erase</span>(cache.<span class="built_in">back</span>().first);</span><br><span class="line">                cache.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cache.<span class="built_in">erase</span>(map[key]);</span><br><span class="line">        &#125;</span><br><span class="line">        cache.<span class="built_in">push_front</span>(&#123;key, value&#125;);</span><br><span class="line">        map[key] = cache.<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> cap;</span><br><span class="line">    list&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; cache;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, list&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;::iterator&gt; map;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LRUCache *lruCache = <span class="keyword">new</span> <span class="built_in">LRUCache</span>(<span class="number">2</span>);</span><br><span class="line">    lruCache-&gt;<span class="built_in">put</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    lruCache-&gt;<span class="built_in">put</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; lruCache-&gt;<span class="built_in">get</span>(<span class="number">2</span>) &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    lruCache-&gt;<span class="built_in">put</span>(<span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">    cout &lt;&lt; lruCache-&gt;<span class="built_in">get</span>(<span class="number">1</span>) &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    cout &lt;&lt; lruCache-&gt;<span class="built_in">get</span>(<span class="number">2</span>) &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// lruCache -&gt; put(2, 2);</span></span><br><span class="line">    <span class="comment">// lruCache -&gt; put(1, 1);</span></span><br><span class="line">    <span class="comment">// lruCache -&gt; put(3, 3);</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; lruCache -&gt; get(2) &lt;&lt; &quot;  &quot;;</span></span><br><span class="line">    <span class="comment">// lruCache -&gt; put(4, 4);</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; lruCache -&gt; get(1) &lt;&lt; &quot;  &quot;;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; lruCache -&gt; get(2) &lt;&lt; &quot;  &quot;;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; lruCache -&gt; get(3) &lt;&lt; &quot;  &quot;;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; lruCache -&gt; get(4) &lt;&lt; &quot;  &quot;;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; lruCache -&gt; get(4) &lt;&lt; &quot;  &quot;;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; lruCache -&gt; get(3) &lt;&lt; &quot;  &quot;;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; lruCache -&gt; get(2) &lt;&lt; &quot;  &quot;;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; lruCache -&gt; get(4) &lt;&lt; &quot;  &quot;;</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>LRU</category>
      </categories>
      <tags>
        <tag>LRU</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Idea搜不到任何插件的办法</title>
    <url>/2022/12/25/%E5%85%B3%E4%BA%8EIdea%E6%90%9C%E4%B8%8D%E5%88%B0%E4%BB%BB%E4%BD%95%E6%8F%92%E4%BB%B6%E7%9A%84%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<p>1.首先来到以下画面<br>File-&gt;Settings-&gt;Plugins-&gt;⚙-&gt;HTTP Proxy Settings…</p>
<span id="more"></span>

<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E5%85%B3%E4%BA%8EIdea%E6%90%9C%E4%B8%8D%E5%88%B0%E4%BB%BB%E4%BD%95%E6%8F%92%E4%BB%B6%E7%9A%84%E5%8A%9E%E6%B3%95.assets/image-20221215152846517.png" alt="image-20221215152846517" style="zoom: 67%;" />

<p>2.如图所示，勾选 Auto-detect proxy settings 和 Auto-detect proxy configuration URL ，后面输入框不用填写，然后点击 Check connection</p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E5%85%B3%E4%BA%8EIdea%E6%90%9C%E4%B8%8D%E5%88%B0%E4%BB%BB%E4%BD%95%E6%8F%92%E4%BB%B6%E7%9A%84%E5%8A%9E%E6%B3%95.assets/image-20221215152908531.png" alt="image-20221215152908531" style="zoom:67%;" />

<p>3.在弹出的窗口输入以下地址</p>
<blockquote>
<p><a href="https://plugins.jetbrains.com/idea">https://plugins.jetbrains.com/idea</a></p>
</blockquote>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E5%85%B3%E4%BA%8EIdea%E6%90%9C%E4%B8%8D%E5%88%B0%E4%BB%BB%E4%BD%95%E6%8F%92%E4%BB%B6%E7%9A%84%E5%8A%9E%E6%B3%95.assets/image-20221215152933995.png" alt="image-20221215152933995" style="zoom:67%;" />

<p>弹出链接成功即可</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E5%85%B3%E4%BA%8EIdea%E6%90%9C%E4%B8%8D%E5%88%B0%E4%BB%BB%E4%BD%95%E6%8F%92%E4%BB%B6%E7%9A%84%E5%8A%9E%E6%B3%95.assets/image-20221215152950099.png" alt="image-20221215152950099"></p>
<p>一路点ok</p>
<p>重启IDEA即可</p>
]]></content>
      <categories>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>关于&#39;scanf&#39; This function or variable may be unsafe. Consider using scanf_s instead</title>
    <url>/2022/11/02/vs%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h1 id="问题error-C4996-‘scanf’-This-function-or-variable-may-be-unsafe-Consider-using-scanf-s-instead-的解决"><a href="#问题error-C4996-‘scanf’-This-function-or-variable-may-be-unsafe-Consider-using-scanf-s-instead-的解决" class="headerlink" title="问题error C4996: ‘scanf’: This function or variable may be unsafe. Consider using scanf_s instead. 的解决"></a>问题error C4996: ‘scanf’: This function or variable may be unsafe. Consider using scanf_s instead. 的解决</h1><p>运行c语言代码是会经常遇见下面的问题：</p>
<p>error C4996: ‘scanf’: This function or variable may be unsafe. Consider using scanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.<br>1&gt; d:\program files\microsoft visual studio 11.0\vc\include\stdio.h(290) : 参见“scanf”的声明<br>1&gt;C:\Program Files\MSBuild\Microsoft.Cpp\v4.0\V110\Microsoft.CppCommon.targets(347,5): error MSB6006: “CL.exe”已退出，代码为 2。</p>
<p>这种微软的警告，主要因为那些C库的函数，很多函数内部是不进行参数检测的（包括越界类的），微软担心使用这些会造成内存异常，所以就改写了同样功能的函数，改写了的函数进行了参数的检测，使用这些新的函数会更安全和便捷。关于这些改写的函数你不用专门去记忆，因为编译器对于每个函数在给出警告时，都会告诉你相应的安全函数，查看警告信息就可以获知，在使用时也再查看一下MSDN详细了解。</p>
<p>解决方法如下：</p>
<p>一：将原来的旧函数替换成新的安全函数，比如scanf_s函数</p>
<p>二：更改预处理定义：</p>
<pre><code>项目-&gt;属性-&gt;配置属性-&gt;C/C++ -&gt; 预处理器 -&gt; 预处理器定义，增加：_CRT_SECURE_NO_DEPRECATE
</code></pre>
<p>三：在预编译头文件 stdafx.h 里（要在没有include任何头文件之前）定义下面的宏：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_DEPRECATE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES 1</span></span><br></pre></td></tr></table></figure>

<p>第三种方法来源于网络，没有亲自试验</p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>安装MySQL8.0出现错误The service already exists!The current server installed</title>
    <url>/2022/10/30/%E5%AE%89%E8%A3%85MySQL8.0%E5%87%BA%E7%8E%B0%E7%9A%84%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<h1 id="安装MySQL8-0出现错误"><a href="#安装MySQL8-0出现错误" class="headerlink" title="安装MySQL8.0出现错误"></a>安装MySQL8.0出现错误</h1><p>安装MySQL8.0出现的The service already exists!The current server installed：</p>
<p>这是我在安装MySQL的时候出现的一个服务冲突问题：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">C</span>:\Windows\system32&gt;mysqld  install  mysql8</span><br><span class="line"><span class="attribute">The</span> service already exists!</span><br><span class="line"><span class="attribute">The</span> current server installed: D:\DB\mysql-<span class="number">8</span>.<span class="number">0</span>.<span class="number">17</span>-winx64\bin\mysqld mysql8</span><br></pre></td></tr></table></figure>

<p>这是因为在现在之前的MySQL的时候没有卸载干净（服务未关闭）</p>
<span id="more"></span>

<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>管理员方式运行cmd</p>
<p>查询服务：输入 <code>sc query mysql</code></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">C:\Windows\system32&gt;sc query mysql8</span><br><span class="line"></span><br><span class="line">SERVICE_NAME: mysql8</span><br><span class="line">        <span class="keyword">TYPE</span>               : <span class="number">10</span>  WIN32_OWN_PROCESS</span><br><span class="line">        STATE              : <span class="number">1</span>  STOPPED</span><br><span class="line">        WIN32_EXIT_CODE    : <span class="number">0</span>  (<span class="number">0x0</span>)</span><br><span class="line">        SERVICE_EXIT_CODE  : <span class="number">0</span>  (<span class="number">0x0</span>)</span><br><span class="line">        <span class="keyword">CHECKPOINT</span>         : <span class="number">0x0</span></span><br><span class="line">        WAIT_HINT          : <span class="number">0x7d0</span></span><br></pre></td></tr></table></figure>

<p>删除服务：输入 <code>sc delete mysql</code></p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">C:<span class="string">\Windows\system32&gt;sc</span> <span class="keyword">delete</span> mysql8</span><br><span class="line">[SC] DeleteService 成功</span><br></pre></td></tr></table></figure>

<p>当出现 Delete Service 成功</p>
<p>此时，可以重新安装：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">C:</span>\Windows\system32&gt;mysqld  install  mysql8</span><br><span class="line">Service successfully installed.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言简明教程</title>
    <url>/2022/10/28/go%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="1-Go-安装"><a href="#1-Go-安装" class="headerlink" title="1 Go 安装"></a>1 Go 安装</h2><p>最新版本下载地址<a href="https://golang.org/dl/">官方下载 golang.org</a>，当前是 1.13.6。如无法访问，可以在 <strong>studygolang.com&#x2F;dl</strong> 下载</p>
<p>使用 Linux，可以用如下方式快速安装。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wget https://studygolang.com/dl/golang/go1.13.6.linux-amd64.tar.gz</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar -zxvf go1.13.6.linux-amd64.tar.gz</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">mv</span> go /usr/local/</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go version</span></span><br><span class="line">go version go1.13.6 linux/amd64</span><br></pre></td></tr></table></figure>

<p>从 <code>Go 1.11</code> 版本开始，Go 提供了 <a href="https://github.com/golang/go/wiki/Modules">Go Modules</a> 的机制，推荐设置以下环境变量，第三方包的下载将通过国内镜像，避免出现官方网址被屏蔽的问题。</p>
<span id="more"></span>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go <span class="built_in">env</span> -w GOPROXY=https://goproxy.cn,direct</span></span><br></pre></td></tr></table></figure>

<p>或在 <code>~/.profile</code> 中设置环境变量</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">GOPROXY</span>=https://goproxy.cn</span><br></pre></td></tr></table></figure>

<h2 id="2-Hello-World"><a href="#2-Hello-World" class="headerlink" title="2 Hello World"></a>2 Hello World</h2><p>新建一个文件 <code>main.go</code>，写入</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行<code>go run main.go</code> 或 <code>go run .</code>，将会输出</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">run</span> .</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果强制启用了 Go Modules 机制，即环境变量中设置了 GO111MODULE&#x3D;on，则需要先初始化模块 go mod init hello<br>否则会报错误：go: cannot find main module; see ‘go help modules’</p>
</blockquote>
<p>我们的第一个 Go 程序就完成了，接下来我们逐行来解读这个程序：</p>
<ul>
<li>package main：声明了 main.go 所在的包，Go 语言中使用包来组织代码。一般一个文件夹即一个包，包内可以暴露类型或方法供其他包使用。</li>
<li>import “fmt”：fmt 是 Go 语言的一个标准库&#x2F;包，用来处理标准输入输出。</li>
<li>func main：main 函数是整个程序的入口，main 函数所在的包名也必须为 <code>main</code>。</li>
<li>fmt.Println(“Hello World!”)：调用 fmt 包的 Println 方法，打印出 “Hello World!”</li>
</ul>
<p>go run main.go，其实是 2 步：</p>
<ul>
<li>go build main.go：编译成二进制可执行程序</li>
<li>.&#x2F;main：执行该程序</li>
</ul>
<h2 id="3-变量与内置数据类型"><a href="#3-变量与内置数据类型" class="headerlink" title="3 变量与内置数据类型"></a>3 变量与内置数据类型</h2><h3 id="3-1-变量-Variable"><a href="#3-1-变量-Variable" class="headerlink" title="3.1 变量(Variable)"></a>3.1 变量(Variable)</h3><p>Go 语言是静态类型的，变量声明时必须明确变量的类型。Go 语言与其他语言显著不同的一个地方在于，Go 语言的类型在变量后面。比如 java 中，声明一个整体一般写成 <code>int a = 1</code>，在 Go 语言中，需要这么写：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">int</span> <span class="comment">// 如果没有赋值，默认为0</span></span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">1</span> <span class="comment">// 声明时赋值</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> <span class="comment">// 声明时赋值</span></span><br></pre></td></tr></table></figure>

<p><code>var a = 1</code>，因为 1 是 int 类型的，所以赋值时，a 自动被确定为 int 类型，所以类型名可以省略不写，这种方式还有一种更简单的表达：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := <span class="number">1</span></span><br><span class="line">msg := <span class="string">&quot;Hello World!&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-简单类型"><a href="#3-2-简单类型" class="headerlink" title="3.2 简单类型"></a>3.2 简单类型</h3><p>空值：nil</p>
<p>整型类型： int(取决于操作系统), int8, int16, int32, int64, uint8, uint16, …</p>
<p>浮点数类型：float32, float64</p>
<p>字节类型：byte (等价于uint8)</p>
<p>字符串类型：string</p>
<p>布尔值类型：boolean，(true 或 false)</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">int8</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> c1 <span class="type">byte</span> = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">float32</span> = <span class="number">12.2</span></span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">ok := <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-字符串"><a href="#3-3-字符串" class="headerlink" title="3.3 字符串"></a>3.3 字符串</h3><p>在 Go 语言中，字符串使用 UTF8 编码，UTF8 的好处在于，如果基本是英文，每个字符占 1 byte，和 ASCII 编码是一样的，非常节省空间，如果是中文，一般占3字节。包含中文的字符串的处理方式与纯 ASCII 码构成的字符串有点区别。</p>
<p>我们看下面的例子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str1 := <span class="string">&quot;Golang&quot;</span></span><br><span class="line">    str2 := <span class="string">&quot;Go语言&quot;</span></span><br><span class="line">    fmt.Println(reflect.TypeOf(str2[<span class="number">2</span>]).Kind()) <span class="comment">// uint8</span></span><br><span class="line">    fmt.Println(str1[<span class="number">2</span>], <span class="type">string</span>(str1[<span class="number">2</span>]))       <span class="comment">// 108 l</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d %c\n&quot;</span>, str2[<span class="number">2</span>], str2[<span class="number">2</span>])     <span class="comment">// 232 è</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;len(str2)：&quot;</span>, <span class="built_in">len</span>(str2))       <span class="comment">// len(str2)： 8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>reflect.TypeOf().Kind() 可以知道某个变量的类型，我们可以看到，字符串是以 byte 数组形式保存的，类型是 uint8，占1个 byte，打印时需要用 string 进行类型转换，否则打印的是编码值。</li>
<li>因为字符串是以 byte 数组的形式存储的，所以，<code>str2[2]</code> 的值并不等于<code>语</code>。str2 的长度 <code>len(str2)</code> 也不是 4，而是 8（ Go 占 2 byte，语言占 6 byte）。</li>
</ul>
<p>正确的处理方式是将 string 转为 rune 数组</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">str2 := <span class="string">&quot;Go语言&quot;</span></span><br><span class="line">runeArr := []<span class="type">rune</span>(str2)</span><br><span class="line">fmt.Println(reflect.TypeOf(runeArr[<span class="number">2</span>]).Kind()) <span class="comment">// int32</span></span><br><span class="line">fmt.Println(runeArr[<span class="number">2</span>], <span class="type">string</span>(runeArr[<span class="number">2</span>]))    <span class="comment">// 35821 语</span></span><br><span class="line">fmt.Println(<span class="string">&quot;len(runeArr)：&quot;</span>, <span class="built_in">len</span>(runeArr))    <span class="comment">// len(runeArr)： 4</span></span><br></pre></td></tr></table></figure>

<p>转换成 <code>[]rune</code> 类型后，字符串中的每个字符，无论占多少个字节都用 int32 来表示，因而可以正确处理中文。</p>
<h3 id="3-4-数组-array-与切片-slice"><a href="#3-4-数组-array-与切片-slice" class="headerlink" title="3.4 数组(array)与切片(slice)"></a>3.4 数组(array)与切片(slice)</h3><p>声明数组</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr [<span class="number">5</span>]<span class="type">int</span>     <span class="comment">// 一维</span></span><br><span class="line"><span class="keyword">var</span> arr2 [<span class="number">5</span>][<span class="number">5</span>]<span class="type">int</span> <span class="comment">// 二维 </span></span><br></pre></td></tr></table></figure>

<p>声明时初始化</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="comment">// 或 arr := [5]int&#123;1, 2, 3, 4, 5&#125;</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>[]</code> 索引&#x2F;修改数组</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">arr := [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123;</span><br><span class="line">	arr[i] += <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(arr)  <span class="comment">// [101 102 103 104 105]</span></span><br></pre></td></tr></table></figure>

<p>数组的长度不能改变，如果想拼接2个数组，或是获取子数组，需要使用切片。切片是数组的抽象。 切片使用数组作为底层结构。切片包含三个组件：容量，长度和指向底层数组的指针,切片可以随时进行扩展</p>
<p>声明切片：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">slice1 := <span class="built_in">make</span>([]<span class="type">float32</span>, <span class="number">0</span>) <span class="comment">// 长度为0的切片</span></span><br><span class="line">slice2 := <span class="built_in">make</span>([]<span class="type">float32</span>, <span class="number">3</span>, <span class="number">5</span>) <span class="comment">// [0 0 0] 长度为3容量为5的切片</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice2), <span class="built_in">cap</span>(slice2)) <span class="comment">// 3 5</span></span><br></pre></td></tr></table></figure>

<p>使用切片：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加元素，切片容量可以根据需要自动扩展</span></span><br><span class="line">slice2 = <span class="built_in">append</span>(slice2, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="comment">// [0, 0, 0, 1, 2, 3, 4]</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice2), <span class="built_in">cap</span>(slice2)) <span class="comment">// 7 12</span></span><br><span class="line"><span class="comment">// 子切片 [start, end)</span></span><br><span class="line">sub1 := slice2[<span class="number">3</span>:] <span class="comment">// [1 2 3 4]</span></span><br><span class="line">sub2 := slice2[:<span class="number">3</span>] <span class="comment">// [0 0 0]</span></span><br><span class="line">sub3 := slice2[<span class="number">1</span>:<span class="number">4</span>] <span class="comment">// [0 0 1]</span></span><br><span class="line"><span class="comment">// 合并切片</span></span><br><span class="line">combined := <span class="built_in">append</span>(sub1, sub2...) <span class="comment">// [1, 2, 3, 4, 0, 0, 0]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>声明切片时可以为切片设置容量大小，为切片预分配空间。在实际使用的过程中，如果容量不够，切片容量会自动扩展。</li>
<li><code>sub2...</code> 是切片解构的写法，将切片解构为 N 个独立的元素。</li>
</ul>
<h3 id="3-5-字典-键值对，map"><a href="#3-5-字典-键值对，map" class="headerlink" title="3.5 字典(键值对，map)"></a>3.5 字典(键值对，map)</h3><p>map 类似于 java 的 HashMap，Python的字典(dict)，是一种存储键值对(Key-Value)的数据解构。使用方式和其他语言几乎没有区别。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 仅声明</span></span><br><span class="line">m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line"><span class="comment">// 声明时初始化</span></span><br><span class="line">m2 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line">	<span class="string">&quot;Sam&quot;</span>: <span class="string">&quot;Male&quot;</span>,</span><br><span class="line">	<span class="string">&quot;Alice&quot;</span>: <span class="string">&quot;Female&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 赋值/修改</span></span><br><span class="line">m1[<span class="string">&quot;Tom&quot;</span>] = <span class="number">18</span></span><br></pre></td></tr></table></figure>

<h3 id="3-6-指针-pointer"><a href="#3-6-指针-pointer" class="headerlink" title="3.6 指针(pointer)"></a>3.6 指针(pointer)</h3><p>指针即某个值的地址，类型定义时使用符号<code>*</code>，对一个已经存在的变量，使用 <code>&amp;</code> 获取该变量的地址。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">str := <span class="string">&quot;Golang&quot;</span></span><br><span class="line"><span class="keyword">var</span> p *<span class="type">string</span> = &amp;str <span class="comment">// p 是指向 str 的指针</span></span><br><span class="line">*p = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">fmt.Println(str) <span class="comment">// Hello 修改了 p，str 的值也发生了改变</span></span><br></pre></td></tr></table></figure>

<p>一般来说，指针通常在函数传递参数，或者给某个类型定义新的方法时使用。Go 语言中，参数是按值传递的，如果不使用指针，函数内部将会拷贝一份参数的副本，对参数的修改并不会影响到外部变量的值。如果参数使用指针，对参数的传递将会影响到外部变量。</p>
<p>例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(num <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	num += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">realAdd</span><span class="params">(num *<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	*num += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	num := <span class="number">100</span></span><br><span class="line">	add(num)</span><br><span class="line">	fmt.Println(num)  <span class="comment">// 100，num 没有变化</span></span><br><span class="line"></span><br><span class="line">	realAdd(&amp;num)</span><br><span class="line">	fmt.Println(num)  <span class="comment">// 101，指针传递，num 被修改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-流程控制-if-for-switch"><a href="#4-流程控制-if-for-switch" class="headerlink" title="4 流程控制(if, for, switch)"></a>4 流程控制(if, for, switch)</h2><h3 id="4-1-条件语句-if-else"><a href="#4-1-条件语句-if-else" class="headerlink" title="4.1 条件语句 if else"></a>4.1 条件语句 if else</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">age := <span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">18</span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Kid&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Adult&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以简写为：</span></span><br><span class="line"><span class="keyword">if</span> age := <span class="number">18</span>; age &lt; <span class="number">18</span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Kid&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Adult&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-switch"><a href="#4-2-switch" class="headerlink" title="4.2 switch"></a>4.2 switch</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Gender <span class="type">int8</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	MALE   Gender = <span class="number">1</span></span><br><span class="line">	FEMALE Gender = <span class="number">2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">gender := MALE</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> gender &#123;</span><br><span class="line"><span class="keyword">case</span> FEMALE:</span><br><span class="line">	fmt.Println(<span class="string">&quot;female&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> MALE:</span><br><span class="line">	fmt.Println(<span class="string">&quot;male&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">	fmt.Println(<span class="string">&quot;unknown&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// male</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在这里，使用了<code>type</code> 关键字定义了一个新的类型 Gender。</li>
<li>使用 const 定义了 MALE 和 FEMALE 2 个常量，Go 语言中没有枚举(enum)的概念，一般可以用常量的方式来模拟枚举。</li>
<li>和其他语言不同的地方在于，Go 语言的 switch 不需要 break，匹配到某个 case，执行完该 case 定义的行为后，默认不会继续往下执行。如果需要继续往下执行，需要使用 fallthrough，例如：</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> gender &#123;</span><br><span class="line"><span class="keyword">case</span> FEMALE:</span><br><span class="line">	fmt.Println(<span class="string">&quot;female&quot;</span>)</span><br><span class="line">	<span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> MALE:</span><br><span class="line">	fmt.Println(<span class="string">&quot;male&quot;</span>)</span><br><span class="line">	<span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">	fmt.Println(<span class="string">&quot;unknown&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// male</span></span><br><span class="line"><span class="comment">// unknown</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-for-循环"><a href="#4-3-for-循环" class="headerlink" title="4.3 for 循环"></a>4.3 for 循环</h3><p>一个简单的累加的例子，break 和 continue 的用法与其他语言没有区别。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">	<span class="keyword">if</span> sum &gt; <span class="number">50</span> &#123;</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">	&#125;</span><br><span class="line">	sum += i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对数组(arr)、切片(slice)、字典(map) 使用 for range 遍历：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">nums := []<span class="type">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">	fmt.Println(i, num)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 10</span></span><br><span class="line"><span class="comment">// 1 20</span></span><br><span class="line"><span class="comment">// 2 30</span></span><br><span class="line"><span class="comment">// 3 40</span></span><br><span class="line">m2 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span> &#123;</span><br><span class="line">	<span class="string">&quot;Sam&quot;</span>:   <span class="string">&quot;Male&quot;</span>,</span><br><span class="line">	<span class="string">&quot;Alice&quot;</span>: <span class="string">&quot;Female&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> m2 &#123;</span><br><span class="line">	fmt.Println(key, value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Sam Male</span></span><br><span class="line"><span class="comment">// Alice Female</span></span><br></pre></td></tr></table></figure>

<h2 id="5-函数-functions"><a href="#5-函数-functions" class="headerlink" title="5 函数(functions)"></a>5 函数(functions)</h2><h3 id="5-1-参数与返回值"><a href="#5-1-参数与返回值" class="headerlink" title="5.1 参数与返回值"></a>5.1 参数与返回值</h3><p>一个典型的函数定义如下，使用关键字 <code>func</code>，参数可以有多个，返回值也支持有多个。特别地，<code>package main</code> 中的<code>func main()</code> 约定为可执行程序的入口。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcName</span><span class="params">(param1 Type1, param2 Type2, ...)</span></span> (return1 Type3, ...) &#123;</span><br><span class="line">    <span class="comment">// body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如，实现2个数的加法（一个返回值）和除法（多个返回值）：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(num1 <span class="type">int</span>, num2 <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">div</span><span class="params">(num1 <span class="type">int</span>, num2 <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> num1 / num2, num1 % num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	quo, rem := div(<span class="number">100</span>, <span class="number">17</span>)</span><br><span class="line">	fmt.Println(quo, rem)     <span class="comment">// 5 15</span></span><br><span class="line">	fmt.Println(add(<span class="number">100</span>, <span class="number">17</span>)) <span class="comment">// 117</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以给返回值命名，简化 return，例如 add 函数可以改写为</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(num1 <span class="type">int</span>, num2 <span class="type">int</span>)</span></span> (ans <span class="type">int</span>) &#123;</span><br><span class="line">	ans = num1 + num2</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-错误处理-error-handling"><a href="#5-2-错误处理-error-handling" class="headerlink" title="5.2 错误处理(error handling)"></a>5.2 错误处理(error handling)</h3><p>如果函数实现过程中，如果出现不能处理的错误，可以返回给调用者处理。比如我们调用标准库函数<code>os.Open</code>读取文件，<code>os.Open</code> 有2个返回值，第一个是 <code>*File</code>，第二个是 <code>error</code>， 如果调用成功，error 的值是 nil，如果调用失败，例如文件不存在，我们可以通过 error 知道具体的错误信息。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;s</span><br><span class="line">	_, err := os.Open(<span class="string">&quot;filename.txt&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// open filename.txt: no such file or directory</span></span><br></pre></td></tr></table></figure>

<p>可以通过 <code>errorw.New</code> 返回自定义的错误</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;errors&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(name <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(name) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> errors.New(<span class="string">&quot;error: name is null&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello,&quot;</span>, name)</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> err := hello(<span class="string">&quot;&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// error: name is null</span></span><br></pre></td></tr></table></figure>

<p>error 往往是能预知的错误，但是也可能出现一些不可预知的错误，例如数组越界，这种错误可能会导致程序非正常退出，在 Go 语言中称之为 panic。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(index <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	arr := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	<span class="keyword">return</span> arr[index]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(get(<span class="number">5</span>))</span><br><span class="line">	fmt.Println(<span class="string">&quot;finished&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">$ <span class="keyword">go</span> run .</span><br><span class="line"><span class="built_in">panic</span>: runtime <span class="type">error</span>: index out of <span class="keyword">range</span> [<span class="number">5</span>] with length <span class="number">3</span></span><br><span class="line">goroutine <span class="number">1</span> [running]:</span><br><span class="line">exit status <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>在 Python、Java 等语言中有 <code>try...catch</code> 机制，在 <code>try</code> 中捕获各种类型的异常，在 <code>catch</code> 中定义异常处理的行为。Go 语言也提供了类似的机制 <code>defer</code> 和 <code>recover</code>。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(index <span class="type">int</span>)</span></span> (ret <span class="type">int</span>) &#123;</span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> r := <span class="built_in">recover</span>(); r != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;Some error happened!&quot;</span>, r)</span><br><span class="line">			ret = <span class="number">-1</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	arr := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	<span class="keyword">return</span> arr[index]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(get(<span class="number">5</span>))</span><br><span class="line">	fmt.Println(<span class="string">&quot;finished&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">$ <span class="keyword">go</span> run .</span><br><span class="line">Some <span class="type">error</span> happened! runtime <span class="type">error</span>: index out of <span class="keyword">range</span> [<span class="number">5</span>] with length <span class="number">3</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line">finished</span><br></pre></td></tr></table></figure>

<ul>
<li>在 get 函数中，使用 defer 定义了异常处理的函数，在协程退出前，会执行完 defer 挂载的任务。因此如果触发了 panic，控制权就交给了 defer。</li>
<li>在 defer 的处理逻辑中，使用 recover，使程序恢复正常，并且将返回值设置为 -1，在这里也可以不处理返回值，如果不处理返回值，返回值将被置为默认值 0。</li>
</ul>
<h2 id="6-结构体，方法和接口"><a href="#6-结构体，方法和接口" class="headerlink" title="6 结构体，方法和接口"></a>6 结构体，方法和接口</h2><h3 id="6-1-结构体-struct-和方法-methods"><a href="#6-1-结构体-struct-和方法-methods" class="headerlink" title="6.1 结构体(struct) 和方法(methods)"></a>6.1 结构体(struct) 和方法(methods)</h3><p>结构体类似于其他语言中的 class，可以在结构体中定义多个字段，为结构体实现方法，实例化等。接下来我们定义一个结构体 Student，并为 Student 添加 name，age 字段，并实现 <code>hello()</code> 方法。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="type">string</span></span><br><span class="line">	age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(stu *Student)</span></span> hello(person <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;hello %s, I am %s&quot;</span>, person, stu.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	stu := &amp;Student&#123;</span><br><span class="line">		name: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	msg := stu.hello(<span class="string">&quot;Jack&quot;</span>)</span><br><span class="line">	fmt.Println(msg) <span class="comment">// hello Jack, I am Tom</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>Student&#123;field: value, ...&#125;</code>的形式创建 Student 的实例，字段不需要每个都赋值，没有显性赋值的变量将被赋予默认值，例如 age 将被赋予默认值 0。</li>
<li>实现方法与实现函数的区别在于，<code>func</code> 和函数名<code>hello</code> 之间，加上该方法对应的实例名 <code>stu</code> 及其类型 <code>*Student</code>，可以通过实例名访问该实例的字段<code>name</code>和其他方法了。</li>
<li>调用方法通过 <code>实例名.方法名(参数)</code> 的方式。</li>
</ul>
<p>除此之外，还可以使用 <code>new</code> 实例化：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">func <span class="selector-tag">main</span>() &#123;</span><br><span class="line">	stu2 := <span class="built_in">new</span>(Student)</span><br><span class="line">	fmt.<span class="built_in">Println</span>(stu2.<span class="built_in">hello</span>(<span class="string">&quot;Alice&quot;</span>)) // hello Alice, I am  , name 被赋予默认值<span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-2-接口-interfaces"><a href="#6-2-接口-interfaces" class="headerlink" title="6.2 接口(interfaces)"></a>6.2 接口(interfaces)</h3><p>一般而言，接口定义了一组方法的集合，接口不能被实例化，一个类型可以实现多个接口。</p>
<p>举一个简单的例子，定义一个接口 <code>Person</code>和对应的方法 <code>getName()</code> 和 <code>getAge()</code>：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">interface</span> &#123;</span><br><span class="line">	getName() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="type">string</span></span><br><span class="line">	age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(stu *Student)</span></span> getName() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> stu.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Worker <span class="keyword">struct</span> &#123;</span><br><span class="line">	name   <span class="type">string</span></span><br><span class="line">	gender <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *Worker)</span></span> getName() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> w.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> p Person = &amp;Student&#123;</span><br><span class="line">		name: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">		age:  <span class="number">18</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(p.getName()) <span class="comment">// Tom</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Go 语言中，并不需要显式地声明实现了哪一个接口，只需要直接实现该接口对应的方法即可。</li>
<li>实例化 <code>Student</code>后，强制类型转换为接口类型 Person。</li>
</ul>
<p>在上面的例子中，我们在 main 函数中尝试将 Student 实例类型转换为 Person，如果 Student 没有完全实现 Person 的方法，比如我们将 <code>(*Student).getName()</code> 删掉，编译时会出现如下报错信息。</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">*Student does <span class="keyword">not</span> implement Person (missing getName <span class="keyword">method</span>)</span><br></pre></td></tr></table></figure>

<p>但是删除 <code>(*Worker).getName()</code> 程序并不会报错，因为我们并没有在 main 函数中使用。这种情况下我们如何确保某个类型实现了某个接口的所有方法呢？一般可以使用下面的方法进行检测，如果实现不完整，编译期将会报错。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _ Person = (*Student)(<span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">var</span> _ Person = (*Worker)(<span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>将空值 nil 转换为 *Student 类型，再转换为 Person 接口，如果转换失败，说明 Student 并没有实现 Person 接口的所有方法。</li>
<li>Worker 同上。</li>
</ul>
<p>实例可以强制类型转换为接口，接口也可以强制类型转换为实例。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">func <span class="selector-tag">main</span>() &#123;</span><br><span class="line">	<span class="selector-tag">var</span> <span class="selector-tag">p</span> Person = &amp;Student&#123;</span><br><span class="line">		name: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">		age:  <span class="number">18</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	stu := <span class="selector-tag">p</span>.(*Student) <span class="comment">// 接口转为实例</span></span><br><span class="line">	fmt<span class="selector-class">.Println</span>(stu<span class="selector-class">.getAge</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-3-空接口"><a href="#6-3-空接口" class="headerlink" title="6.3 空接口"></a>6.3 空接口</h3><p>如果定义了一个没有任何方法的空接口，那么这个接口可以表示任意类型。例如</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">	m[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;Tom&quot;</span></span><br><span class="line">	m[<span class="string">&quot;age&quot;</span>] = <span class="number">18</span></span><br><span class="line">	m[<span class="string">&quot;scores&quot;</span>] = [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">98</span>, <span class="number">99</span>, <span class="number">85</span>&#125;</span><br><span class="line">	fmt.Println(m) <span class="comment">// map[age:18 name:Tom scores:[98 99 85]]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-并发编程-goroutine"><a href="#7-并发编程-goroutine" class="headerlink" title="7 并发编程(goroutine)"></a>7 并发编程(goroutine)</h2><h3 id="7-1-sync"><a href="#7-1-sync" class="headerlink" title="7.1 sync"></a>7.1 sync</h3><p>Go 语言提供了 sync 和 channel 两种方式支持协程(goroutine)的并发。</p>
<p>例如我们希望并发下载 N 个资源，多个并发协程之间不需要通信，那么就可以使用 sync.WaitGroup，等待所有并发协程执行结束。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">download</span><span class="params">(url <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;start to download&quot;</span>, url)</span><br><span class="line">	time.Sleep(time.Second) <span class="comment">// 模拟耗时操作</span></span><br><span class="line">	wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">go</span> download(<span class="string">&quot;a.com/&quot;</span> + <span class="type">string</span>(i+<span class="string">&#x27;0&#x27;</span>))</span><br><span class="line">	&#125;</span><br><span class="line">	wg.Wait()</span><br><span class="line">	fmt.Println(<span class="string">&quot;Done!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>wg.Add(1)：为 wg 添加一个计数，wg.Done()，减去一个计数。</li>
<li>go download()：启动新的协程并发执行 download 函数。</li>
<li>wg.Wait()：等待所有的协程执行结束。</li>
</ul>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">$  <span class="built_in">time</span> go run .</span><br><span class="line"><span class="built_in">start</span> <span class="built_in">to</span> download <span class="keyword">a</span>.com/<span class="number">2</span></span><br><span class="line"><span class="built_in">start</span> <span class="built_in">to</span> download <span class="keyword">a</span>.com/<span class="number">0</span></span><br><span class="line"><span class="built_in">start</span> <span class="built_in">to</span> download <span class="keyword">a</span>.com/<span class="number">1</span></span><br><span class="line">Done!</span><br><span class="line"></span><br><span class="line">real    <span class="number">0</span>m1<span class="number">.563</span>s</span><br></pre></td></tr></table></figure>

<p>可以看到串行需要 3s 的下载操作，并发后，只需要 1s。</p>
<h3 id="7-2-channel"><a href="#7-2-channel" class="headerlink" title="7.2 channel"></a>7.2 channel</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ch = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, <span class="number">10</span>) <span class="comment">// 创建大小为 10 的缓冲信道</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">download</span><span class="params">(url <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;start to download&quot;</span>, url)</span><br><span class="line">	time.Sleep(time.Second)</span><br><span class="line">	ch &lt;- url <span class="comment">// 将 url 发送给信道</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> download(<span class="string">&quot;a.com/&quot;</span> + <span class="type">string</span>(i+<span class="string">&#x27;0&#x27;</span>))</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">		msg := &lt;-ch <span class="comment">// 等待信道返回消息。</span></span><br><span class="line">		fmt.Println(<span class="string">&quot;finish&quot;</span>, msg)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Done!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 channel 信道，可以在协程之间传递消息。阻塞等待并发协程返回消息。</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">time</span> go run .</span><br><span class="line"><span class="built_in">start</span> <span class="built_in">to</span> download <span class="keyword">a</span>.com/<span class="number">2</span></span><br><span class="line"><span class="built_in">start</span> <span class="built_in">to</span> download <span class="keyword">a</span>.com/<span class="number">0</span></span><br><span class="line"><span class="built_in">start</span> <span class="built_in">to</span> download <span class="keyword">a</span>.com/<span class="number">1</span></span><br><span class="line">finish <span class="keyword">a</span>.com/<span class="number">2</span></span><br><span class="line">finish <span class="keyword">a</span>.com/<span class="number">1</span></span><br><span class="line">finish <span class="keyword">a</span>.com/<span class="number">0</span></span><br><span class="line">Done!</span><br><span class="line"></span><br><span class="line">real    <span class="number">0</span>m1<span class="number">.528</span>s</span><br></pre></td></tr></table></figure>

<h2 id="8-单元测试-unit-test"><a href="#8-单元测试-unit-test" class="headerlink" title="8 单元测试(unit test)"></a>8 单元测试(unit test)</h2><p>假设我们希望测试 package main 下 <code>calc.go</code> 中的函数，要只需要新建 <code>calc_test.go</code> 文件，在<code>calc_test.go</code>中新建测试用例即可。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// calc.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(num1 <span class="type">int</span>, num2 <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// calc_test.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAdd</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> ans := add(<span class="number">1</span>, <span class="number">2</span>); ans != <span class="number">3</span> &#123;</span><br><span class="line">		t.Error(<span class="string">&quot;add(1, 2) should be equal to 3&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行 <code>go test</code>，将自动运行当前 package 下的所有测试用例，如果需要查看详细的信息，可以添加<code>-v</code>参数。</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">$ go test -v</span><br><span class="line"><span class="section">=== RUN   TestAdd</span></span><br><span class="line"><span class="bullet">--- </span>PASS: TestAdd (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok      example 0.040s</span><br></pre></td></tr></table></figure>

<h2 id="9-包-Package-和模块-Modules"><a href="#9-包-Package-和模块-Modules" class="headerlink" title="9 包(Package)和模块(Modules)"></a>9 包(Package)和模块(Modules)</h2><h3 id="9-1-Package"><a href="#9-1-Package" class="headerlink" title="9.1 Package"></a>9.1 Package</h3><p>一般来说，一个文件夹可以作为 package，同一个 package 内部变量、类型、方法等定义可以相互看到。</p>
<p>比如我们新建一个文件 <code>calc.go</code>， <code>main.go</code> 平级，分别定义 add 和 main 方法。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// calc.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(num1 <span class="type">int</span>, num2 <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// main.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(add(<span class="number">3</span>, <span class="number">5</span>)) <span class="comment">// 8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行 <code>go run main.go</code>，会报错，add 未定义：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">./<span class="selector-tag">main</span><span class="selector-class">.go</span>:<span class="number">6</span>:<span class="number">14</span>: undefined: add</span><br></pre></td></tr></table></figure>

<p>因为 <code>go run main.go</code> 仅编译 main.go 一个文件，所以命令需要换成</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> run main.<span class="keyword">go</span> calc.<span class="keyword">go</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">run</span> .</span><br><span class="line">8</span><br></pre></td></tr></table></figure>

<p>Go 语言也有 Public 和 Private 的概念，粒度是包。如果类型&#x2F;接口&#x2F;方法&#x2F;函数&#x2F;字段的首字母大写，则是 Public 的，对其他 package 可见，如果首字母小写，则是 Private 的，对其他 package 不可见。</p>
<h3 id="9-2-Modules"><a href="#9-2-Modules" class="headerlink" title="9.2 Modules"></a>9.2 Modules</h3><p><a href="https://github.com/golang/go/wiki/Modules">Go Modules</a> 是 Go 1.11 版本之后引入的，Go 1.11 之前使用 $GOPATH 机制。Go Modules 可以算作是较为完善的包管理工具。同时支持代理，国内也能享受高速的第三方包镜像服务。接下来简单介绍 <code>go mod</code> 的使用。Go Modules 在 1.13 版本仍是可选使用的，环境变量 GO111MODULE 的值默认为 AUTO，强制使用 Go Modules 进行依赖管理，可以将 GO111MODULE 设置为 ON。</p>
<p>在一个空文件夹下，初始化一个 Module</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">go</span> <span class="built_in">mod</span> init <span class="built_in">example</span></span><br><span class="line"><span class="built_in">go</span>: creating <span class="built_in">new</span> <span class="built_in">go</span>.<span class="built_in">mod</span>: module <span class="built_in">example</span></span><br></pre></td></tr></table></figure>

<p>此时，在当前文件夹下生成了<code>go.mod</code>，这个文件记录当前模块的模块名以及所有依赖包的版本。</p>
<p>接着，我们在当前目录下新建文件 <code>main.go</code>，添加如下代码：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">package <span class="selector-tag">main</span></span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;rsc.io/quote&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func <span class="selector-tag">main</span>() &#123;</span><br><span class="line">	fmt<span class="selector-class">.Println</span>(<span class="selector-tag">quote</span><span class="selector-class">.Hello</span>())  <span class="comment">// Ahoy, world!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行 <code>go run .</code>，将会自动触发第三方包 <code>rsc.io/quote</code>的下载，具体的版本信息也记录在了<code>go.mod</code>中：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">module</span> example</span><br><span class="line"></span><br><span class="line"><span class="attribute">go</span> <span class="number">1</span>.<span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">require</span> rsc.io/quote v3.<span class="number">1</span>.<span class="number">0</span>+incompatible</span><br></pre></td></tr></table></figure>

<p>我们在当前目录，添加一个子 package calc，代码目录如下：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">demo/</span><br><span class="line">   <span class="string">|--calc/</span></span><br><span class="line">      <span class="string">|--calc.go</span></span><br><span class="line">   <span class="string">|--main.go</span></span><br></pre></td></tr></table></figure>

<p>在 <code>calc.go</code> 中写入</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> calc</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(num1 <span class="type">int</span>, num2 <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 package main 中如何使用 package cal 中的 Add 函数呢？<code>import 模块名/子目录名</code> 即可，修改后的 main 函数如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">package <span class="selector-tag">main</span></span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;example/calc&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;rsc.io/quote&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func <span class="selector-tag">main</span>() &#123;</span><br><span class="line">	fmt<span class="selector-class">.Println</span>(<span class="selector-tag">quote</span><span class="selector-class">.Hello</span>())</span><br><span class="line">	fmt<span class="selector-class">.Println</span>(calc<span class="selector-class">.Add</span>(<span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line">&#125;</span><br><span class="line">$ go run .</span><br><span class="line">Ahoy, world!</span><br><span class="line"><span class="number">13</span></span><br></pre></td></tr></table></figure>

<h2 id="附-参考"><a href="#附-参考" class="headerlink" title="附 参考"></a>附 参考</h2><ul>
<li><a href="https://golang.org/">golang 官方文档 - golang.org</a></li>
<li><a href="https://github.com/goproxy/goproxy.cn/blob/master/README.zh-CN.md">goproxy.cn 文档 - github.com</a></li>
<li><a href="https://github.com/golang/go/wiki/Modules">Go Modules - github.com</a></li>
</ul>
]]></content>
      <categories>
        <category>语言学习</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>在一个电脑上装两个mysql</title>
    <url>/2022/10/24/%E5%9C%A8%E4%B8%80%E4%B8%AA%E7%94%B5%E8%84%91%E4%B8%8A%E8%A3%85%E4%B8%A4%E4%B8%AAmysql/</url>
    <content><![CDATA[<p>本机已经有了一个MySQL5.7，再安装一个最新的MySQL8.0。</p>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>下载地址：<a href="https://dev.mysql.com/downloads/mysql/">MySQL下载地址</a><br>下载如下版本。</p>
<h1 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h1><p>将下载好的压缩包解压到C:\DB<br>路径自定义，但是路径中尽量不要带空格或中文。</p>
<span id="more"></span>

<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E5%9C%A8%E4%B8%80%E4%B8%AA%E7%94%B5%E8%84%91%E4%B8%8A%E8%A3%85%E4%B8%A4%E4%B8%AAmysql.assets/image-20221024160106170.png" alt="image-20221024160106170"></p>
<h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><p>在Path下添加 C:\DB\mysql-8.0.17-winx64\bin<br>这一步的目的是为了避免在CMD窗口下操作时反复切换路径，可以选择不配置。</p>
<h1 id="配置文件my-ini"><a href="#配置文件my-ini" class="headerlink" title="配置文件my.ini"></a>配置文件my.ini</h1><p>再mysql目录下新建一个配置文件my.ini</p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E5%9C%A8%E4%B8%80%E4%B8%AA%E7%94%B5%E8%84%91%E4%B8%8A%E8%A3%85%E4%B8%A4%E4%B8%AAmysql.assets/image-20221024160341958.png" alt="image-20221024160341958" style="zoom:50%;" />

<p>这里要注意的是，因为已经有了一个mysql服务，所以将端口设置为3307(只要没被占用就行。)</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># 这里设置3307端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3307</span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=C:\DB\mysql-<span class="number">8.0</span>.<span class="number">17</span>-winx64</span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=C:\DB\mysql-<span class="number">8.0</span>.<span class="number">17</span>-winx64\data</span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"><span class="comment"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span></span><br><span class="line"><span class="attr">max_connect_errors</span>=<span class="number">10</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为UTF8</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br><span class="line"><span class="comment"># 默认使用“mysql_native_password”插件认证</span></span><br><span class="line"><span class="attr">default_authentication_plugin</span>=mysql_native_password</span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3307</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br></pre></td></tr></table></figure>

<h1 id="安装及初始化mysql服务"><a href="#安装及初始化mysql服务" class="headerlink" title="安装及初始化mysql服务"></a>安装及初始化mysql服务</h1><p>cmd，管理员身身份运行：</p>
<h2 id="安装mysql服务"><a href="#安装mysql服务" class="headerlink" title="安装mysql服务"></a>安装mysql服务</h2><p>——这里服务命名为<em>mysql8</em>，以便区分。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">mysqld  <span class="keyword">install</span>  mysql8</span><br></pre></td></tr></table></figure>

<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E5%9C%A8%E4%B8%80%E4%B8%AA%E7%94%B5%E8%84%91%E4%B8%8A%E8%A3%85%E4%B8%A4%E4%B8%AAmysql.assets/image-20221024160602128.png" alt="image-20221024160602128"></p>
<h2 id="mysql初始化"><a href="#mysql初始化" class="headerlink" title="mysql初始化"></a>mysql初始化</h2><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">mysqld</span> <span class="literal">--</span><span class="comment">initialize</span> <span class="literal">--</span><span class="comment">console</span></span><br></pre></td></tr></table></figure>

<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E5%9C%A8%E4%B8%80%E4%B8%AA%E7%94%B5%E8%84%91%E4%B8%8A%E8%A3%85%E4%B8%A4%E4%B8%AAmysql.assets/image-20221024160739220.png" alt="image-20221024160739220"></p>
<p>执行完成以后，输出内容中会有mysql初始默认密码，复制保存，后面会用到。</p>
<h2 id="启动mysql服务"><a href="#启动mysql服务" class="headerlink" title="启动mysql服务"></a>启动mysql服务</h2><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> mysql8</span><br></pre></td></tr></table></figure>

<h1 id="修改mysql配置"><a href="#修改mysql配置" class="headerlink" title="修改mysql配置"></a>修改mysql配置</h1><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><p>在C:\DB\mysql-8.0.17-winx64\bin路径进入cmd窗口：</p>
<p>登录：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">mysql -u root -<span class="selector-tag">p</span></span><br></pre></td></tr></table></figure>

<p>输入前面记下的密码</p>
<p>修改密码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;admin&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="给root授权通过ip访问"><a href="#给root授权通过ip访问" class="headerlink" title="给root授权通过ip访问"></a>给root授权通过ip访问</h2><p>查看user相关信息：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"></span><br><span class="line">use mysql;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>,host,authentication_string <span class="keyword">from</span> mysql.user;</span><br></pre></td></tr></table></figure>

<p>这里root只能通过<em>localhost</em> 访问。</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E5%9C%A8%E4%B8%80%E4%B8%AA%E7%94%B5%E8%84%91%E4%B8%8A%E8%A3%85%E4%B8%A4%E4%B8%AAmysql.assets/image-20221024161625804.png" alt="image-20221024161625804"></p>
<p>设置用户<em>root</em> 能通过所有ip访问：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> host<span class="operator">=</span><span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span> ;</span><br></pre></td></tr></table></figure>

<p>最后用navicat连一下：</p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E5%9C%A8%E4%B8%80%E4%B8%AA%E7%94%B5%E8%84%91%E4%B8%8A%E8%A3%85%E4%B8%A4%E4%B8%AAmysql.assets/image-20221024161818808.png" alt="image-20221024161818808" style="zoom:50%;" />

<p><strong>参考：</strong><br>【1】：<a href="https://blog.csdn.net/qq_20788055/article/details/80372577">https://blog.csdn.net/qq_20788055/article/details/80372577</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven项目pom.xml文件不报错却报红</title>
    <url>/2022/10/16/Maven%E9%A1%B9%E7%9B%AEpom.xml%E6%96%87%E4%BB%B6%E4%B8%8D%E6%8A%A5%E9%94%99%E5%8D%B4%E6%9C%89%E7%BA%A2%E7%BA%BF%E6%8A%A5%E7%BA%A2%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h1 id="Maven项目pom-xml文件不报错却有红线报红的问题解决"><a href="#Maven项目pom-xml文件不报错却有红线报红的问题解决" class="headerlink" title="Maven项目pom.xml文件不报错却有红线报红的问题解决"></a>Maven项目pom.xml文件不报错却有红线报红的问题解决</h1><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Maven%E9%A1%B9%E7%9B%AEpom.xml%E6%96%87%E4%BB%B6%E4%B8%8D%E6%8A%A5%E9%94%99%E5%8D%B4%E6%9C%89%E7%BA%A2%E7%BA%BF%E6%8A%A5%E7%BA%A2%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3.assets/image-20221016140652939.png" alt="image-20221016140652939"></p>
<span id="more"></span>

<p>1.可能是ideal 的JavaScript language version配置过低的问题 . 重新配置一下 File➡Settings➡Languages&amp;Frameworks➡ECMAScript6</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Maven%E9%A1%B9%E7%9B%AEpom.xml%E6%96%87%E4%BB%B6%E4%B8%8D%E6%8A%A5%E9%94%99%E5%8D%B4%E6%9C%89%E7%BA%A2%E7%BA%BF%E6%8A%A5%E7%BA%A2%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3.assets/image-20221016140633743.png" alt="image-20221016140633743"></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Maven%E9%A1%B9%E7%9B%AEpom.xml%E6%96%87%E4%BB%B6%E4%B8%8D%E6%8A%A5%E9%94%99%E5%8D%B4%E6%9C%89%E7%BA%A2%E7%BA%BF%E6%8A%A5%E7%BA%A2%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3.assets/image-20221016140702407.png" alt="image-20221016140702407"></p>
<p>2.问题可能存在的原因是某一行代码或多行代码前面多了空格 ,代码少的话可以对比查找一下; 多的话直接清除ideal缓存并重启 File➡Invalidate Caches &#x2F; Restart</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Maven%E9%A1%B9%E7%9B%AEpom.xml%E6%96%87%E4%BB%B6%E4%B8%8D%E6%8A%A5%E9%94%99%E5%8D%B4%E6%9C%89%E7%BA%A2%E7%BA%BF%E6%8A%A5%E7%BA%A2%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3.assets/image-20221016140735772.png" alt="image-20221016140735772"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Python原生爬虫</title>
    <url>/2022/09/03/Python%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h1 id="爬虫前奏"><a href="#爬虫前奏" class="headerlink" title="爬虫前奏"></a>爬虫前奏</h1><p>明确目的：爬取虎牙直播LOL板块主播人气排行</p>
<p>找到数据对应的网页</p>
<p>分析网页的结构找到数据所在的标签位置</p>
<p>模拟HTTP请求，向服务器发送这个请求，获取到服务器返回给我们的HTML</p>
<p>用正则表达式提取我们要的数据（名字，人气）</p>
<span id="more"></span>

<h1 id="初始化获取html的类和方法"><a href="#初始化获取html的类和方法" class="headerlink" title="初始化获取html的类和方法"></a>初始化获取html的类和方法</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入获取html的库</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Spider</span>():</span><br><span class="line">    url = <span class="string">&#x27;https://www.huya.com/g/lol&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 私有方法，获取网页的内容</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__fetch_content</span>(<span class="params">self</span>):</span><br><span class="line">        r = request.urlopen(Spider.url)</span><br><span class="line">        htmls = r.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Spider的入口方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">go</span>(<span class="params">self</span>):</span><br><span class="line">        self.__fetch_content()</span><br><span class="line"></span><br><span class="line">spider = Spider()</span><br><span class="line">spider.go()</span><br></pre></td></tr></table></figure>

<h1 id="vscode断点调试"><a href="#vscode断点调试" class="headerlink" title="vscode断点调试"></a>vscode断点调试</h1><p>如果Python和Pylance插件版本太高，断点可能会停不下来。</p>
<p>解决方案，Python退回到2020.9月版本，Pylance退回到2020.9.5版本</p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>启动调试：F5</p>
<p>单步调试：F10</p>
<p>从一个断点跳到下一个断点：F5</p>
<p>进入某个函数或者对象的内部：F11</p>
<h1 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h1><p>将字节码转换为字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入获取html的库</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Spider</span>():</span><br><span class="line">    url = <span class="string">&#x27;https://www.huya.com/g/lol&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 私有方法，获取网页的内容</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__fetch_content</span>(<span class="params">self</span>):</span><br><span class="line">        r = request.urlopen(Spider.url)</span><br><span class="line">        <span class="comment"># bytes</span></span><br><span class="line">        htmls = r.read()</span><br><span class="line">        <span class="comment"># 将字节码转换为字符串</span></span><br><span class="line">        htmls = <span class="built_in">str</span>(htmls, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="comment"># 断点</span></span><br><span class="line">        a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Spider的入口方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">go</span>(<span class="params">self</span>):</span><br><span class="line">        self.__fetch_content()</span><br><span class="line"></span><br><span class="line">spider = Spider()</span><br><span class="line">spider.go()</span><br></pre></td></tr></table></figure>

<h1 id="分析爬到的内容"><a href="#分析爬到的内容" class="headerlink" title="分析爬到的内容"></a>分析爬到的内容</h1><h2 id="寻找合适的定位标签"><a href="#寻找合适的定位标签" class="headerlink" title="寻找合适的定位标签"></a>寻找合适的定位标签</h2><p>找离需要爬取的数据最近的一个标签，并且标签要具有唯一性</p>
<p>标签最好是选择能够闭合的标签(父级标签)</p>
<p>逐级精确定位，三层结构：</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Python%E7%88%AC%E8%99%AB.assets/image-20220904115855637.png" alt="image-20220904115855637"></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Python%E7%88%AC%E8%99%AB.assets/image-20220904115030241.png" alt="image-20220904115030241"></p>
<h2 id="编写正则表达式"><a href="#编写正则表达式" class="headerlink" title="编写正则表达式"></a>编写正则表达式</h2><h3 id="根正则表达式"><a href="#根正则表达式" class="headerlink" title="根正则表达式"></a>根正则表达式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">root_pattern = <span class="string">&#x27;&lt;li class=&quot;game-live-item&quot; data-gid=([\s\S]*?)&lt;/li&gt;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>分析成功：</p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Python%E7%88%AC%E8%99%AB.assets/image-20220904121104213.png" alt="image-20220904121104213" style="zoom: 67%;" />

<h3 id="姓名和人数的正则表达式"><a href="#姓名和人数的正则表达式" class="headerlink" title="姓名和人数的正则表达式"></a>姓名和人数的正则表达式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name_pattern = <span class="string">&#x27;&lt;i class=&quot;nick&quot; title=&quot;([\s\S]*?)&quot;&gt;&#x27;</span></span><br><span class="line">number_pattern = <span class="string">&#x27;&lt;i class=&quot;js-num&quot;&gt;([\s\S]*?)&lt;/i&gt;&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 导入获取html的库</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Spider</span>():</span><br><span class="line">    url = <span class="string">&#x27;https://www.huya.com/g/lol&#x27;</span></span><br><span class="line">    <span class="comment"># 根正则表达式</span></span><br><span class="line">    root_pattern = <span class="string">&#x27;&lt;li class=&quot;game-live-item&quot; data-gid=([\s\S]*?)&lt;/li&gt;&#x27;</span></span><br><span class="line">    name_pattern = <span class="string">&#x27;&lt;i class=&quot;nick&quot; title=&quot;([\s\S]*?)&quot;&gt;&#x27;</span></span><br><span class="line">    number_pattern = <span class="string">&#x27;&lt;i class=&quot;js-num&quot;&gt;([\s\S]*?)&lt;/i&gt;&#x27;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 私有方法，获取网页的内容</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__fetch_content</span>(<span class="params">self</span>):</span><br><span class="line">        r = request.urlopen(Spider.url)</span><br><span class="line">        <span class="comment"># bytes</span></span><br><span class="line">        htmls = r.read()</span><br><span class="line">        <span class="comment"># 将字节码转换为字符串</span></span><br><span class="line">        htmls = <span class="built_in">str</span>(htmls, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> htmls</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分析函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__analysis</span>(<span class="params">self, htmls</span>):</span><br><span class="line">        <span class="comment"># 匹配根正则</span></span><br><span class="line">        root_html = re.findall(Spider.root_pattern, htmls)</span><br><span class="line">        anchors = []</span><br><span class="line">        <span class="comment"># 循环匹配姓名和人气</span></span><br><span class="line">        <span class="keyword">for</span> html <span class="keyword">in</span> root_html:</span><br><span class="line">            name = re.findall(Spider.name_pattern, html)</span><br><span class="line">            number = re.findall(Spider.number_pattern, html)</span><br><span class="line">            anchor = &#123;<span class="string">&#x27;name&#x27;</span>:name, <span class="string">&#x27;number&#x27;</span>:number&#125;</span><br><span class="line">            <span class="comment"># 将组合成的字典，加入列表中</span></span><br><span class="line">            anchors.append(anchor)</span><br><span class="line">        <span class="built_in">print</span>(anchors)</span><br><span class="line">        <span class="comment"># 断点</span></span><br><span class="line">        a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Spider的入口方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">go</span>(<span class="params">self</span>):</span><br><span class="line">        htmls = self.__fetch_content()</span><br><span class="line">        self.__analysis(htmls)</span><br><span class="line"></span><br><span class="line">spider = Spider()</span><br><span class="line">spider.go()</span><br></pre></td></tr></table></figure>

<h1 id="数据精炼"><a href="#数据精炼" class="headerlink" title="数据精炼"></a>数据精炼</h1><p>strip() 方法用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 导入获取html的库</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Spider</span>():</span><br><span class="line">    url = <span class="string">&#x27;https://www.huya.com/g/lol&#x27;</span></span><br><span class="line">    <span class="comment"># 根正则表达式</span></span><br><span class="line">    root_pattern = <span class="string">&#x27;&lt;li class=&quot;game-live-item&quot; data-gid=([\s\S]*?)&lt;/li&gt;&#x27;</span></span><br><span class="line">    name_pattern = <span class="string">&#x27;&lt;i class=&quot;nick&quot; title=&quot;([\s\S]*?)&quot;&gt;&#x27;</span></span><br><span class="line">    number_pattern = <span class="string">&#x27;&lt;i class=&quot;js-num&quot;&gt;([\s\S]*?)&lt;/i&gt;&#x27;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 私有方法，获取网页的内容</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__fetch_content</span>(<span class="params">self</span>):</span><br><span class="line">        r = request.urlopen(Spider.url)</span><br><span class="line">        <span class="comment"># bytes</span></span><br><span class="line">        htmls = r.read()</span><br><span class="line">        <span class="comment"># 将字节码转换为字符串</span></span><br><span class="line">        htmls = <span class="built_in">str</span>(htmls, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> htmls</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分析函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__analysis</span>(<span class="params">self, htmls</span>):</span><br><span class="line">        <span class="comment"># 匹配根正则</span></span><br><span class="line">        root_html = re.findall(Spider.root_pattern, htmls)</span><br><span class="line">        anchors = []</span><br><span class="line">        <span class="comment"># 循环匹配姓名和人气</span></span><br><span class="line">        <span class="keyword">for</span> html <span class="keyword">in</span> root_html:</span><br><span class="line">            name = re.findall(Spider.name_pattern, html)</span><br><span class="line">            number = re.findall(Spider.number_pattern, html)</span><br><span class="line">            anchor = &#123;<span class="string">&#x27;name&#x27;</span>:name, <span class="string">&#x27;number&#x27;</span>:number&#125;</span><br><span class="line">            <span class="comment"># 将组合成的字典，加入列表中</span></span><br><span class="line">            anchors.append(anchor)</span><br><span class="line">        <span class="keyword">return</span> anchors</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据精炼</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__refine</span>(<span class="params">self, anchors</span>):</span><br><span class="line">        <span class="comment">#  strip() 方法用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列</span></span><br><span class="line">        l = <span class="keyword">lambda</span> anchor: &#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>:anchor[<span class="string">&#x27;name&#x27;</span>][<span class="number">0</span>].strip(),</span><br><span class="line">            <span class="string">&#x27;number&#x27;</span>:anchor[<span class="string">&#x27;number&#x27;</span>][<span class="number">0</span>].strip()</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment"># map(函数, 集合)，map会把集合里面的所有元素都传入函数，然后返回一个map对象，里面保存了结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">map</span>(l, anchors)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Spider的入口方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">go</span>(<span class="params">self</span>):</span><br><span class="line">        htmls = self.__fetch_content()</span><br><span class="line">        anchors = self.__analysis(htmls)</span><br><span class="line">        anchors = <span class="built_in">list</span>(self.__refine(anchors))</span><br><span class="line">        <span class="built_in">print</span>(anchors)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spider = Spider()</span><br><span class="line">spider.go()</span><br></pre></td></tr></table></figure>

<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>排序函数：</p>
<p>sorted(集合, key&#x3D;排序的种子, 升序还是降序)</p>
<p>sorted(anchors, key&#x3D;self.__sort_seed, reverse&#x3D;True)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> read, readlink</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 导入获取html的库</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Spider</span>():</span><br><span class="line">    url = <span class="string">&#x27;https://www.huya.com/g/lol&#x27;</span></span><br><span class="line">    <span class="comment"># 根正则表达式</span></span><br><span class="line">    root_pattern = <span class="string">&#x27;&lt;li class=&quot;game-live-item&quot; data-gid=([\s\S]*?)&lt;/li&gt;&#x27;</span></span><br><span class="line">    name_pattern = <span class="string">&#x27;&lt;i class=&quot;nick&quot; title=&quot;([\s\S]*?)&quot;&gt;&#x27;</span></span><br><span class="line">    number_pattern = <span class="string">&#x27;&lt;i class=&quot;js-num&quot;&gt;([\s\S]*?)&lt;/i&gt;&#x27;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 私有方法，获取网页的内容</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__fetch_content</span>(<span class="params">self</span>):</span><br><span class="line">        r = request.urlopen(Spider.url)</span><br><span class="line">        <span class="comment"># bytes</span></span><br><span class="line">        htmls = r.read()</span><br><span class="line">        <span class="comment"># 将字节码转换为字符串</span></span><br><span class="line">        htmls = <span class="built_in">str</span>(htmls, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> htmls</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分析函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__analysis</span>(<span class="params">self, htmls</span>):</span><br><span class="line">        <span class="comment"># 匹配根正则</span></span><br><span class="line">        root_html = re.findall(Spider.root_pattern, htmls)</span><br><span class="line">        anchors = []</span><br><span class="line">        <span class="comment"># 循环匹配姓名和人气</span></span><br><span class="line">        <span class="keyword">for</span> html <span class="keyword">in</span> root_html:</span><br><span class="line">            name = re.findall(Spider.name_pattern, html)</span><br><span class="line">            number = re.findall(Spider.number_pattern, html)</span><br><span class="line">            anchor = &#123;<span class="string">&#x27;name&#x27;</span>:name, <span class="string">&#x27;number&#x27;</span>:number&#125;</span><br><span class="line">            <span class="comment"># 将组合成的字典，加入列表中</span></span><br><span class="line">            anchors.append(anchor)</span><br><span class="line">        <span class="keyword">return</span> anchors</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据精炼</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__refine</span>(<span class="params">self, anchors</span>):</span><br><span class="line">        <span class="comment">#  strip() 方法用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列</span></span><br><span class="line">        l = <span class="keyword">lambda</span> anchor: &#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>:anchor[<span class="string">&#x27;name&#x27;</span>][<span class="number">0</span>].strip(),</span><br><span class="line">            <span class="string">&#x27;number&#x27;</span>:anchor[<span class="string">&#x27;number&#x27;</span>][<span class="number">0</span>].strip()</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment"># map(函数, 集合)，map会把集合里面的所有元素都传入函数，然后返回一个map对象，里面保存了结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">map</span>(l, anchors)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 排序</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__sort</span>(<span class="params">self, anchors</span>):</span><br><span class="line">        anchors = <span class="built_in">sorted</span>(anchors, key=self.__sort_seed, reverse=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> anchors</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 比较大小的种子</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__sort_seed</span>(<span class="params">self, anchor</span>):</span><br><span class="line">        r = re.findall(<span class="string">&#x27;\d*&#x27;</span>, anchor[<span class="string">&#x27;number&#x27;</span>])</span><br><span class="line">        r = r[<span class="number">0</span>] + <span class="string">&#x27;.&#x27;</span> + r[<span class="number">2</span>]</span><br><span class="line">        number = <span class="built_in">float</span>(r)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;万&#x27;</span> <span class="keyword">in</span> anchor[<span class="string">&#x27;number&#x27;</span>]:</span><br><span class="line">            number *= <span class="number">10000</span></span><br><span class="line">        <span class="keyword">return</span> number</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印结果</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__show</span>(<span class="params">self, anchors</span>):</span><br><span class="line">        <span class="keyword">for</span> rank <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(anchors)):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;rank: &#x27;</span> + <span class="built_in">str</span>(rank + <span class="number">1</span>)</span><br><span class="line">            + <span class="string">&#x27; | name: &#x27;</span> + anchors[rank][<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">            + <span class="string">&#x27; | number: &#x27;</span> + anchors[rank][<span class="string">&#x27;number&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Spider的入口方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">go</span>(<span class="params">self</span>):</span><br><span class="line">        htmls = self.__fetch_content()</span><br><span class="line">        anchors = self.__analysis(htmls)</span><br><span class="line">        anchors = <span class="built_in">list</span>(self.__refine(anchors))</span><br><span class="line">        anchors = self.__sort(anchors)</span><br><span class="line">        self.__show(anchors)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spider = Spider()</span><br><span class="line">spider.go()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>重学C++</title>
    <url>/2022/08/24/%E9%87%8D%E5%AD%A6c++/</url>
    <content><![CDATA[<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220824153813162.png" alt="image-20220824153813162"></p>
<span id="more"></span>

<h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><p>编译型语言一般需要经历编译和链接的过程，才能变成真正可执行的程序</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220824122009971.png" alt="image-20220824122009971"></p>
<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220824161837695.png" alt="image-20220824161837695" style="zoom: 50%;" />

<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220824162003345.png" alt="image-20220824162003345"></p>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220824162858481.png" alt="image-20220824162858481" style="zoom:50%;" />

<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220824163545302.png" alt="image-20220824163545302" style="zoom:50%;" />

<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220824163806810.png" alt="image-20220824163806810" style="zoom:50%;" />

<h2 id="杂项运算符"><a href="#杂项运算符" class="headerlink" title="杂项运算符"></a>杂项运算符</h2><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825093620043.png" alt="image-20220825093620043"></p>
<h2 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h2><p>一般的家用电脑是小端法</p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825103115632.png" alt="image-20220825103115632" style="zoom:50%;" />

<h2 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h2><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826000930719.png" alt="image-20220826000930719" style="zoom:50%;" />

<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825104706156.png" alt="image-20220825104706156" style="zoom: 50%;" />

<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825105134310.png" alt="image-20220825105134310" style="zoom:50%;" />

<h2 id="右移运算"><a href="#右移运算" class="headerlink" title="右移运算"></a>右移运算</h2><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825105607497.png" alt="image-20220825105607497" style="zoom: 50%;" />

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825110308159.png" alt="image-20220825110308159" style="zoom:50%;" />

<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825114332076.png" alt="image-20220825114332076" style="zoom:50%;" />

<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825115134169.png" alt="image-20220825115134169" style="zoom:50%;" />

<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825121529205.png" alt="image-20220825121529205" style="zoom:50%;" />

<h3 id="字符串的指针表示方法"><a href="#字符串的指针表示方法" class="headerlink" title="字符串的指针表示方法"></a>字符串的指针表示方法</h3><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825154539870.png" alt="image-20220825154539870" style="zoom:50%;" />

<h3 id="字符串常见操作"><a href="#字符串常见操作" class="headerlink" title="字符串常见操作"></a>字符串常见操作</h3><ul>
<li><p>strlen()求字符串有效长度，不包括’\0’</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> a[] = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">strlen</span>(a) &lt;&lt; endl; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>sizeof()求字符串占用空间，包括’\0’</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> a[] = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(a) &lt;&lt; endl; <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>strcmp(s1, s2)比较s1和s2的大小，逐个字符按照ASCII码比较</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> a[] = <span class="string">&quot;A&quot;</span>;</span><br><span class="line"><span class="type">char</span> b[] = <span class="string">&quot;B&quot;</span>;</span><br><span class="line"><span class="type">char</span> c[] = <span class="string">&quot;B&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">strcmp</span>(a, b) &lt;&lt; endl; <span class="comment">// -1</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">strcmp</span>(b, a) &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">strcmp</span>(b, c) &lt;&lt; endl; <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>strcpy(s1, s2)复制字符串s2到s1</p>
</li>
<li><p>strncpy(s1, s2, n)指定字符串长度复制</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> a[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">char</span> b[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> c[] = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(a, b);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl; <span class="comment">// hello</span></span><br><span class="line"><span class="built_in">strcpy</span>(a, b);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl; <span class="comment">// hello</span></span><br><span class="line"><span class="built_in">strncpy</span>(a, c, <span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl; <span class="comment">// wello</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>strcat(s1, s2)字符串拼接，将s2接到s1后面</p>
</li>
<li><p>strchr(s1, ch)指向字符串s1中ch第一次出现的<strong>位置</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> a[] = <span class="string">&quot;A&quot;</span>;</span><br><span class="line"><span class="type">char</span> b[] = <span class="string">&quot;ABC&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">strchr</span>(b, <span class="string">&#x27;B&#x27;</span>) &lt;&lt; endl; <span class="comment">// BC</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>strstr(s1, s2)指向字符串s1中字符串s2第一次出现的<strong>位置</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> a[] = <span class="string">&quot;A&quot;</span>;</span><br><span class="line"><span class="type">char</span> b[] = <span class="string">&quot;ABC&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">strstr</span>(b, a) &lt;&lt; endl; <span class="comment">// ABC</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>安全版避免缓冲区溢出</strong></p>
<ul>
<li>strcpy_s()是安全版strcpy()</li>
<li>strcat_s()是安全版strcat</li>
<li>strnlen_s()</li>
<li>strncpy_s()</li>
</ul>
<h3 id="常见bug"><a href="#常见bug" class="headerlink" title="常见bug"></a>常见bug</h3><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825212728685.png" alt="image-20220825212728685" style="zoom:50%;" />

<h2 id="新型字符串string"><a href="#新型字符串string" class="headerlink" title="新型字符串string"></a>新型字符串string</h2><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825213209639.png" alt="image-20220825213209639" style="zoom:50%;" />

<h3 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h3><p>获取字符串长度：</p>
<ul>
<li>s.lenth()</li>
<li>s.size()</li>
<li>s.capacity()默认容量是15</li>
</ul>
<p>string转换为字符数组</p>
<ul>
<li><p>s.c_str()</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string s = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">string s1 = <span class="string">&quot;456&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *c = s.<span class="built_in">c_str</span>();</span><br><span class="line">cout &lt;&lt; c &lt;&lt; endl;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="指针-x2F-引用"><a href="#指针-x2F-引用" class="headerlink" title="指针&#x2F;引用"></a>指针&#x2F;引用</h1><p><strong>指针就使用-&gt;，对象就使用.运算符</strong></p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825215432922.png" alt="image-20220825215432922" style="zoom: 50%;" />

<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825215650435.png" alt="image-20220825215650435" style="zoom: 50%;" />

<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825220002315.png" alt="image-20220825220002315" style="zoom:50%;" />

<h2 id="指针的定义和间接访问"><a href="#指针的定义和间接访问" class="headerlink" title="指针的定义和间接访问"></a>指针的定义和间接访问</h2><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825220142143.png" alt="image-20220825220142143" style="zoom:50%;" />

<h2 id="数组与指针"><a href="#数组与指针" class="headerlink" title="数组与指针"></a>数组与指针</h2><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825231011088.png" alt="image-20220825231011088"></p>
<h2 id="左值与右值"><a href="#左值与右值" class="headerlink" title="左值与右值"></a>左值与右值</h2><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825231310410.png" alt="image-20220825231310410"></p>
<h2 id="几种原始指针"><a href="#几种原始指针" class="headerlink" title="几种原始指针"></a>几种原始指针</h2><h3 id="数组指针和指针数组"><a href="#数组指针和指针数组" class="headerlink" title="数组指针和指针数组"></a>数组指针和指针数组</h3><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825231749493.png" alt="image-20220825231749493"></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825232909168.png" alt="image-20220825232909168"></p>
<h3 id="const与指针"><a href="#const与指针" class="headerlink" title="const与指针"></a>const与指针</h3><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825233558775.png" alt="image-20220825233558775"></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825233715154.png" alt="image-20220825233715154"></p>
<h3 id="指向指针的指针"><a href="#指向指针的指针" class="headerlink" title="指向指针的指针"></a>指向指针的指针</h3><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825221450933.png" alt="image-20220825221450933"></p>
<h3 id="未初始化和非法指针"><a href="#未初始化和非法指针" class="headerlink" title="未初始化和非法指针"></a>未初始化和非法指针</h3><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825235546562.png" alt="image-20220825235546562"></p>
<h3 id="NULL指针"><a href="#NULL指针" class="headerlink" title="NULL指针"></a>NULL指针</h3><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826000040121.png" alt="image-20220826000040121"></p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826000413458.png" alt="image-20220826000413458" style="zoom:50%;" />

<h3 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h3><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826001609481.png" alt="image-20220826001609481"></p>
<h2 id="原始指针的基本运算"><a href="#原始指针的基本运算" class="headerlink" title="原始指针的基本运算"></a>原始指针的基本运算</h2><p>指针默认是一个16字节的整型数，例如 char* 就是一个16字节的整型数，int* 也是</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825224612569.png" alt="image-20220825224612569"></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825225538394.png" alt="image-20220825225538394"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> b = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="type">char</span>* c = &amp;b;</span><br><span class="line">*c = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">cout &lt;&lt; *c &lt;&lt; endl; <span class="comment">// b</span></span><br></pre></td></tr></table></figure>

<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220825230133351.png" alt="image-20220825230133351" style="zoom: 67%;" />

<h3 id="指针-–的汇编"><a href="#指针-–的汇编" class="headerlink" title="指针++,–的汇编"></a>指针++,–的汇编</h3><p>eax和ecx是寄存器</p>
<p>以char* cp2 &#x3D; ++cp; 为例子</p>
<p><strong>汇编的意思是：</strong></p>
<p>将cp指针的值，放到eax寄存器里面</p>
<p>将eax寄存器里面的值+1</p>
<p>将eax的值存回cp</p>
<p>将cp的值存到ecx寄存器</p>
<p>将ecx寄存器的值存到cp2中</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826094806925.png" alt="image-20220826094806925"></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826100023755.png" alt="image-20220826100023755"></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826104227139.png" alt="image-20220826104227139"></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826105243146.png" alt="image-20220826105243146"></p>
<h3 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h3><p>打断点，f5运行的时候，右击鼠标，可以转到反汇编</p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826105605437.png" alt="image-20220826105605437" style="zoom:50%;" />

<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826105731965.png" alt="image-20220826105731965" style="zoom: 80%;" />

<h2 id="c-存储区域划分"><a href="#c-存储区域划分" class="headerlink" title="c++存储区域划分"></a>c++存储区域划分</h2><p>每行代码在内存环境中的具体位置 </p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826120701422.png" alt="image-20220826120701422" style="zoom: 67%;" />

<ul>
<li>栈中的空间是从大地址往小地址分配的，先定义的变量，地址越大</li>
</ul>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826121441014.png" alt="image-20220826121441014"></p>
<ul>
<li>堆中空间是从小往大分配的</li>
<li>字符串在常量区，变量在栈区，常量区的信息是不能改变的</li>
</ul>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826141531839.png" alt="image-20220826141531839"></p>
<h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826142121286.png" alt="image-20220826142121286" style="zoom: 50%;" />

<h3 id="RAII"><a href="#RAII" class="headerlink" title="RAII"></a>RAII</h3><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826142943441.png" alt="image-20220826142943441"></p>
<h3 id="堆对比栈"><a href="#堆对比栈" class="headerlink" title="堆对比栈"></a>堆对比栈</h3><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826143256868.png" alt="image-20220826143256868"></p>
<h3 id="静态存储区对比常量存储区"><a href="#静态存储区对比常量存储区" class="headerlink" title="静态存储区对比常量存储区"></a>静态存储区对比常量存储区</h3><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826144333457.png" alt="image-20220826144333457"></p>
<h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826144708447.png" alt="image-20220826144708447"></p>
<h2 id="比指针更安全的解决方案"><a href="#比指针更安全的解决方案" class="headerlink" title="比指针更安全的解决方案"></a>比指针更安全的解决方案</h2><h3 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h3><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826150050781.png" alt="image-20220826150050781" style="zoom:50%;" />

<h4 id="auto-ptr"><a href="#auto-ptr" class="headerlink" title="auto_ptr"></a>auto_ptr</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">auto_ptr&lt;<span class="type">int</span>&gt; <span class="title">pl</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>(<span class="number">10</span>))</span></span>;</span><br><span class="line">cout &lt;&lt; *pl &lt;&lt; endl; <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826150344061.png" alt="image-20220826150344061" style="zoom:50%;" />

<h4 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h4><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826154933195.png" alt="image-20220826154933195"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// unique_ptr，make_unique会返回unique_ptr的指针</span></span><br><span class="line">	<span class="keyword">auto</span> w = std::<span class="built_in">make_unique</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// w.get()返回的是w这个智能指针中对应的指向堆中开辟了10这个内存块的指针</span></span><br><span class="line">	cout &lt;&lt; *(w.<span class="built_in">get</span>()) &lt;&lt; endl; <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 编译错误如果想要把w复制给w2，是不可以的</span></span><br><span class="line">	<span class="comment">// auto w2 = w;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// unique_ptr只支持移动语义，w2获得内存所有权，w此时等于nullptr</span></span><br><span class="line">	<span class="keyword">auto</span> w2 = std::<span class="built_in">move</span>(w);</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (w.<span class="built_in">get</span>() != <span class="literal">nullptr</span> ? *(w.<span class="built_in">get</span>()) : <span class="number">-1</span>) &lt;&lt; endl; <span class="comment">// -1</span></span><br><span class="line">	cout &lt;&lt; (w2.<span class="built_in">get</span>() != <span class="literal">nullptr</span> ? *(w2.<span class="built_in">get</span>()) : <span class="number">-1</span>) &lt;&lt; endl; <span class="comment">// 10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// i 变量在栈空间中，出了这个局部&#123; &#125;，i指针就失效了</span></span><br><span class="line"><span class="comment">// 那么new出来的对象，在堆当中，会不会失效呢？也会</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> i = <span class="built_in">unique_ptr</span>&lt;<span class="type">int</span>&gt;(<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h4><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826164654895.png" alt="image-20220826164654895" style="zoom:50%;" />

<p><strong>引用计数可能的bug：</strong>循环引用会导致堆里的内存无法正常回收，造成内存泄漏</p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826164830679.png" alt="image-20220826164830679" style="zoom:50%;" />

<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826214031279.png" alt="image-20220826214031279" style="zoom:50%;" />

<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826214331987.png" alt="image-20220826214331987" style="zoom:50%;" />

<h4 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h4><p>weak_ptr被设计为与shared_ptr共同工作，用一种观察者模式工作</p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826165041268.png" alt="image-20220826165041268" style="zoom:50%;" />

<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826215620582.png" alt="image-20220826215620582" style="zoom: 33%;" />

<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826220041563.png" alt="image-20220826220041563" style="zoom: 33%;" />

<h4 id="断言assert"><a href="#断言assert" class="headerlink" title="断言assert"></a>断言assert</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">头文件</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">assert</span>() <span class="comment">// 如果程序运行到assert的时候，括号中的条件不为真，程序就会出错</span></span><br></pre></td></tr></table></figure>

<h2 id="有了指针为什么还需要引用"><a href="#有了指针为什么还需要引用" class="headerlink" title="有了指针为什么还需要引用"></a>有了指针为什么还需要引用</h2><p>Bjarne Stroustrup的解释：为了支持函数运算符重载</p>
<h2 id="有了引用为什么还需要指针"><a href="#有了引用为什么还需要指针" class="headerlink" title="有了引用为什么还需要指针"></a>有了引用为什么还需要指针</h2><p>Bjarne Stroustrup的解释：为了兼容C语言</p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220826222100954.png" alt="image-20220826222100954" style="zoom:50%;" />

<h1 id="基础句法"><a href="#基础句法" class="headerlink" title="基础句法"></a>基础句法</h1><h2 id="switch与if"><a href="#switch与if" class="headerlink" title="switch与if"></a>switch与if</h2><p>从汇编代码来看，多分支的switch的效率会比if更高一些</p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220828102525742.png" alt="image-20220828102525742" style="zoom:50%;" />

<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>声明的时候，没有实际的空间存储它</p>
<p>但是当定义wT weekday;的时候，就会分配实际的空间存储它了</p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220828104451763.png" alt="image-20220828104451763" style="zoom:50%;" />

<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220828105531532.png" alt="image-20220828105531532" style="zoom:50%;" />

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	<span class="keyword">enum</span> <span class="title class_">wT</span> &#123; Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday &#125;; <span class="comment">// 声明wT类型</span></span><br><span class="line">	wT weekday;</span><br><span class="line">	weekday = Monday;</span><br><span class="line">	weekday = Tuesday;</span><br><span class="line">	<span class="comment">// weekday = 0; 不能直接给int值，只能赋值成wT定义好的类型值</span></span><br><span class="line">	cout &lt;&lt; weekday &lt;&lt; endl;</span><br><span class="line">	<span class="comment">// Monday = 0;             // 类型值不能做左值</span></span><br><span class="line">	<span class="type">int</span> a = Wednesday;</span><br><span class="line">	cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结构体与联合体"><a href="#结构体与联合体" class="headerlink" title="结构体与联合体"></a>结构体与联合体</h2><h3 id="结构体的数据对齐问题"><a href="#结构体的数据对齐问题" class="headerlink" title="结构体的数据对齐问题"></a>结构体的数据对齐问题</h3><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220828110657649.png" alt="image-20220828110657649" style="zoom:33%;" />

<h3 id="结构体的内存布局"><a href="#结构体的内存布局" class="headerlink" title="结构体的内存布局"></a>结构体的内存布局</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	<span class="comment">// 联合体，共同取同一个空间，也就是double的空间8</span></span><br><span class="line">	<span class="keyword">union</span> <span class="title class_">Score</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">double</span> ds;</span><br><span class="line">		<span class="type">char</span> level;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="comment">// 结构体</span></span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">Student</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">char</span> name[<span class="number">6</span>];</span><br><span class="line">		<span class="type">int</span> age;</span><br><span class="line">		Score s;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="built_in">sizeof</span>(Score) &lt;&lt; endl; <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line">	Student s1;</span><br><span class="line">	<span class="built_in">strcpy_s</span>(s1.name, <span class="string">&quot;lili&quot;</span>);</span><br><span class="line">	s1.age = <span class="number">16</span>;</span><br><span class="line">	s1.s.ds = <span class="number">95.5</span>;</span><br><span class="line">	s1.s.level = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="built_in">sizeof</span>(Student) &lt;&lt; endl; <span class="comment">// 24</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结构体的内存一定是其中最大的元素的整数倍</p>
<p>内存布局不是紧密的</p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220828111303214.png" alt="image-20220828111303214" style="zoom: 33%;" />

<ul>
<li><strong>头文件上加#pragma pack(1)可以让内存分配紧密相连</strong></li>
</ul>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220828112422468.png" alt="image-20220828112422468" style="zoom: 33%;" />

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数名和参数列表一起构成了函数签名</p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220828154128651.png" alt="image-20220828154128651" style="zoom: 33%;" />

<p>例如：<code>int(*p)(int, int);</code>，这行代码定义了一个可以指向返回值为整型且有两个整型形参函数的指针变量p，符合返回值为整型且有两个整型形参的函数都可以将其地址（即其函数名）赋给p。</p>
<p>在使用指向函数的指针变量时，只需要将函数名赋给指向函数的指针变量即可，因为<strong>函数名就是该函数的入口地址</strong>。</p>
<p>由于指向函数的指针变量保存了函数的地址，则该指针变量就指向了对应的函数。例如，求最大值的函数命名为<code>max</code>，如果将其函数名赋给指向函数的指针变量<code>p</code>（即<code>p = max</code>）后，则<code>p</code>就指向了<code>max</code>函数，并且可以通过<code>(*p)(a, b);</code>的方式来调用<code>max</code>函数，因为指针变量<code>p</code>保存了<code>max</code>函数的地址，那么<code>*p</code>就是<code>max</code>。需要注意的是，其中<code>*p</code>前的<code>*</code>可以省略，故也可以写成<code>p(a, b);</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">MaxValue</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (x &gt; y) ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">MinValue</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (x &lt; y) ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ProcessNum</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span>(*p)(<span class="type">int</span> a, <span class="type">int</span> b))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">p</span>(x, y) &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x = <span class="number">10</span>, y = <span class="number">20</span>;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">ProcessNum</span>(x, y, MaxValue) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">ProcessNum</span>(x, y, MinValue) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">ProcessNum</span>(x, y, Add) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220828154453079.png" alt="image-20220828154453079" style="zoom:50%;" />

<p>声明函数：在stdafx.h中</p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220828154819249.png" alt="image-20220828154819249" style="zoom: 67%;" />

<p>定义函数：在stdafx.cpp中</p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220828154846618.png" alt="image-20220828154846618" style="zoom:67%;" />

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">int</span>(*p)(<span class="type">int</span>);</span><br><span class="line">	p = test; <span class="comment">// 也可以定义的时候直接 int(*p)(int) = test;</span></span><br><span class="line">	<span class="type">int</span> result = (*p)(<span class="number">1</span>); <span class="comment">// 这里*可以省略 p(1)</span></span><br><span class="line">	cout &lt;&lt; result &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	result = quickzhao::<span class="built_in">test</span>(<span class="number">1</span>);</span><br><span class="line">	cout &lt;&lt; result &lt;&lt; endl; <span class="comment">// 2</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h2><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220828162853232.png" alt="image-20220828162853232" style="zoom: 33%;" />

<p>先用vs设置一下：</p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220828163152588.png" alt="image-20220828163152588" style="zoom: 67%;" />

<p>但是编译器有可能不会用内联</p>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220828165152140.png" alt="image-20220828165152140" style="zoom: 33%;" />

<h1 id="面向对象-实现Complex"><a href="#面向对象-实现Complex" class="headerlink" title="面向对象(实现Complex)"></a>面向对象(实现Complex)</h1><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220828173107169.png" alt="image-20220828173107169" style="zoom:33%;" />

<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220905144429268.png" alt="image-20220905144429268" style="zoom:50%;" />

<p>新建一个类：</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220828181941426.png" alt="image-20220828181941426"></p>
<h2 id="构造函数与析构函数"><a href="#构造函数与析构函数" class="headerlink" title="构造函数与析构函数"></a>构造函数与析构函数</h2><p><strong>ConsoleApplication1项目为完整代码</strong></p>
<p><strong>下面是以Complex复数为例，实现运算操作：</strong></p>
<p><strong>函数的声明在Complex.h文件中，实现在Complex.cpp文件中</strong></p>
<p>默认构造函数：如果没有自己指定有参构造，系统则会自动创建默认构造函数</p>
<p>有参构造函数：如果自定义了有参构造，那么就需要显示的写出默认构造函数</p>
<p><strong>声明：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Complex</span>(); <span class="comment">// 默认构造函数</span></span><br><span class="line">	<span class="built_in">Complex</span>(<span class="type">double</span> r, <span class="type">double</span> i); <span class="comment">// 构造函数</span></span><br><span class="line">	<span class="keyword">virtual</span> ~<span class="built_in">Complex</span>(); <span class="comment">// 析构函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实现：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Complex::<span class="built_in">Complex</span>()</span><br><span class="line">&#123;</span><br><span class="line">	_real = <span class="number">0.0</span>;</span><br><span class="line">	_image = <span class="number">0.0</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Complex::Complex()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Complex::<span class="built_in">Complex</span>(<span class="type">double</span> r, <span class="type">double</span> i)</span><br><span class="line">&#123;	</span><br><span class="line">	_real = r;</span><br><span class="line">	_image = i;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Complex::Complex(double r, double i)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Complex::~<span class="built_in">Complex</span>()</span><br><span class="line">&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Complex::~Complex()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><p><strong>一种重载 “+“ 的写法：</strong></p>
<p>拷贝构造与临时对象</p>
<p>声明：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运算符重载</span></span><br><span class="line">Complex <span class="keyword">operator</span>+ (<span class="type">const</span> Complex&amp; x);</span><br><span class="line"><span class="comment">// 拷贝构造的写法</span></span><br><span class="line"><span class="built_in">Complex</span>(<span class="type">const</span> Complex&amp; x); </span><br></pre></td></tr></table></figure>

<p>实现：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重载 + 运算符</span></span><br><span class="line">Complex Complex::<span class="keyword">operator</span>+ (<span class="type">const</span> Complex&amp; x) </span><br><span class="line">&#123;</span><br><span class="line">	Complex tmp; <span class="comment">// tmp是一个在栈上面的临时对象</span></span><br><span class="line">	tmp._real = _real + x._real;</span><br><span class="line">	tmp._image = _image + x._image;</span><br><span class="line">	<span class="keyword">return</span> tmp; <span class="comment">// c++在这里会触发一个拷贝构造，传回的不是栈中的tmp对象，而是tmp的副本对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝构造的实现</span></span><br><span class="line">Complex::<span class="built_in">Complex</span>(<span class="type">const</span> Complex&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">	_real = x._real;</span><br><span class="line">	_image = x._image;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Complex::Complex(const Complex&amp; x)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>另一种重载 “+“ 的写法：</strong></p>
<p>尽量避开临时变量和拷贝构造</p>
<p>声明：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运算符重载</span></span><br><span class="line">Complex <span class="keyword">operator</span>+ (<span class="type">const</span> Complex&amp; x);</span><br></pre></td></tr></table></figure>

<p>实现：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重载 + 运算符</span></span><br><span class="line">Complex Complex::<span class="keyword">operator</span>+ (<span class="type">const</span> Complex&amp; x) </span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Complex</span>(_real + x._real, _image + x._image); <span class="comment">// 这样可以避开临时变量和拷贝构造</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>重载 ”&#x3D;“ 的写法：</strong></p>
<p>声明：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Complex&amp; <span class="keyword">operator</span>= (<span class="type">const</span> Complex&amp; x);</span><br></pre></td></tr></table></figure>

<p>实现：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重载 = 运算符</span></span><br><span class="line">Complex&amp; Complex::<span class="keyword">operator</span>= (<span class="type">const</span> Complex&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">	_real = x._real;</span><br><span class="line">	_image = x._image;</span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="临时对象与拷贝构造"><a href="#临时对象与拷贝构造" class="headerlink" title="临时对象与拷贝构造"></a>临时对象与拷贝构造</h2><p>栈上面的临时对象，返回的时候会触发一个拷贝构造，传回的不是栈中的对象，而是副本对象</p>
<p>返回的时候应该尽量避免临时对象的产生</p>
<h2 id="前置后置-与–"><a href="#前置后置-与–" class="headerlink" title="前置后置++与–"></a>前置后置++与–</h2><p>前置++：先将变量自增，然后将值返回</p>
<p>后置++：先将值返回，然后将变量自增</p>
<p>声明：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前置和后置++</span></span><br><span class="line">Complex&amp; <span class="keyword">operator</span>++ (); <span class="comment">// 前置++</span></span><br><span class="line">Complex <span class="keyword">operator</span>++ (<span class="type">int</span>); <span class="comment">// 后置++</span></span><br></pre></td></tr></table></figure>

<p>实现：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前置++</span></span><br><span class="line">Complex&amp; Complex::<span class="keyword">operator</span>++ ()</span><br><span class="line">&#123;</span><br><span class="line">	_real++;</span><br><span class="line">	_image++;</span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后置++</span></span><br><span class="line">Complex Complex::<span class="keyword">operator</span>++ (<span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 以对象本身作为参数，进行拷贝构造，构造出一个副本</span></span><br><span class="line">	<span class="comment">//Complex tmp(*this);</span></span><br><span class="line">	<span class="comment">//_real++;</span></span><br><span class="line">	<span class="comment">//_image++;</span></span><br><span class="line">	<span class="comment">// tmp是改变之前的对象，将tmp返回回去了，而此时this已经自增了，tmp的值等于没有自增之前的this的值</span></span><br><span class="line">	<span class="comment">//return tmp;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优化：避免拷贝构造</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后置++</span></span><br><span class="line">Complex Complex::<span class="keyword">operator</span>++ (<span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 以对象本身作为参数，进行拷贝构造，构造出一个副本</span></span><br><span class="line">	<span class="comment">//Complex tmp(*this);</span></span><br><span class="line">	<span class="comment">//_real++;</span></span><br><span class="line">	<span class="comment">//_image++;</span></span><br><span class="line">	<span class="comment">// tmp是改变之前的对象，将tmp返回回去了，而此时this已经自增了，tmp的值等于没有自增之前的this的值</span></span><br><span class="line">	<span class="comment">//return tmp;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 不让临时变量产生，避免拷贝构造</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Complex</span>(_real++, _image++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="标准输入输出IO重载"><a href="#标准输入输出IO重载" class="headerlink" title="标准输入输出IO重载"></a>标准输入输出IO重载</h2><p>friend关键字可以让大括号之外也能访问private的变量</p>
<p>声明：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重载cout运算符</span></span><br><span class="line"><span class="comment">// friend关键字可以让大括号之外也能访问private的变量</span></span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> Complex&amp; x);</span><br><span class="line"><span class="comment">// 重载cin运算符</span></span><br><span class="line"><span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, Complex&amp; x);</span><br></pre></td></tr></table></figure>

<p>实现：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重载cout运算符</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> Complex&amp; x) &#123;</span><br><span class="line">	os &lt;&lt; <span class="string">&quot;real value is &quot;</span> &lt;&lt; x._real &lt;&lt; <span class="string">&quot; image value is &quot;</span> &lt;&lt; x._image;</span><br><span class="line">	<span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载cin运算符</span></span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, Complex&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">	is &gt;&gt; x._real &gt;&gt; x._image;</span><br><span class="line">	<span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="目前为止完整代码"><a href="#目前为止完整代码" class="headerlink" title="目前为止完整代码"></a>目前为止完整代码</h2><p><strong>Complex.h：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Complex</span>(); <span class="comment">// 默认构造函数</span></span><br><span class="line">	<span class="built_in">Complex</span>(<span class="type">double</span> r, <span class="type">double</span> i); <span class="comment">// 构造函数</span></span><br><span class="line">	<span class="keyword">virtual</span> ~<span class="built_in">Complex</span>(); <span class="comment">// 析构函数</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">Complex</span>(<span class="type">const</span> Complex&amp; x); <span class="comment">// 拷贝构造的写法</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">getReal</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> _real; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">setReal</span><span class="params">(<span class="type">double</span> d)</span> </span>&#123; _real = d; &#125;</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">getImage</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> _image; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">setImage</span><span class="params">(<span class="type">double</span> i)</span> </span>&#123; _image = i; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 运算符重载</span></span><br><span class="line">	Complex <span class="keyword">operator</span>+ (<span class="type">const</span> Complex&amp; x);</span><br><span class="line">	Complex&amp; <span class="keyword">operator</span>= (<span class="type">const</span> Complex&amp; x);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 前置和后置++</span></span><br><span class="line">	Complex&amp; <span class="keyword">operator</span>++ (); <span class="comment">// 前置++</span></span><br><span class="line">	Complex <span class="keyword">operator</span>++ (<span class="type">int</span>); <span class="comment">// 后置++</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 重载cout运算符</span></span><br><span class="line">	<span class="comment">// friend关键字可以让大括号之外也能访问private的变量</span></span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> Complex&amp; x);</span><br><span class="line">	<span class="comment">// 重载cin运算符</span></span><br><span class="line">	<span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, Complex&amp; x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">double</span> _real; <span class="comment">// 复数的实部</span></span><br><span class="line">	<span class="type">double</span> _image; <span class="comment">// 复数的虚部</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>Complex.cpp：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Complex.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Complex::<span class="built_in">Complex</span>()</span><br><span class="line">&#123;</span><br><span class="line">	_real = <span class="number">0.0</span>;</span><br><span class="line">	_image = <span class="number">0.0</span>;</span><br><span class="line">	<span class="comment">// cout &lt;&lt; &quot;Complex::Complex()&quot; &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Complex::<span class="built_in">Complex</span>(<span class="type">double</span> r, <span class="type">double</span> i)</span><br><span class="line">&#123;	</span><br><span class="line">	_real = r;</span><br><span class="line">	_image = i;</span><br><span class="line">	<span class="comment">// cout &lt;&lt; &quot;Complex::Complex(double r, double i)&quot; &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Complex::~<span class="built_in">Complex</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// cout &lt;&lt; &quot;Complex::~Complex()&quot; &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载 + 运算符</span></span><br><span class="line">Complex Complex::<span class="keyword">operator</span>+ (<span class="type">const</span> Complex&amp; x) </span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// Complex tmp; // tmp是一个在栈上面的临时对象</span></span><br><span class="line">	<span class="comment">// tmp._real = _real + x._real;</span></span><br><span class="line">	<span class="comment">// tmp._image = _image + x._image;</span></span><br><span class="line">	<span class="comment">// return tmp; // c++在这里会触发一个拷贝构造，传回的不是栈中的tmp对象，而是tmp的副本对象</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Complex</span>(_real + x._real, _image + x._image); <span class="comment">// 这样可以避开临时变量和拷贝构造</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载 = 运算符</span></span><br><span class="line">Complex&amp; Complex::<span class="keyword">operator</span>= (<span class="type">const</span> Complex&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">	_real = x._real;</span><br><span class="line">	_image = x._image;</span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝构造的实现</span></span><br><span class="line">Complex::<span class="built_in">Complex</span>(<span class="type">const</span> Complex&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">	_real = x._real;</span><br><span class="line">	_image = x._image;</span><br><span class="line">	<span class="comment">// cout &lt;&lt; &quot;Complex::Complex(const Complex&amp; x)&quot; &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前置++</span></span><br><span class="line">Complex&amp; Complex::<span class="keyword">operator</span>++ ()</span><br><span class="line">&#123;</span><br><span class="line">	_real++;</span><br><span class="line">	_image++;</span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后置++</span></span><br><span class="line">Complex Complex::<span class="keyword">operator</span>++ (<span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 以对象本身作为参数，进行拷贝构造，构造出一个副本</span></span><br><span class="line">	<span class="comment">// Complex tmp(*this);</span></span><br><span class="line">	<span class="comment">// _real++;</span></span><br><span class="line">	<span class="comment">// _image++;</span></span><br><span class="line">	<span class="comment">// tmp是改变之前的对象，将tmp返回回去了，而此时this已经自增了，tmp的值等于没有自增之前的this的值</span></span><br><span class="line">	<span class="comment">// return tmp;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 不让临时变量产生，避免拷贝构造</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Complex</span>(_real++, _image++);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载cout运算符</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> Complex&amp; x) &#123;</span><br><span class="line">	os &lt;&lt; <span class="string">&quot;real value is &quot;</span> &lt;&lt; x._real &lt;&lt; <span class="string">&quot; image value is &quot;</span> &lt;&lt; x._image;</span><br><span class="line">	<span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载cin运算符</span></span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, Complex&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">	is &gt;&gt; x._real &gt;&gt; x._image;</span><br><span class="line">	<span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ConsoleApplication1.cpp：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ConsoleApplication1.cpp : 定义控制台应用程序的入口点。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Complex.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Complex <span class="title">a</span><span class="params">(<span class="number">3.0</span>, <span class="number">2.0</span>)</span></span>;</span><br><span class="line">	<span class="function">Complex <span class="title">b</span><span class="params">(<span class="number">2.0</span>, <span class="number">3.0</span>)</span></span>;</span><br><span class="line">	Complex c = a + b;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 用对象构造对象，也会触发拷贝构造</span></span><br><span class="line">	<span class="function">Complex <span class="title">d</span><span class="params">(c)</span></span>;</span><br><span class="line">	Complex e;</span><br><span class="line"></span><br><span class="line">	e = d++;</span><br><span class="line">	cout &lt;&lt; e &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">	e = ++d;</span><br><span class="line">	cout &lt;&lt; e &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; d &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cin &gt;&gt; e;</span><br><span class="line">	cout &lt;&lt; e &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重载-x3D"><a href="#重载-x3D" class="headerlink" title="重载+&#x3D;"></a>重载+&#x3D;</h2><p>声明：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Complex&amp; <span class="keyword">operator</span>+= (<span class="type">const</span> Complex&amp; x);</span><br></pre></td></tr></table></figure>

<p>定义：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Complex&amp; Complex::<span class="keyword">operator</span>+= (<span class="type">const</span> Complex&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">	_real += x._real;</span><br><span class="line">	_image += x._image;</span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重载-x3D-x3D"><a href="#重载-x3D-x3D" class="headerlink" title="重载&#x3D;&#x3D;"></a>重载&#x3D;&#x3D;</h2><p>声明：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Complex&amp; x);</span><br></pre></td></tr></table></figure>

<p>定义：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> Complex::<span class="keyword">operator</span>==(<span class="type">const</span> Complex&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">return</span> (_real == x._real &amp;&amp; _image == x._image);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重载-x3D-1"><a href="#重载-x3D-1" class="headerlink" title="重载!&#x3D;"></a>重载!&#x3D;</h2><p>声明：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> Complex&amp; x);</span><br></pre></td></tr></table></figure>

<p>定义：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> Complex::<span class="keyword">operator</span>!=(<span class="type">const</span> Complex&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> !(_real == x._real &amp;&amp; _image == x._image);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h2><h3 id="Complex-h"><a href="#Complex-h" class="headerlink" title="Complex.h"></a>Complex.h</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Complex</span>(); <span class="comment">// 默认构造函数</span></span><br><span class="line">	<span class="built_in">Complex</span>(<span class="type">double</span> r, <span class="type">double</span> i); <span class="comment">// 构造函数</span></span><br><span class="line">	<span class="keyword">virtual</span> ~<span class="built_in">Complex</span>(); <span class="comment">// 析构函数</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">Complex</span>(<span class="type">const</span> Complex&amp; x); <span class="comment">// 拷贝构造的写法</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">getReal</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> _real; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">setReal</span><span class="params">(<span class="type">double</span> d)</span> </span>&#123; _real = d; &#125;</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">getImage</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> _image; &#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">setImage</span><span class="params">(<span class="type">double</span> i)</span> </span>&#123; _image = i; &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 运算符重载</span></span><br><span class="line">	Complex <span class="keyword">operator</span>+ (<span class="type">const</span> Complex&amp; x) <span class="type">const</span>;</span><br><span class="line">	Complex&amp; <span class="keyword">operator</span>= (<span class="type">const</span> Complex&amp; x);</span><br><span class="line">	Complex&amp; <span class="keyword">operator</span>+= (<span class="type">const</span> Complex&amp; x);</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Complex&amp; x);</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> Complex&amp; x);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 前置和后置++</span></span><br><span class="line">	Complex&amp; <span class="keyword">operator</span>++ (); <span class="comment">// 前置++</span></span><br><span class="line">	Complex <span class="keyword">operator</span>++ (<span class="type">int</span>); <span class="comment">// 后置++</span></span><br><span class="line"></span><br><span class="line">							  <span class="comment">// 重载cout运算符</span></span><br><span class="line">							  <span class="comment">// friend关键字可以让大括号之外也能访问private的变量</span></span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> Complex&amp; x);</span><br><span class="line">	<span class="comment">// 重载cin运算符</span></span><br><span class="line">	<span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, Complex&amp; x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">double</span> _real; <span class="comment">// 复数的实部</span></span><br><span class="line">	<span class="type">double</span> _image; <span class="comment">// 复数的虚部</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Complex-cpp"><a href="#Complex-cpp" class="headerlink" title="Complex.cpp"></a>Complex.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Complex.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Complex::<span class="built_in">Complex</span>()</span><br><span class="line">&#123;</span><br><span class="line">	_real = <span class="number">0.0</span>;</span><br><span class="line">	_image = <span class="number">0.0</span>;</span><br><span class="line">	<span class="comment">// cout &lt;&lt; &quot;Complex::Complex()&quot; &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Complex::<span class="built_in">Complex</span>(<span class="type">double</span> r, <span class="type">double</span> i)</span><br><span class="line">&#123;</span><br><span class="line">	_real = r;</span><br><span class="line">	_image = i;</span><br><span class="line">	<span class="comment">// cout &lt;&lt; &quot;Complex::Complex(double r, double i)&quot; &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Complex::~<span class="built_in">Complex</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// cout &lt;&lt; &quot;Complex::~Complex()&quot; &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载 + 运算符</span></span><br><span class="line">Complex Complex::<span class="keyword">operator</span>+ (<span class="type">const</span> Complex&amp; x) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// Complex tmp; // tmp是一个在栈上面的临时对象</span></span><br><span class="line">	<span class="comment">// tmp._real = _real + x._real;</span></span><br><span class="line">	<span class="comment">// tmp._image = _image + x._image;</span></span><br><span class="line">	<span class="comment">// return tmp; // c++在这里会触发一个拷贝构造，传回的不是栈中的tmp对象，而是tmp的副本对象</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Complex</span>(_real + x._real, _image + x._image); <span class="comment">// 这样可以避开临时变量和拷贝构造</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载 = 运算符</span></span><br><span class="line">Complex&amp; Complex::<span class="keyword">operator</span>= (<span class="type">const</span> Complex&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">	_real = x._real;</span><br><span class="line">	_image = x._image;</span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载+=</span></span><br><span class="line">Complex&amp; Complex::<span class="keyword">operator</span>+= (<span class="type">const</span> Complex&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">	_real += x._real;</span><br><span class="line">	_image += x._image;</span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载==</span></span><br><span class="line"><span class="type">bool</span> Complex::<span class="keyword">operator</span>==(<span class="type">const</span> Complex&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">return</span> (_real == x._real &amp;&amp; _image == x._image);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载!=</span></span><br><span class="line"><span class="type">bool</span> Complex::<span class="keyword">operator</span>!=(<span class="type">const</span> Complex&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> !(_real == x._real &amp;&amp; _image == x._image);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝构造的实现</span></span><br><span class="line">Complex::<span class="built_in">Complex</span>(<span class="type">const</span> Complex&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">	_real = x._real;</span><br><span class="line">	_image = x._image;</span><br><span class="line">	<span class="comment">// cout &lt;&lt; &quot;Complex::Complex(const Complex&amp; x)&quot; &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前置++</span></span><br><span class="line">Complex&amp; Complex::<span class="keyword">operator</span>++ ()</span><br><span class="line">&#123;</span><br><span class="line">	_real++;</span><br><span class="line">	_image++;</span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后置++</span></span><br><span class="line">Complex Complex::<span class="keyword">operator</span>++ (<span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 以对象本身作为参数，进行拷贝构造，构造出一个副本</span></span><br><span class="line">	<span class="comment">// Complex tmp(*this);</span></span><br><span class="line">	<span class="comment">// _real++;</span></span><br><span class="line">	<span class="comment">// _image++;</span></span><br><span class="line">	<span class="comment">// tmp是改变之前的对象，将tmp返回回去了，而此时this已经自增了，tmp的值等于没有自增之前的this的值</span></span><br><span class="line">	<span class="comment">// return tmp;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 不让临时变量产生，避免拷贝构造</span></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Complex</span>(_real++, _image++);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载cout运算符</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> Complex&amp; x) &#123;</span><br><span class="line">	os &lt;&lt; <span class="string">&quot;real value is &quot;</span> &lt;&lt; x._real &lt;&lt; <span class="string">&quot; image value is &quot;</span> &lt;&lt; x._image;</span><br><span class="line">	<span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载cin运算符</span></span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, Complex&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">	is &gt;&gt; x._real &gt;&gt; x._image;</span><br><span class="line">	<span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ConsoleApplication1-cpp"><a href="#ConsoleApplication1-cpp" class="headerlink" title="ConsoleApplication1.cpp"></a>ConsoleApplication1.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ConsoleApplication1.cpp : 定义控制台应用程序的入口点。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Complex.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Complex <span class="title">a</span><span class="params">(<span class="number">3.0</span>, <span class="number">2.0</span>)</span></span>;</span><br><span class="line">	<span class="function">Complex <span class="title">b</span><span class="params">(<span class="number">2.0</span>, <span class="number">3.0</span>)</span></span>;</span><br><span class="line">	Complex c = a + b;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 用对象构造对象，也会触发拷贝构造</span></span><br><span class="line">	<span class="function">Complex <span class="title">d</span><span class="params">(c)</span></span>;</span><br><span class="line">	Complex e;</span><br><span class="line"></span><br><span class="line">	e = d++;</span><br><span class="line">	cout &lt;&lt; e &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; d &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	e = ++d;</span><br><span class="line">	cout &lt;&lt; e &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; (e == d) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; (e != a) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cin &gt;&gt; e;</span><br><span class="line">	cout &lt;&lt; e &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	e += a;</span><br><span class="line">	cout &lt;&lt; e &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220830233543295.png" alt="image-20220830233543295" style="zoom: 50%;" />

<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220830233734489.png" alt="image-20220830233734489" style="zoom:50%;" />

<h2 id="IO缓存区"><a href="#IO缓存区" class="headerlink" title="IO缓存区"></a>IO缓存区</h2><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220830235122171.png" alt="image-20220830235122171" style="zoom: 33%;" />

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">清空缓存区中的脏数据cin.<span class="built_in">ignore</span>(要清空缓存区的字节数，以什么符号结尾)</span><br><span class="line">numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>()为缓存区的最大范围</span><br><span class="line">cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; a)</span><br><span class="line">	&#123;	</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;the numbers are: &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">		index++;</span><br><span class="line">		<span class="keyword">if</span> (index == <span class="number">5</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 清空缓存区中的脏数据cin.ignore(要清空缓存区的字节数，以什么符号结尾)</span></span><br><span class="line">	<span class="comment">// numeric_limits&lt;std::streamsize&gt;::max()为缓存区的最大范围</span></span><br><span class="line">	cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	cin &gt;&gt; ch;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;the last char is: &quot;</span> &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220905100309842.png" alt="image-20220905100309842"></p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220905100755559.png" alt="image-20220905100755559" style="zoom:50%;" />

<h3 id="文件打开方式"><a href="#文件打开方式" class="headerlink" title="文件打开方式"></a>文件打开方式</h3><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220905101927314.png" alt="image-20220905101927314" style="zoom: 50%;" />

<h3 id="以默认-覆盖-的方式打开"><a href="#以默认-覆盖-的方式打开" class="headerlink" title="以默认(覆盖)的方式打开"></a>以默认(覆盖)的方式打开</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打开文件流，以默认(覆盖)的方式打开</span></span><br><span class="line">fout.<span class="built_in">open</span>(<span class="string">&quot;testBuffer.txt&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>open()方法，默认是以ios::in和ios::out的方式打开</p>
<p>如果文件不存在，不会自动帮我们创建一个文件</p>
<p>写入不是一种追加的方式，而是会覆盖原有内容</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// demo0.cpp : 定义控制台应用程序的入口点。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建文件流</span></span><br><span class="line">	fstream fout;</span><br><span class="line">	<span class="comment">// 打开文件流，以默认(覆盖)的方式打开</span></span><br><span class="line">	fout.<span class="built_in">open</span>(<span class="string">&quot;testBuffer.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 检测文件是否打开失败，如果文件不存在，就会打开失败，输出&quot;open file failed&quot;</span></span><br><span class="line">	<span class="keyword">if</span> (fout.<span class="built_in">fail</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;open file failed&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; a)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 写入文件流</span></span><br><span class="line">		fout &lt;&lt; <span class="string">&quot;The numbers are: &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">		index++;</span><br><span class="line">		<span class="keyword">if</span> (index == <span class="number">5</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	cin &gt;&gt; ch;</span><br><span class="line">	<span class="comment">// 写入文件流</span></span><br><span class="line">	fout &lt;&lt; <span class="string">&quot;The last char is: &quot;</span> &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 关闭文件流</span></span><br><span class="line">	fout.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="检测文件是否打开失败"><a href="#检测文件是否打开失败" class="headerlink" title="检测文件是否打开失败"></a>检测文件是否打开失败</h3><p>直接看是否打开失败：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检测文件是否打开失败，如果文件不存在，就会打开失败，输出&quot;open file failed&quot;</span></span><br><span class="line"><span class="keyword">if</span> (fout.<span class="built_in">fail</span>())</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;open file failed&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以看文件流对象是否存在：如果文件不存在，也会打开失败</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!fout)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;open file failed&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="以追加的方式打开"><a href="#以追加的方式打开" class="headerlink" title="以追加的方式打开"></a>以追加的方式打开</h3><p>在文件的尾部添加数据</p>
<p>如果文件不存在，会自动创建一个文件</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打开文件流，以追加的方式打开</span></span><br><span class="line">fout.<span class="built_in">open</span>(<span class="string">&quot;testBuffer.txt&quot;</span>, ios::app);</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// demo0.cpp : 定义控制台应用程序的入口点。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建文件流</span></span><br><span class="line">	fstream fout;</span><br><span class="line">	<span class="comment">// 打开文件流，以追加的方式打开</span></span><br><span class="line">	fout.<span class="built_in">open</span>(<span class="string">&quot;testBuffer.txt&quot;</span>, ios::app);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!fout)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;open file failed&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; a)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 写入文件流</span></span><br><span class="line">		fout &lt;&lt; <span class="string">&quot;The numbers are: &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">		index++;</span><br><span class="line">		<span class="keyword">if</span> (index == <span class="number">5</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	cin &gt;&gt; ch;</span><br><span class="line">	<span class="comment">// 写入文件流</span></span><br><span class="line">	fout &lt;&lt; <span class="string">&quot;The last char is: &quot;</span> &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 关闭文件流</span></span><br><span class="line">	fout.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="操作二进制文件"><a href="#操作二进制文件" class="headerlink" title="操作二进制文件"></a>操作二进制文件</h3><p>以拷贝一个MP3文件为例</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// demo0.cpp : 定义控制台应用程序的入口点。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> bufferLen = <span class="number">2048</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src为原文件名，dst为目标文件名</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CopyFile</span><span class="params">(<span class="type">const</span> string&amp; src, <span class="type">const</span> string&amp; dst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 打开源文件和目标文件</span></span><br><span class="line">	<span class="comment">// 源文件以二进制读的方式打开</span></span><br><span class="line">	<span class="function">ifstream <span class="title">in</span><span class="params">(src.c_str(), ios::in | ios::binary)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 目标文件以二进制写的方式打开，以覆盖的方式写</span></span><br><span class="line">	<span class="function">ofstream <span class="title">out</span><span class="params">(dst.c_str(), ios::out | ios::binary | ios::trunc)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 判断文件打开是否成功</span></span><br><span class="line">	<span class="keyword">if</span> (!in || !out)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// temp是缓存，最大2048字节</span></span><br><span class="line">	<span class="type">char</span> temp[bufferLen];</span><br><span class="line">	<span class="comment">// 从源文件中读取数据，写到目标文件中</span></span><br><span class="line">	<span class="comment">// 通过读取源文件的EOF来判断读写是否结束</span></span><br><span class="line">	<span class="keyword">while</span> (!in.<span class="built_in">eof</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// read(把文件读到哪里， 每一次最多读取多少字节)</span></span><br><span class="line">		in.<span class="built_in">read</span>(temp, bufferLen);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 从最后一次读取中，得到实际获取的数量</span></span><br><span class="line">		streamsize count = in.<span class="built_in">gcount</span>();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// write(写入的内容，写入的长度)</span></span><br><span class="line">		out.<span class="built_in">write</span>(temp, count);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 关闭源文件和目标文件</span></span><br><span class="line">	in.<span class="built_in">close</span>();</span><br><span class="line">	out.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">CopyFile</span>(<span class="string">&quot;testcopyfile.mp3&quot;</span>, <span class="string">&quot;testcopyfile2.mp3&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>操作结果：成功</strong></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220905143305413.png" alt="image-20220905143305413"></p>
<h1 id="头文件重复包含的问题"><a href="#头文件重复包含的问题" class="headerlink" title="头文件重复包含的问题"></a>头文件重复包含的问题</h1><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220905150807613.png" alt="image-20220905150807613" style="zoom:50%;" />

<p><strong>头文件可以全部放到stdafx.h文件中，防止头文件太乱：</strong></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220905152058090.png" alt="image-20220905152058090"></p>
<h1 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h1><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220905155657717.png" alt="image-20220905155657717"></p>
<h2 id="设计String"><a href="#设计String" class="headerlink" title="设计String"></a>设计String</h2><p>设计String，实现拷贝构造和赋值运算符为深拷贝；并且设计String的移动构造函数和移动赋值运算符，使其满足移动语义</p>
<h3 id="stdafx-h"><a href="#stdafx-h" class="headerlink" title="stdafx.h"></a>stdafx.h</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;targetver.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>  在此处引用程序需要的其他头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;String.h&quot;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="String-h"><a href="#String-h" class="headerlink" title="String.h"></a>String.h</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span> *str = <span class="literal">NULL</span>); <span class="comment">// 普通构造函数</span></span><br><span class="line">	<span class="built_in">String</span>(<span class="type">const</span> String &amp;other); <span class="comment">// 拷贝构造函数</span></span><br><span class="line">	<span class="built_in">String</span>(String&amp;&amp; other); <span class="comment">// 移动构造函数</span></span><br><span class="line">	~<span class="built_in">String</span>(<span class="type">void</span>); <span class="comment">// 析构函数</span></span><br><span class="line">	String&amp; <span class="keyword">operator</span>= (<span class="type">const</span> String&amp; other); <span class="comment">// 赋值函数</span></span><br><span class="line">	String&amp; <span class="keyword">operator</span>=(String&amp;&amp; rhs)<span class="keyword">noexcept</span>; <span class="comment">// 移动赋值运算符</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> String &amp;c); <span class="comment">// cout输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">char</span> *m_data; <span class="comment">// 用于保存字符串</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="String-cpp"><a href="#String-cpp" class="headerlink" title="String.cpp"></a>String.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String 的普通构造函数</span></span><br><span class="line">String::<span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span> *str)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (str == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (m_data != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			*m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">		m_data = <span class="keyword">new</span> <span class="type">char</span>[len + <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (m_data != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">strcpy</span>(m_data, str);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝构造函数</span></span><br><span class="line">String::<span class="built_in">String</span>(<span class="type">const</span> String &amp;other)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">strlen</span>(other.m_data);</span><br><span class="line">	m_data = <span class="keyword">new</span> <span class="type">char</span>[len + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span> (m_data != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(m_data, other.m_data);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动构造函数</span></span><br><span class="line">String::<span class="built_in">String</span>(String&amp;&amp; other)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (other.m_data != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 资源让渡</span></span><br><span class="line">		m_data = other.m_data;</span><br><span class="line">		other.m_data = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值函数</span></span><br><span class="line">String&amp; String::<span class="keyword">operator</span>= (<span class="type">const</span> String &amp;other)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span> == &amp;other)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 释放原有的内容</span></span><br><span class="line">	<span class="keyword">delete</span>[] m_data;</span><br><span class="line">	<span class="comment">// 重新分配资源并赋值</span></span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">strlen</span>(other.m_data);</span><br><span class="line">	m_data = <span class="keyword">new</span> <span class="type">char</span>[len + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span> (m_data != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">strcpy</span>(m_data, other.m_data);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动赋值运算符</span></span><br><span class="line">String&amp; String::<span class="keyword">operator</span>=(String&amp;&amp; rhs)<span class="keyword">noexcept</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span> != &amp;rhs)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">delete</span>[] m_data;</span><br><span class="line">		m_data = rhs.m_data;</span><br><span class="line">		rhs.m_data = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// String 的析构函数</span></span><br><span class="line">String::~<span class="built_in">String</span>(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (m_data != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">delete</span>[] m_data;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> String &amp;c)</span><br><span class="line">&#123;</span><br><span class="line">	os &lt;&lt; c.m_data;</span><br><span class="line">	<span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="demo-cpp"><a href="#demo-cpp" class="headerlink" title="demo.cpp"></a>demo.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">String <span class="title">s1</span><span class="params">(<span class="string">&quot;Hello&quot;</span>)</span></span>; <span class="comment">// 构造函数</span></span><br><span class="line">	cout &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//String s2 = s1; // 调用拷贝构造函数</span></span><br><span class="line">	<span class="function">String <span class="title">s2</span><span class="params">(s1)</span></span>; <span class="comment">// 调用拷贝构造函数</span></span><br><span class="line">	cout &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line">	<span class="function">String <span class="title">s2A</span><span class="params">(std::move(s1))</span></span>; <span class="comment">// 移动构造函数</span></span><br><span class="line">	cout &lt;&lt; s2A &lt;&lt; endl;</span><br><span class="line">	String s3; <span class="comment">// 无参构造函数</span></span><br><span class="line">	cout &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">	s3 = s2; <span class="comment">// 调用赋值函数</span></span><br><span class="line">	cout &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">	String s3A; <span class="comment">// 无参构造函数</span></span><br><span class="line">	s3A = std::<span class="built_in">move</span>(s2A); <span class="comment">// 移动赋值运算符</span></span><br><span class="line">	cout &lt;&lt; s3A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="移动语义"><a href="#移动语义" class="headerlink" title="移动语义"></a>移动语义</h2><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E9%87%8D%E5%AD%A6c%2B%2B.assets/image-20220905164608492.png" alt="image-20220905164608492" style="zoom: 50%;" />

<p>移动语义：设计在String的移动构造函数和移动赋值运算符中</p>
<h1 id="面向对象-继承与多态"><a href="#面向对象-继承与多态" class="headerlink" title="面向对象(继承与多态)"></a>面向对象(继承与多态)</h1><p>子类方法和父类实现不一样，则要在父类的这个方法上加上vitual</p>
<h2 id="子类的对象里面保存了什么？"><a href="#子类的对象里面保存了什么？" class="headerlink" title="子类的对象里面保存了什么？"></a>子类的对象里面保存了什么？</h2><p>子类的对象里面保存了什么？</p>
<ol>
<li>自己的变量</li>
<li>父类的变量</li>
<li>还有一个指向虚表的指针(4个字节)，虚表里面包含了父类虚函数的地址</li>
</ol>
<p><strong>注意：对象模型中，不保存一般的函数地址，只保留成员变量的信息和虚函数的虚表</strong></p>
<h2 id="this指针底层原理"><a href="#this指针底层原理" class="headerlink" title="this指针底层原理"></a>this指针底层原理</h2><p>一般函数能够引用到成员变量的变量信息和虚函数的信息，是因为一般函数能找到对象的地址</p>
<p>一般函数是通过this指针找到的对象地址，this指针指向对象本身</p>
<p>this指针很多时候就是通过ecx这个寄存器进行传递的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// demo1.cpp : 定义控制台应用程序的入口点。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">// 子类方法和父类实现不一样，则要在父类的这个方法上加上vitual</span></span><br><span class="line">	<span class="comment">// 常规实现</span></span><br><span class="line">	<span class="comment">// virtual double Area() const &#123; return 0; &#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 可以不实现，给他一个虚的实现，= 0的意思是这个类不可以有实体的对象，因为这个类是一个虚类</span></span><br><span class="line">	<span class="comment">// 当看到virtual并且函数的方法等于0的时候，说明这个类是抽象类</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">Area</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="built_in">Area</span>() &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span>:<span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">// 构造函数中，这也是一种成员变量的赋值方法，使用成员变量的参数列表来初始化</span></span><br><span class="line">	<span class="built_in">Square</span>(<span class="type">double</span> len):_len(len)&#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">Area</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> _len * _len;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">double</span> _len;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>:<span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Circle</span>(<span class="type">double</span> radius):_radius(radius)&#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">Area</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">3.1415926</span> * _radius * _radius;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">double</span> _radius;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span> :<span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Triangle</span>(<span class="type">double</span> len, <span class="type">double</span> height):_len(len), _height(height)&#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">Area</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0.5</span> * _len * _height;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">double</span> _len;</span><br><span class="line">	<span class="type">double</span> _height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Square <span class="title">s1</span><span class="params">(<span class="number">2.0</span>)</span></span>;</span><br><span class="line">	<span class="function">Circle <span class="title">c1</span><span class="params">(<span class="number">2.0</span>)</span></span>;</span><br><span class="line">	<span class="function">Triangle <span class="title">t1</span><span class="params">(<span class="number">2.0</span>, <span class="number">3.0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	Shape* shapes[<span class="number">3</span>];</span><br><span class="line">	shapes[<span class="number">0</span>] = &amp;s1;</span><br><span class="line">	shapes[<span class="number">1</span>] = &amp;c1;</span><br><span class="line">	shapes[<span class="number">2</span>] = &amp;t1;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> index = <span class="number">0</span>; index &lt; <span class="number">3</span>; index++)</span><br><span class="line">	&#123;</span><br><span class="line">		shapes[index]-&gt;<span class="built_in">Display</span>();</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C-编程思想"><a href="#C-编程思想" class="headerlink" title="C++编程思想"></a>C++编程思想</h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>实现思路：</p>
<p>Singleton拥有一个私有构造函数，确保用户无法通过new直接实例它</p>
<p>包含一个静态私有成员变量instance与静态公有方法instance()</p>
<h3 id="Singleton-h"><a href="#Singleton-h" class="headerlink" title="Singleton.h"></a>Singleton.h</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">const</span> Singleton* <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">DoSomething</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Do Something&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 构造和析构函数私有化，防止外部访问</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">Singleton</span>();</span><br><span class="line">	~<span class="built_in">Singleton</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 可见范围是私有的，在类的内部可见</span></span><br><span class="line">	<span class="comment">// 但是static静态变量的生命周期在全局区域，随着程序的产生而产生，随着程序的灭亡而灭亡</span></span><br><span class="line">	<span class="comment">// 静态变量帮助解决资源的分配和释放</span></span><br><span class="line">	<span class="type">static</span> Singleton* This;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Singleton-cpp"><a href="#Singleton-cpp" class="headerlink" title="Singleton.cpp"></a>Singleton.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Singleton.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Singleton* Singleton::This = new Singleton(); // 饿汉单例模式</span></span><br><span class="line">Singleton* Singleton::This = <span class="literal">NULL</span>; <span class="comment">// 懒汉单例模式</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> Singleton* <span class="title">Singleton::getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!This)</span><br><span class="line">	&#123;</span><br><span class="line">		This = <span class="keyword">new</span> <span class="built_in">Singleton</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> This;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Singleton::<span class="built_in">Singleton</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Singleton::~<span class="built_in">Singleton</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="demo-cpp-1"><a href="#demo-cpp-1" class="headerlink" title="demo.cpp"></a>demo.cpp</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// demo1.cpp : 定义控制台应用程序的入口点。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Singleton.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Singleton::<span class="built_in">getInstance</span>()-&gt;<span class="built_in">DoSomething</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>在观察者模式中，观察者需要直接订阅目标事件；在目标发出内容改变的事件后，直接接收事件并作出响应，对象常是一对多关系</p>
<p>常见场景：各种MVC的框架中，Model的变化通知各种类型的View时几乎都存在这种模式</p>
<p>实现思路：将问题的职责解耦合，将Observable和Observer抽象开，分清抽象和实体</p>
]]></content>
      <categories>
        <category>语言学习</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Python</title>
    <url>/2022/08/24/Python/</url>
    <content><![CDATA[<p><strong>Python能做什么？</strong></p>
<p>爬虫</p>
<p>大数据与数据分析 Spark</p>
<p>自动化运维与自动化测试</p>
<p>Web开发：Flask、Django</p>
<p>机器学习：Tensor Flow</p>
<p>胶水语言：混合其他如C++、Java等来编程。能够把用其他语言制作的各种模块（尤其是C&#x2F;C++）很轻松地联结在一起</p>
<span id="more"></span>

<h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><h2 id="查看数据类型"><a href="#查看数据类型" class="headerlink" title="查看数据类型"></a>查看数据类型</h2><p>特殊：</p>
<p>‘&#x2F;‘ 除法会自动转换为浮点数</p>
<p>‘&#x2F;&#x2F;‘ 是整除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="number">2</span>/<span class="number">2</span>) <span class="comment"># &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"><span class="built_in">type</span>(<span class="number">2</span>//<span class="number">2</span>) <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="查看ascii码"><a href="#查看ascii码" class="headerlink" title="查看ascii码"></a>查看ascii码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ord</span>()</span><br></pre></td></tr></table></figure>

<h2 id="查看变量在内存里的地址"><a href="#查看变量在内存里的地址" class="headerlink" title="查看变量在内存里的地址"></a>查看变量在内存里的地址</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">id</span>()</span><br></pre></td></tr></table></figure>

<h2 id="转字符串"><a href="#转字符串" class="headerlink" title="转字符串"></a>转字符串</h2><p>python不能字符串 + 数字，所以数字要先转成字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>()</span><br></pre></td></tr></table></figure>

<h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><p><strong>整数 int：</strong></p>
<p>bin( ) 转换为二进制</p>
<p>int( ) 转换为十进制</p>
<p>hex( ) 转换为十六进制</p>
<p>oct( ) 转换为八进制</p>
<p><strong>浮点数 float：</strong></p>
<p>默认都是双精度</p>
<p><strong>布尔类型 bool：</strong></p>
<p>只要非0即为真</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span>(<span class="number">1.1</span>)</span><br><span class="line"><span class="built_in">bool</span>(-<span class="number">1.1</span>)</span><br><span class="line"><span class="built_in">bool</span>(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"><span class="built_in">bool</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure>

<p>空值会被认为是假</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">bool</span>([])</span><br><span class="line"><span class="built_in">bool</span>(&#123;&#125;)</span><br><span class="line"><span class="built_in">bool</span>(<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p><strong>复数 complex：</strong></p>
<p>用小写字母j表示，例如 <code>a = 1 + 36j</code></p>
<h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p>序列是有序的</p>
<h3 id="字符串-str"><a href="#字符串-str" class="headerlink" title="字符串 str"></a>字符串 str</h3><p><strong>字符串定义：</strong></p>
<p>单引号，双引号：单行字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;字符串1&#x27;</span></span><br><span class="line">b = <span class="string">&quot;字符串2&quot;</span></span><br></pre></td></tr></table></figure>

<p>三引号：多行字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">多行字符串</span></span><br><span class="line"><span class="string">哈哈</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>原始字符串：</strong></p>
<p>字符串前面加一个 r ，那么它就不是一个普通字符串了，而是一个原始字符串（忽略转义）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;12\n456&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># 12</span></span><br><span class="line"><span class="comment"># 456</span></span><br><span class="line">b = <span class="string">r&#x27;12\n456&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment"># 12\n456</span></span><br></pre></td></tr></table></figure>

<p><strong>拼接字符串：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;123&quot;</span></span><br><span class="line">b = <span class="string">&quot;456&quot;</span></span><br><span class="line">c = a + b</span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># 123456</span></span><br></pre></td></tr></table></figure>

<p><strong>字符串乘法：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;123&quot;</span></span><br><span class="line">a *= <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># 123123123</span></span><br></pre></td></tr></table></figure>

<p><strong>字符串元素的访问：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;0123456789&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">5</span>]) <span class="comment"># 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [-n]代表字符串从后往前数n次，得到的字符</span></span><br><span class="line"><span class="built_in">print</span>(a[-<span class="number">1</span>]) <span class="comment"># 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取一组字符 前闭后开</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>:<span class="number">5</span>]) <span class="comment"># 01234</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>:-<span class="number">1</span>]) <span class="comment"># 012345678</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取从一个字符开始到字符串末尾的所有字符</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">3</span>:]) <span class="comment"># 3456789</span></span><br><span class="line"><span class="built_in">print</span>(a[-<span class="number">3</span>:]) <span class="comment"># 789</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取从头开始到指定字符的所有字符</span></span><br><span class="line"><span class="built_in">print</span>(a[:<span class="number">5</span>]) <span class="comment"># 01234</span></span><br><span class="line"><span class="built_in">print</span>(a[:-<span class="number">3</span>]) <span class="comment"># 0123456</span></span><br></pre></td></tr></table></figure>

<h3 id="列表-list"><a href="#列表-list" class="headerlink" title="列表 list"></a>列表 list</h3><p><strong>列表中的元素不一定要是同类型的：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;哈哈&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a)) <span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>列表中还可以嵌套列表：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="string">&quot;123&quot;</span>, <span class="number">0</span>]]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a)) <span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>列表元素的访问：</strong></p>
<p>下标访问和字符串的访问一样，可以用下标单个访问，也可以用[0 : 2]范围访问</p>
<p>用单个下标访问，得到的是元素本身的类型</p>
<p>用 : 范围访问，得到的仍然是一个列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;数字&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a[<span class="number">0</span>])) <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a[-<span class="number">1</span>])) <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a[<span class="number">0</span>:])) <span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>((a[<span class="number">0</span>:])) <span class="comment"># [1, 2, 3, &#x27;数字&#x27;]</span></span><br></pre></td></tr></table></figure>

<p><strong>列表运算：</strong></p>
<p>支持列表相加和列表乘以常数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">c = a + b;</span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># [1, 2, 3, 4, 5, 6]</span></span><br><span class="line">b *= <span class="number">3</span>;</span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># [4, 5, 6, 4, 5, 6, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<h3 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组 tuple"></a>元组 tuple</h3><p><strong>元组中的元素不一定要是同类型的：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;345&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a)) <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>下标访问和字符串的访问一样，和列表也一样，支持单个元素下标访问，也支持范围访问</p>
<p>支持元组相加</p>
<p>支持元组乘以常数</p>
<p><strong>定义只有一个元素的元组：</strong></p>
<p>编译器规定，如果只有一个元素，不会吧( )识别成元组，而是识别成数学运算的( )去计算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">b = (<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a)) <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b)) <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>定义只有一个元素的元组就在元素后面再加一个逗号即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="string">&quot;hello&quot;</span>,)</span><br><span class="line">b = (<span class="number">1</span>,)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a)) <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b)) <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>定义空的元组：直接空括号即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = ()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a)) <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="序列的共同特点"><a href="#序列的共同特点" class="headerlink" title="序列的共同特点"></a>序列的共同特点</h3><p>str，list，tuple</p>
<ul>
<li><p>序列里面的元素都会被分配一个序号</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>序列支持切片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a[<span class="number">0</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>序列可以相加，可以乘以常数</p>
</li>
<li><p>判断一个序列中是否包含某个元素：in运算符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> <span class="keyword">in</span> a) <span class="comment"># True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>判断一个序列中是否不包含某个元素：not in运算符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> <span class="keyword">not</span> <span class="keyword">in</span> a) <span class="comment"># False</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>序列内部元素个数：len()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a)) <span class="comment"># 3</span></span><br><span class="line">b = <span class="string">&quot;asd&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(b)) <span class="comment"># 3</span></span><br><span class="line">c = (<span class="number">1</span>,)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(c)) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>序列中最大的元素：max()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(c)) <span class="comment"># 9</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>序列中最小的元素：min()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="string">&quot;helloworld&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(c)) <span class="comment"># d</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="集合-set"><a href="#集合-set" class="headerlink" title="集合 set"></a>集合 set</h3><p><strong>set 是无序的，不支持下标索引，不支持切片：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"><span class="comment"># a[0]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a)) <span class="comment"># &lt;class &#x27;set&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>集合元素不重复：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>查看集合长度：</strong>len()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a)) <span class="comment"># 6</span></span><br></pre></td></tr></table></figure>

<p><strong>支持in 和 not in：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">in</span> a)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> a)</span><br></pre></td></tr></table></figure>

<p><strong>支持max 和 min：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(a))</span><br></pre></td></tr></table></figure>

<p><strong>支持求集合差集：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">b = &#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">c = a - b</span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># &#123;1, 2, 5, 6&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>支持求交集：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">b = &#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">c = a &amp; b</span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># &#123;3, 4&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>支持求并集：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">b = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>&#125;</span><br><span class="line">c = a | b</span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># &#123;1, 2, 3, 4, 5, 6, 7&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>定义一个空的集合：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">set</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a)) <span class="comment"># &lt;class &#x27;set&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a)) <span class="comment"># 0</span></span><br></pre></td></tr></table></figure>

<h3 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典 dict"></a>字典 dict</h3><p>空的字典直接 a &#x3D; {}即可</p>
<p>字典dict也是无序的</p>
<p>字典有key和value，通过key访问value</p>
<p><strong>定义方式：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;key1:value1, key2:value2....&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>:<span class="number">1</span>, <span class="number">2</span>:<span class="number">2</span>, <span class="number">3</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a)) <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>例如：一个按键对应一个技能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">&#x27;Q&#x27;</span>:<span class="string">&#x27;新月打击&#x27;</span>, <span class="string">&#x27;W&#x27;</span>:<span class="string">&#x27;苍白之瀑&#x27;</span>, <span class="string">&#x27;E&#x27;</span>:<span class="string">&#x27;月之降临&#x27;</span>, <span class="string">&#x27;R&#x27;</span>:<span class="string">&#x27;月神冲刺&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(a[<span class="string">&#x27;Q&#x27;</span>]) <span class="comment"># 新月打击</span></span><br></pre></td></tr></table></figure>

<p><strong>字典不能有重复的key</strong>：</p>
<p>后插入的会覆盖前面插入的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">&#x27;Q&#x27;</span>:<span class="string">&#x27;新月打击&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>:<span class="string">&#x27;苍白之瀑&#x27;</span>, <span class="string">&#x27;E&#x27;</span>:<span class="string">&#x27;月之降临&#x27;</span>, <span class="string">&#x27;R&#x27;</span>:<span class="string">&#x27;月神冲刺&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># &#123;&#x27;Q&#x27;: &#x27;苍白之瀑&#x27;, &#x27;E&#x27;: &#x27;月之降临&#x27;, &#x27;R&#x27;: &#x27;月神冲刺&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>value取值：</strong></p>
<p>可以取python中任意的类型</p>
<p><strong>key取值：</strong></p>
<p>必须是不可变的类型，int，str，tuple</p>
<h1 id="变量与运算符"><a href="#变量与运算符" class="headerlink" title="变量与运算符"></a>变量与运算符</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>变量类型不固定：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">a = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<p><strong>最好不要用系统的函数名当作变量名，可以是可以，但是之后再用这个函数的时候会报错：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">1</span>))</span><br><span class="line">// 报错</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;D:/computer/coding/python/demo.py&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">1</span>))</span><br><span class="line">TypeError: <span class="string">&#x27;int&#x27;</span> <span class="built_in">object</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">callable</span></span><br></pre></td></tr></table></figure>

<h3 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h3><p>int，str，tuple <strong>不可变的</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = a</span><br><span class="line">a = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<p>实验1：<strong>a + ‘python’ 以后其实变成了一个新的字符串，内存地址变了</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a)) <span class="comment"># 1779851895952</span></span><br><span class="line">a = a + <span class="string">&#x27;python&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a)) <span class="comment"># 1779852958384</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># hellopython</span></span><br></pre></td></tr></table></figure>

<p>实验2：<strong>改内部就会报错</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="string">&#x27;o&#x27;</span></span><br><span class="line">// 报错</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;D:/computer/coding/python/demo.py&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="string">&#x27;o&#x27;</span></span><br><span class="line">TypeError: <span class="string">&#x27;str&#x27;</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure>

<p>实验3：<strong>tuple内部也是不能变的</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">a[<span class="number">0</span>] = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">// 报错</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;D:/computer/coding/python/demo.py&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">TypeError: <span class="string">&#x27;tuple&#x27;</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>list，set，dict <strong>可变的</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">b = a</span><br><span class="line">a[<span class="number">0</span>] = <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># [&#x27;1&#x27;, 2, 3, 4, 5]</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># [&#x27;1&#x27;, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<p>实验1：<strong>list改变以后，地址不变，仍然是同一个list</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a)) <span class="comment"># 1580993122696</span></span><br><span class="line">a += [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a)) <span class="comment"># 1580993122696</span></span><br></pre></td></tr></table></figure>

<p>实验2：<strong>对比list和tuple</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a.append(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">c = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># c.append(4) 元组不支持append增加元素</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>

<p>实验3：<strong>tuple不可变，但是内部的列表可以变</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">a[<span class="number">3</span>][<span class="number">2</span>] = <span class="string">&#x27;q&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">3</span>][<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Python.assets/image-20220831114057961.png" alt="image-20220831114057961" style="zoom: 67%;" />

<h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p>整除：5 &#x2F;&#x2F; 2 &#x3D; 2</p>
<p>除法：5 &#x2F; 2 &#x3D; 2.5</p>
<p>次方：5 ** 2 &#x3D; 25，5 ** 3 &#x3D; 125</p>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>与：and</p>
<p>或：or</p>
<p>非：not</p>
<p>int，float：值为0时，被认为是False，非0被认为是True</p>
<p>字符串：空串被认为是False，非空字符串是True</p>
<p>list，set，tuple，dict：空被认为是False，非空是True</p>
<h3 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h3><p>in：元素是否在后面的组中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;qwer&#x27;</span>) <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<p>not in：元素是否不在后面的组中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q&#x27;</span> <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<p>注意：字典的成员运算，看的是key在不在dict中</p>
<h3 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h3><p>is：比较两个变量的内存地址是否相等，&#x3D;&#x3D;是比较两个变量的值是否相等</p>
<p>实验1：值比较</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">is</span> <span class="number">1.0</span>) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">is</span> <span class="number">1</span>) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> == <span class="number">1.0</span>) <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<p>实验2：list比较，因为集合是无序的，1,2,3还是2,1,3不影响值相等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">b = &#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a)) <span class="comment"># 2438124459624</span></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b)) <span class="comment"># 2438125466344</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<p>实验3：tuple比较，因为元组是有序的，1,2,3还是2,1,3值不一样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = (<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a)) <span class="comment"># 2843689161280</span></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(b)) <span class="comment"># 2843689163368</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b) <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<p>is not：比较两个变量的内存地址是否不相等</p>
<h3 id="值，身份，类型"><a href="#值，身份，类型" class="headerlink" title="值，身份，类型"></a>值，身份，类型</h3><p>对象的三个特征：值，身份，类型</p>
<p>Python中一切都是对象，int，”str”，()，{}，[]</p>
<p>值比较：a &#x3D;&#x3D; b</p>
<p>身份比较：a is b</p>
<p>类型比较：isinstance</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a) == <span class="built_in">int</span>) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">b = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(b, <span class="built_in">str</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(b, <span class="built_in">int</span>)) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(b, (<span class="built_in">int</span>, <span class="built_in">str</span>, <span class="built_in">float</span>))) <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>&amp;：按位与</p>
<p>|：按位或</p>
<p>^：按位异或</p>
<p>~：按位取反</p>
<p>&lt;&lt;：左移</p>
<p>&gt;&gt;：右移</p>
<h1 id="分支、循环、条件与枚举"><a href="#分支、循环、条件与枚举" class="headerlink" title="分支、循环、条件与枚举"></a>分支、循环、条件与枚举</h1><p>接受控制台输入：input()</p>
<p>pass：占位符</p>
<h2 id="if-else-elif"><a href="#if-else-elif" class="headerlink" title="if , else , elif"></a>if , else , elif</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">account = <span class="string">&#x27;guolin&#x27;</span></span><br><span class="line">password = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;please input account&#x27;</span>)</span><br><span class="line">user_account = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;please input password&#x27;</span>)</span><br><span class="line">user_password = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> account == user_account <span class="keyword">and</span> password == user_password:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;fail&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="while，else"><a href="#while，else" class="headerlink" title="while，else"></a>while，else</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> a &lt;= <span class="number">10</span>:</span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;EOF&#x27;</span>) </span><br></pre></td></tr></table></figure>

<h2 id="for，else"><a href="#for，else" class="headerlink" title="for，else"></a>for，else</h2><p>主要是用来遍历&#x2F;循环  序列，集合或者字典</p>
<p><code>print(y, end = &#39;&#39;)</code>控制每个输出的末尾是什么，如果不指定end，默认是换行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主要是用来遍历/循环  序列，集合或者字典</span></span><br><span class="line">a = [[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> x:</span><br><span class="line">        <span class="built_in">print</span>(y, end = <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;for-else&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># range(a, b, c)构建一个序列 前开后闭，c为步长（间隔多少）</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># range(a, b, c)构建一个序列 前开后闭，c为步长（间隔多少）</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, <span class="number">0</span>, -<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(a), <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(a[i], end = <span class="string">&#x27; | &#x27;</span>) <span class="comment"># 1 | 3 | 5 | 7 | 9 | </span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">b = a[<span class="number">0</span>:<span class="built_in">len</span>(a):<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># [1, 3, 5, 7, 9]</span></span><br></pre></td></tr></table></figure>

<h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a: </span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>

<h1 id="包、模块、类"><a href="#包、模块、类" class="headerlink" title="包、模块、类"></a>包、模块、类</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>一个文件夹就是一个包，并且这个文件夹下有<code>__init__.py</code>文件，如果没有<code>__init__.py</code>，python会认为这是一个普通的文件夹，<code>__init__.py</code>文件也是一个模块，并且这个模块的模块名就是包名</p>
<p>模块就是 .py 文件</p>
<p>模块里面的class就是类</p>
<h2 id="import导包"><a href="#import导包" class="headerlink" title="import导包"></a>import导包</h2><h3 id="同级别的模块导入"><a href="#同级别的模块导入" class="headerlink" title="同级别的模块导入"></a>同级别的模块导入</h3><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Python.assets/image-20220831160423351.png" alt="image-20220831160423351"></p>
<h3 id="从子包里面的模块导入"><a href="#从子包里面的模块导入" class="headerlink" title="从子包里面的模块导入"></a>从子包里面的模块导入</h3><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Python.assets/image-20220831161038220.png" alt="image-20220831161038220"></p>
<h3 id="as别名"><a href="#as别名" class="headerlink" title="as别名"></a>as别名</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> t.c1 <span class="keyword">as</span> m</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(m.a)</span><br></pre></td></tr></table></figure>

<h3 id="编译器自动生成的字节码文件"><a href="#编译器自动生成的字节码文件" class="headerlink" title="编译器自动生成的字节码文件"></a>编译器自动生成的字节码文件</h3><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Python.assets/image-20220831161135548.png" alt="image-20220831161135548"></p>
<h3 id="直接导入具体的变量"><a href="#直接导入具体的变量" class="headerlink" title="直接导入具体的变量"></a>直接导入具体的变量</h3><p>from module import a</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># import t.c1 as m</span></span><br><span class="line"><span class="comment"># print(m.a)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> t.c1 <span class="keyword">import</span> a</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<p>这样也可以</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> t <span class="keyword">import</span> c1</span><br><span class="line"><span class="built_in">print</span>(c1.a)</span><br></pre></td></tr></table></figure>

<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Python.assets/image-20220831161814594.png" alt="image-20220831161814594"></p>
<h3 id="使用-一次性导入所有变量"><a href="#使用-一次性导入所有变量" class="headerlink" title="使用*一次性导入所有变量"></a>使用*一次性导入所有变量</h3><p><strong>c1：</strong></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Python.assets/image-20220831162217729.png" alt="image-20220831162217729"></p>
<p><strong>c2：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> t.c1 <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># 4</span></span><br></pre></td></tr></table></figure>

<h3 id="all-列表，指定-导入的变量"><a href="#all-列表，指定-导入的变量" class="headerlink" title="__all__列表，指定*导入的变量"></a>__all__列表，指定*导入的变量</h3><p><strong>c1：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__all__ = [a, c]</span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">c = <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p><strong>c2：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> t.c1 <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># 报错，找不到b，因为c1定义了__all__ = [a, c]</span></span><br></pre></td></tr></table></figure>

<p><strong>在init文件中使用all：</strong></p>
<p>可以指定 * 导入的时候，导入哪些包</p>
<p>例如：</p>
<p>all只指定了c1，没有指定c4：</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Python.assets/image-20220831164244737.png" alt="image-20220831164244737"></p>
<p>那么用 * 一次性导入的时候，只会导入c1，也就是init中的all列表中的模块</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Python.assets/image-20220831164150250.png" alt="image-20220831164150250"></p>
<h3 id="导入换行"><a href="#导入换行" class="headerlink" title="导入换行"></a>导入换行</h3><p><strong>不换行：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> t.c1 <span class="keyword">import</span> a, b, c</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># 4</span></span><br></pre></td></tr></table></figure>

<p><strong>用\换行：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> t.c1 <span class="keyword">import</span> a, b, \</span><br><span class="line">c</span><br></pre></td></tr></table></figure>

<p><strong>用()换行：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> t.c1 <span class="keyword">import</span> (a, b, </span><br><span class="line">c)</span><br></pre></td></tr></table></figure>

<h3 id="init文件"><a href="#init文件" class="headerlink" title="init文件"></a>init文件</h3><p>导入包的时候，python会自动运行init文件</p>
<p><strong>init文件：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;This is __init__.py file&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<p><strong>其他文件导包的时候：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> t</span><br></pre></td></tr></table></figure>

<p><strong>输出结果：</strong></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">This <span class="keyword">is</span> __init__.<span class="keyword">py</span> <span class="keyword">file</span></span><br></pre></td></tr></table></figure>

<p><strong>应用：</strong>批量导入</p>
<p>可以在init文件里面统一导包，然后再在其他包里面导入init所在的包即可</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Python.assets/image-20220831165903855.png" alt="image-20220831165903855"></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Python.assets/image-20220831170132343.png" alt="image-20220831170132343"></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>包和模块是不会重复导入的</p>
<p>避免循环导入</p>
<p><strong>p1文件：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> p2 <span class="keyword">import</span> p2</span><br><span class="line">p1 = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(p2)</span><br></pre></td></tr></table></figure>

<p><strong>p2文件：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> p1 <span class="keyword">import</span> p1</span><br><span class="line">p2 = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>python导入模块的时候，会自动执行模块里面的所有代码</p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>python默认递归深度是995（不同计算机和系统默认深度不一样）</p>
<p>下列语句可以<strong>自定义最大递归深度</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">1000000</span>)</span><br></pre></td></tr></table></figure>

<h2 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h2><p><strong>函数如果没有返回值就会返回None</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_code</span>(<span class="params">code</span>):</span><br><span class="line">    <span class="built_in">print</span>(code)</span><br><span class="line">    </span><br><span class="line">a = add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">b = print_code(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a, b) <span class="comment"># 3 None</span></span><br></pre></td></tr></table></figure>

<h2 id="序列解包"><a href="#序列解包" class="headerlink" title="序列解包"></a>序列解包</h2><p>自动解包，指定有意义的变量名称，利于维护</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">damage</span>(<span class="params">skill1, skill2</span>):</span><br><span class="line">    damage1 = skill1 * <span class="number">3</span></span><br><span class="line">    damage2 = skill2 * <span class="number">2</span> + <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> damage1, damage2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接受可以直接用一个变量接收，返回的是一个元组</span></span><br><span class="line">damages = damage(<span class="number">3</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(damages)) <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(damages) <span class="comment"># (9, 22)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以用多个变量，进行序列解包</span></span><br><span class="line">skill1_damage, skill2_damage = damage(<span class="number">3</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(skill1_damage, skill2_damage) <span class="comment"># 9 22</span></span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 序列解包</span></span><br><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"></span><br><span class="line">d = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(d))</span><br><span class="line"><span class="comment"># 序列解包</span></span><br><span class="line">x, y, z = d</span><br></pre></td></tr></table></figure>

<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h3 id="必须参数"><a href="#必须参数" class="headerlink" title="必须参数"></a>必须参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 必须参数</span></span><br><span class="line">c = add(<span class="number">3</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键字参数，可以调换参数的顺序</span></span><br><span class="line">d = add(y = <span class="number">2</span>, x = <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">person</span>(<span class="params">name, age, **kw</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name:&#x27;</span>, name, <span class="string">&#x27;age:&#x27;</span>, age, <span class="string">&#x27;other:&#x27;</span>, kw)</span><br><span class="line"></span><br><span class="line">person(<span class="string">&#x27;Michael&#x27;</span>, <span class="number">30</span>) <span class="comment"># name: Michael age: 30 other: &#123;&#125;</span></span><br><span class="line">person(<span class="string">&#x27;Bob&#x27;</span>, <span class="number">35</span>, city=<span class="string">&#x27;Beijing&#x27;</span>) <span class="comment"># name: Bob age: 35 other: &#123;&#x27;city&#x27;: &#x27;Beijing&#x27;&#125;</span></span><br><span class="line">person(<span class="string">&#x27;Adam&#x27;</span>, <span class="number">45</span>, gender=<span class="string">&#x27;M&#x27;</span>, job=<span class="string">&#x27;Engineer&#x27;</span>) <span class="comment"># name: Adam age: 45 other: &#123;&#x27;gender&#x27;: &#x27;M&#x27;, &#x27;job&#x27;: &#x27;Engineer&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<p>关键字参数有什么用？它可以扩展函数的功能。比如，在<code>person</code>函数里，我们保证能接收到<code>name</code>和<code>age</code>这两个参数，但是，如果调用者愿意提供更多的参数，我们也能收到。试想你正在做一个用户注册的功能，除了用户名和年龄是必填项外，其他都是可选项，利用关键字参数来定义这个函数就能满足注册的需求。</p>
<p>和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">person</span>(<span class="params">name, age, **kw</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name:&#x27;</span>, name, <span class="string">&#x27;age:&#x27;</span>, age, <span class="string">&#x27;other:&#x27;</span>, kw)</span><br><span class="line"></span><br><span class="line">extra = &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;Engineer&#x27;</span>&#125;</span><br><span class="line">person(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">24</span>, **extra) <span class="comment"># name: Jack age: 24 other: &#123;&#x27;city&#x27;: &#x27;Beijing&#x27;, &#x27;job&#x27;: &#x27;Engineer&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y=<span class="number">5</span></span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">c = add(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># 8</span></span><br></pre></td></tr></table></figure>

<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>在Python函数中，还可以定义可变参数。顾名思义，可变参数就是传入的参数个数是可变的，可以是1个、2个到任意个，还可以是0个。</p>
<p>我们以数学题为例子，给定一组数字a，b，c……，请计算a<sup>2</sup> + b<sup>2</sup> + c<sup>2</sup></p>
<p>要定义出这个函数，我们必须确定输入的参数。由于参数个数不确定，我们首先想到可以把a，b，c……作为一个list或tuple传进来，这样，函数可以定义如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">numbers</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br></pre></td></tr></table></figure>

<p>但是调用的时候，需要先组装出一个list或tuple：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">numbers</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(calc([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])) <span class="comment"># 14</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(calc((<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>))) <span class="comment"># 84</span></span><br></pre></td></tr></table></figure>

<p>如果利用可变参数，调用函数的方式可以简化成这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">*numbers</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(calc(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)) <span class="comment"># 14</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(calc(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>)) <span class="comment"># 84</span></span><br></pre></td></tr></table></figure>

<p>定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个<code>*</code>号。在函数内部，参数<code>numbers</code>接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">*numbers</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(calc()) <span class="comment"># 0</span></span><br></pre></td></tr></table></figure>

<p>如果已经有一个list或者tuple，要调用一个可变参数怎么办？可以这样做：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">*numbers</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(calc(*nums)) <span class="comment"># 14</span></span><br></pre></td></tr></table></figure>

<h3 id="global关键字"><a href="#global关键字" class="headerlink" title="global关键字"></a>global关键字</h3><p>global 标志实际上是为了提示 python 解释器，表明被其修饰的变量是全局变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">origin = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">go</span>(<span class="params">step</span>):</span><br><span class="line">    <span class="comment"># 申明origin是全局变量</span></span><br><span class="line">    <span class="keyword">global</span> origin</span><br><span class="line">    new_pos = origin + step</span><br><span class="line">    origin = new_pos</span><br><span class="line">    <span class="keyword">return</span> new_pos</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(go(<span class="number">2</span>)) <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(go(<span class="number">3</span>)) <span class="comment"># 5</span></span><br><span class="line"><span class="built_in">print</span>(go(<span class="number">6</span>)) <span class="comment"># 11</span></span><br></pre></td></tr></table></figure>

<p><strong>报错的例子：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">origin = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">go</span>(<span class="params">step</span>):</span><br><span class="line">    <span class="comment"># 如果不申明origin是全局变量，就会报错，origin还未定义，因为内部有origin，函数就不会引用外部的origin了</span></span><br><span class="line">    <span class="comment"># global origin</span></span><br><span class="line">    new_pos = origin + step</span><br><span class="line">    origin = new_pos</span><br><span class="line">    <span class="keyword">return</span> new_pos</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(go(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(go(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(go(<span class="number">6</span>))</span><br></pre></td></tr></table></figure>

<h3 id="nonlocal关键字"><a href="#nonlocal关键字" class="headerlink" title="nonlocal关键字"></a>nonlocal关键字</h3><p>强制申明一个变量不是局部变量，要从外部引用</p>
<p><strong>闭包的方式解决：</strong></p>
<p>pos和go函数一起形成了闭包，闭包可以使pos记忆上一次调用的状态</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">origin = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factory</span>(<span class="params">pos</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">go</span>(<span class="params">step</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> pos</span><br><span class="line">        new_pos = pos + step</span><br><span class="line">        pos = new_pos</span><br><span class="line">        <span class="keyword">return</span> new_pos</span><br><span class="line">    <span class="keyword">return</span> go</span><br><span class="line"></span><br><span class="line">tourist = factory(origin)</span><br><span class="line"><span class="built_in">print</span>(tourist(<span class="number">2</span>)) <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(tourist(<span class="number">3</span>)) <span class="comment"># 5</span></span><br><span class="line"><span class="built_in">print</span>(tourist(<span class="number">6</span>)) <span class="comment"># 11</span></span><br></pre></td></tr></table></figure>

<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>变量直接定义在模块里面，就是<strong>全局变量</strong>，函数中可以直接使用</p>
<p>变量定义在类下面，被称为<strong>数据成员</strong></p>
<p>函数里面的是<strong>局部变量</strong></p>
<h2 id="类的定义和方法调用"><a href="#类的定义和方法调用" class="headerlink" title="类的定义和方法调用"></a>类的定义和方法调用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_file</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;name: &#x27;</span> + self.name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;age: &#x27;</span> + <span class="built_in">str</span>(self.age))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类的实例化</span></span><br><span class="line">student = Student()</span><br><span class="line"><span class="comment"># 调用类下面的方法</span></span><br><span class="line">student.print_file()</span><br></pre></td></tr></table></figure>

<h2 id="调用其他模块的类"><a href="#调用其他模块的类" class="headerlink" title="调用其他模块的类"></a>调用其他模块的类</h2><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Python.assets/image-20220901104834214.png" alt="image-20220901104834214"></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Python.assets/image-20220901103238409.png" alt="image-20220901103238409"></p>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 构造函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;student&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_homework</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">     </span><br><span class="line">student1 = Student()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造函数也可以显式调用</span></span><br><span class="line">a =  student1.__init__()</span><br><span class="line"><span class="comment"># 构造函数返回的是None</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># None</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a)) <span class="comment"># &lt;class &#x27;NoneType&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<p>构造函数默认返回值是None，也可以显式的返回None</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 构造函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;student&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p>但是和其他函数不同的是，构造函数不能返回除了None以外的其他值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 构造函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;student&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;student&#x27;</span></span><br></pre></td></tr></table></figure>

<p>报错：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;c1.py&quot;</span>, line <span class="number">14</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    student1 = Student()</span><br><span class="line">TypeError: __init__() should <span class="keyword">return</span> <span class="literal">None</span>, <span class="keyword">not</span> <span class="string">&#x27;str&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="类变量和实例变量"><a href="#类变量和实例变量" class="headerlink" title="类变量和实例变量"></a>类变量和实例变量</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    <span class="comment"># 这里是定义的类变量，与其他语言不同！！！</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 构造函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="comment"># 这里是定义了两个实例变量，每个实例都分别持有各自的实例变量</span></span><br><span class="line">        <span class="comment"># 实例变量的定义方法就是self.xxx</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_homework</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;do_homework&#x27;</span>)</span><br><span class="line">     </span><br><span class="line">student1 = Student(<span class="string">&#x27;小明&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">student2 = Student(<span class="string">&#x27;小红&#x27;</span>, <span class="number">19</span>)</span><br><span class="line"><span class="built_in">print</span>(student1.name)</span><br><span class="line"><span class="built_in">print</span>(student1.age)</span><br><span class="line"><span class="built_in">print</span>(student2.name)</span><br><span class="line"><span class="built_in">print</span>(student2.age)</span><br></pre></td></tr></table></figure>

<p><strong>实例变量并不能改变类变量的值，类变量只和类相关，不受对象的影响：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    <span class="comment"># 这里是定义的类变量，与其他语言不同！！！</span></span><br><span class="line">    name = <span class="string">&#x27;guolin&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 构造函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="comment"># 这里是定义了两个实例变量，每个实例都分别持有各自的实例变量</span></span><br><span class="line">        <span class="comment"># 实例变量的定义方法就是self.xxx</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_homework</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;do_homework&#x27;</span>)</span><br><span class="line">     </span><br><span class="line">student1 = Student(<span class="string">&#x27;小明&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">student2 = Student(<span class="string">&#x27;小红&#x27;</span>, <span class="number">19</span>)</span><br><span class="line"><span class="built_in">print</span>(student1.name) <span class="comment"># 小明</span></span><br><span class="line"><span class="built_in">print</span>(student2.name) <span class="comment"># 小红</span></span><br><span class="line"><span class="built_in">print</span>(Student.name) <span class="comment"># guolin</span></span><br></pre></td></tr></table></figure>

<h2 id="没有定义类变量，一样可以有实例变量"><a href="#没有定义类变量，一样可以有实例变量" class="headerlink" title="没有定义类变量，一样可以有实例变量"></a>没有定义类变量，一样可以有实例变量</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    <span class="comment"># 构造函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="comment"># 这里是定义了两个实例变量，每个实例都分别持有各自的实例变量</span></span><br><span class="line">        <span class="comment"># 实例变量的定义方法就是self.xxx</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_homework</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;do_homework&#x27;</span>)</span><br><span class="line">     </span><br><span class="line">student1 = Student(<span class="string">&#x27;小明&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">student2 = Student(<span class="string">&#x27;小红&#x27;</span>, <span class="number">19</span>)</span><br><span class="line"><span class="built_in">print</span>(student1.name) <span class="comment"># 小明</span></span><br><span class="line"><span class="built_in">print</span>(student2.name) <span class="comment"># 小红</span></span><br></pre></td></tr></table></figure>

<h2 id="dict变量"><a href="#dict变量" class="headerlink" title="dict变量"></a>dict变量</h2><p>python中每个实例中自带了一个<code>__dict__</code>字典，可以通过<code>实例名.__dict__</code>的方式查看这个实例的实例变量有哪些</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_homework</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;do_homework&#x27;</span>)</span><br><span class="line">     </span><br><span class="line">student1 = Student(<span class="string">&#x27;小明&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(student1.__dict__) <span class="comment"># &#123;&#x27;name&#x27;: &#x27;小明&#x27;, &#x27;age&#x27;: 18&#125;</span></span><br></pre></td></tr></table></figure>

<p>python机制：在class外部调用一个变量，如果对象里面，没有找到指定的实例变量，就会自动去类里面找，如果还没找到，会去父类里面找，所以下面的student1没有实例变量，python自动去类变量里面找，所以<code>student1.name</code>和<code>Student.name</code>输出的值一样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    name = <span class="string">&#x27;guolin&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        name = name</span><br><span class="line">        age = age</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_homework</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;do_homework&#x27;</span>)</span><br><span class="line">     </span><br><span class="line">student1 = Student(<span class="string">&#x27;小明&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(student1.__dict__) <span class="comment"># &#123;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(student1.name) <span class="comment"># guolin</span></span><br><span class="line"><span class="built_in">print</span>(Student.name) <span class="comment"># guolin</span></span><br></pre></td></tr></table></figure>

<p>类也可以用<code>__dict__</code>查看类的变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    name = <span class="string">&#x27;guolin&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        name = name</span><br><span class="line">        age = age</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_homework</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;do_homework&#x27;</span>)</span><br><span class="line">     </span><br><span class="line">student1 = Student(<span class="string">&#x27;小明&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="built_in">print</span>(student1.__dict__) <span class="comment"># &#123;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(Student.__dict__) <span class="comment"># &#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;name&#x27;: &#x27;guolin&#x27;, &#x27;age&#x27;: 0, &#x27;__init__&#x27;: &lt;function Student.__init__ at 0x0000022B2F23B8C8&gt;, &#x27;do_homework&#x27;: &lt;function Student.do_homework at 0x0000022B2F23B950&gt;, &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;Student&#x27; objects&gt;, &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;Student&#x27; objects&gt;, &#x27;__doc__&#x27;: None&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="实例方法内部访问类变量"><a href="#实例方法内部访问类变量" class="headerlink" title="实例方法内部访问类变量"></a>实例方法内部访问类变量</h2><p>通过<code>类名.类变量</code>访问</p>
<p>通过<code>self.__class__.类变量</code>访问</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    <span class="comment"># 一个学校的学生总数</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例方法，实例可以调用的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        <span class="built_in">print</span>(Student.<span class="built_in">sum</span>)</span><br><span class="line">        <span class="built_in">print</span>(self.__class__.<span class="built_in">sum</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_homework</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;do_homework&#x27;</span>)</span><br><span class="line">     </span><br><span class="line">student1 = Student(<span class="string">&#x27;小明&#x27;</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure>

<h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><p>装饰器：@classmethod</p>
<p>类可以调用类方法，对象也可以直接调用类方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    <span class="comment"># 一个学校的学生总数</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例方法，实例可以调用的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_homework</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;do_homework&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">plus_sum</span>(<span class="params">cls</span>): <span class="comment"># cls就是这个类本身</span></span><br><span class="line">        cls.<span class="built_in">sum</span> += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(cls.<span class="built_in">sum</span>)</span><br><span class="line">     </span><br><span class="line">student1 = Student(<span class="string">&#x27;小明&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">Student.plus_sum()</span><br><span class="line">student1 = Student(<span class="string">&#x27;小红&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">Student.plus_sum()</span><br><span class="line">student1 = Student(<span class="string">&#x27;小军&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">Student.plus_sum()</span><br></pre></td></tr></table></figure>

<h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>@staticmethod</p>
<p>对象和类都可以直接调用静态方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    <span class="comment"># 一个学校的学生总数</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例方法，实例可以调用的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_homework</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;do_homework&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">plus_sum</span>(<span class="params">cls</span>):</span><br><span class="line">        cls.<span class="built_in">sum</span> += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(cls.<span class="built_in">sum</span>)</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;This is a staticmethod&#x27;</span>)</span><br><span class="line">     </span><br><span class="line">student1 = Student(<span class="string">&#x27;小明&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">student1.add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">Student.add(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><p>实例方法内部可以调用其他方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    <span class="comment"># 一个学校的学生总数</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, score</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.score = score</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_homework</span>(<span class="params">self</span>):</span><br><span class="line">        self.do_english_homework()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;do_homework&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_english_homework</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;do_english_homework&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">plus_sum</span>(<span class="params">cls</span>):</span><br><span class="line">        cls.<span class="built_in">sum</span> += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(cls.<span class="built_in">sum</span>)</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;This is a staticmethod&#x27;</span>)</span><br><span class="line">     </span><br><span class="line">student1 = Student(<span class="string">&#x27;小明&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">student1.do_homework()</span><br></pre></td></tr></table></figure>

<p><strong>public，private：</strong></p>
<p>在方法或者变量面前加双下划线，python就会认为这个变量是私有的，否则就是公开的</p>
<p>python的私有变量保护机制其实就是把变量名换了，例如本来是__score，python会改成_Student__score</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    <span class="comment"># 一个学校的学生总数</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.__score = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">marking</span>(<span class="params">self, score</span>):</span><br><span class="line">        <span class="keyword">if</span> score &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;不能打负分&#x27;</span></span><br><span class="line">        self.__score = score</span><br><span class="line">        <span class="built_in">print</span>(self.name + <span class="string">&#x27;分数为: &#x27;</span> + <span class="built_in">str</span>(self.__score))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_homework</span>(<span class="params">self</span>):</span><br><span class="line">        self.do_english_homework()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;do_homework&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_english_homework</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;do_english_homework&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">plus_sum</span>(<span class="params">cls</span>):</span><br><span class="line">        cls.<span class="built_in">sum</span> += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(cls.<span class="built_in">sum</span>)</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;This is a staticmethod&#x27;</span>)</span><br><span class="line">     </span><br><span class="line">student1 = Student(<span class="string">&#x27;小明&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">result = student1.marking(-<span class="number">59</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(student1.__dict__) <span class="comment"># &#123;&#x27;name&#x27;: &#x27;小明&#x27;, &#x27;age&#x27;: 18, &#x27;_Student__score&#x27;: 0&#125;</span></span><br><span class="line">student1._Student__score = -<span class="number">1</span> <span class="comment"># 换一个名字，就可以访问私有变量了</span></span><br><span class="line"><span class="built_in">print</span>(student1._Student__score) <span class="comment"># 也可以访问</span></span><br></pre></td></tr></table></figure>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>子类可以继承父类的类变量和实例变量，方法</p>
<p>调用父类的方法：<code>super(Student, self).do_homework()</code></p>
<p><strong>父类：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span>():</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.__class__.<span class="built_in">sum</span> += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_homework</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;This is a parent method!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>子类：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> c1 <span class="keyword">import</span> Human</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Human</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, school, name, age</span>):</span><br><span class="line">        self.school = school</span><br><span class="line">        <span class="comment"># 调用父类的方法：两种方法</span></span><br><span class="line">        <span class="comment"># Human.__init__(self, name, age)</span></span><br><span class="line">        <span class="built_in">super</span>(Student, self).__init__(name, age)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_homework</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Student, self).do_homework()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;do_homework&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">student1 = Student(<span class="string">&#x27;人民路小学&#x27;</span>, <span class="string">&#x27;石敢当&#x27;</span>, <span class="number">18</span>)</span><br><span class="line">student1.do_homework()</span><br><span class="line"><span class="built_in">print</span>(student1.name)</span><br><span class="line"><span class="built_in">print</span>(student1.age)</span><br></pre></td></tr></table></figure>

<h3 id="对比Java"><a href="#对比Java" class="headerlink" title="对比Java"></a>对比Java</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Student student = new Student(<span class="string">&quot;小明&quot;</span>, <span class="number">18</span>, <span class="string">&quot;人民路小学&quot;</span>);</span><br><span class="line">        System.out.println(student.getName());</span><br><span class="line">        System.out.println(student.getAge());</span><br><span class="line">        System.out.println(student.getSchool());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">    public Human() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Human(String name, <span class="built_in">int</span> age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="built_in">int</span> getAge() &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(<span class="built_in">int</span> age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> extends Human &#123;</span><br><span class="line">    private String school;</span><br><span class="line"></span><br><span class="line">    public Student() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String school) &#123;</span><br><span class="line">        this.school = school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student(String name, <span class="built_in">int</span> age, String school) &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        this.school = school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getSchool() &#123;</span><br><span class="line">        <span class="keyword">return</span> school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSchool(String school) &#123;</span><br><span class="line">        this.school = school;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>定义：正则表达式是一个特殊的字符序列，一个字符串是否与我们所设定这样的字符序列，相匹配</p>
<p>作用：快速检索文本、实现一些替换文本的操作</p>
<p>应用：</p>
<p>1.检查一串数字是否是电话号码</p>
<p>2.检测一个字符串是否符合email</p>
<p>3.把一个文本里指定的单词替换为另外一个单词</p>
<h2 id="python内置函数"><a href="#python内置函数" class="headerlink" title="python内置函数"></a>python内置函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;c|c++|c#|java|python&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a.index() &gt; -1则包含，否则不包含</span></span><br><span class="line"><span class="built_in">print</span>(a.index(<span class="string">&#x27;python&#x27;</span>)) <span class="comment"># 14</span></span><br><span class="line"><span class="built_in">print</span>(a.index(<span class="string">&#x27;python&#x27;</span>) &gt; -<span class="number">1</span>) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;python&#x27;</span> <span class="keyword">in</span> a) <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h2 id="findall方法"><a href="#findall方法" class="headerlink" title="findall方法"></a>findall方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;c|c++|c#|java|python&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找寻全部的python正则表达式，以列表形式返回</span></span><br><span class="line">r = re.findall(<span class="string">&#x27;python&#x27;</span>, a)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(r) &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;字符串中包含python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [&#x27;python&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="概括字符集"><a href="#概括字符集" class="headerlink" title="概括字符集"></a>概括字符集</h2><ul>
<li><p>数字：<code>\d == [0-9]</code></p>
</li>
<li><p>非数字：<code>\D ==[^0-9]</code></p>
</li>
<li><p>数字+字母+下划线(单词字符)：<code>\w == [A-Za-z0-9_]</code></p>
</li>
<li><p>非数字+字母+下划线(非单词字符)：<code>\W == [^A-Za-z0-9_]</code>，<code>[&#39; &#39;, &#39;\n&#39;, &#39;&amp;&#39;, &#39;\r&#39;, &#39;\t&#39;]</code>都是非单词字符</p>
</li>
<li><p>匹配任何不可见字符：<code>\s == [ \f\n\r\t\v]</code>，包括空格、制表符、换页符等等</p>
</li>
<li><p>匹配任何可见字符(非空白字符)：<code>\S</code></p>
</li>
<li><p>匹配除换行符之外其他所有字符：<code>.</code></p>
</li>
</ul>
<p><strong>匹配一个数字字符：</strong></p>
<p>普通字符：’python’，元字符：’\d’</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;c0c++1c#3java5python&#x27;</span></span><br><span class="line"></span><br><span class="line">r = re.findall(<span class="string">&#x27;\d&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;3&#x27;, &#x27;5&#x27;]</span></span><br></pre></td></tr></table></figure>

<p><strong>匹配一个非数字字符：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;c0c++1c#3java5python&#x27;</span></span><br><span class="line"></span><br><span class="line">r = re.findall(<span class="string">&#x27;\D&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [&#x27;c&#x27;, &#x27;c&#x27;, &#x27;+&#x27;, &#x27;+&#x27;, &#x27;c&#x27;, &#x27;#&#x27;, &#x27;j&#x27;, &#x27;a&#x27;, &#x27;v&#x27;, &#x27;a&#x27;, &#x27;p&#x27;, &#x27;y&#x27;, &#x27;t&#x27;, &#x27;h&#x27;, &#x27;o&#x27;, &#x27;n&#x27;]</span></span><br></pre></td></tr></table></figure>

<p><strong>字符集：普通字符+元字符</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;abc, acc, adc, aec, afc, ahc&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到中间字符是c或者f的单词</span></span><br><span class="line">r = re.findall(<span class="string">&#x27;a[cf]c&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [&#x27;acc&#x27;, &#x27;afc&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到中间字符不是c或者f或者d的单词</span></span><br><span class="line">r = re.findall(<span class="string">&#x27;a[^cfd]c&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [&#x27;abc&#x27;, &#x27;aec&#x27;, &#x27;ahc&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到中间字符是c-f的单词</span></span><br><span class="line">r = re.findall(<span class="string">&#x27;a[c-f]c&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [&#x27;acc&#x27;, &#x27;adc&#x27;, &#x27;aec&#x27;, &#x27;afc&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="数量词"><a href="#数量词" class="headerlink" title="数量词"></a>数量词</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;python 1111java678php&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符a-z，长度为3-6的区间范围内</span></span><br><span class="line">r = re.findall(<span class="string">&#x27;[a-z]&#123;3,6&#125;&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [&#x27;python&#x27;, &#x27;java&#x27;, &#x27;php&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="贪婪与非贪婪"><a href="#贪婪与非贪婪" class="headerlink" title="贪婪与非贪婪"></a>贪婪与非贪婪</h2><p>python的正则表达式数量词，默认是贪婪的，自动的匹配更多：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;python 1111java678php&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符a-z，长度为3-6的区间范围内</span></span><br><span class="line">r = re.findall(<span class="string">&#x27;[a-z]&#123;3,6&#125;&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [&#x27;python&#x27;, &#x27;java&#x27;, &#x27;php&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>非贪婪：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;python 1111java678php&#x27;</span></span><br><span class="line"></span><br><span class="line">r = re.findall(<span class="string">&#x27;[a-z]&#123;3,6&#125;?&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [&#x27;pyt&#x27;, &#x27;hon&#x27;, &#x27;jav&#x27;, &#x27;php&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="号，-号，？号"><a href="#号，-号，？号" class="headerlink" title="*号，+号，？号"></a>*号，+号，？号</h2><p>*号前面的字符可以是任意次，包括0次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;pytho0python1pythonn2&#x27;</span></span><br><span class="line"></span><br><span class="line">r = re.findall(<span class="string">&#x27;python*&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [&#x27;pytho&#x27;, &#x27;python&#x27;, &#x27;pythonn&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>+号前面的字符为1次到无限多次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;pytho0python1pythonn2&#x27;</span></span><br><span class="line"></span><br><span class="line">r = re.findall(<span class="string">&#x27;python+&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [&#x27;python&#x27;, &#x27;pythonn&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>?号前面的字符为0次或1次，可以用来去重</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;pytho0python1pythonn2&#x27;</span></span><br><span class="line"></span><br><span class="line">r = re.findall(<span class="string">&#x27;python?&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [&#x27;pytho&#x27;, &#x27;python&#x27;, &#x27;python&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="边界匹配"><a href="#边界匹配" class="headerlink" title="边界匹配"></a>边界匹配</h2><p><strong>判断qq号是否为4-8位：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断qq号是否为4-8位</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 小于4位可以正常判断出来</span></span><br><span class="line">qq = <span class="string">&#x27;101&#x27;</span></span><br><span class="line">r = re.findall(<span class="string">&#x27;\d&#123;4,8&#125;&#x27;</span>, qq)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [] </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4-8位可以正常判断出来</span></span><br><span class="line">qq = <span class="string">&#x27;100001&#x27;</span></span><br><span class="line">r = re.findall(<span class="string">&#x27;\d&#123;4,8&#125;&#x27;</span>, qq)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [&#x27;100001&#x27;] </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 大于8位无法正常判断</span></span><br><span class="line">qq = <span class="string">&#x27;100000001&#x27;</span></span><br><span class="line">r = re.findall(<span class="string">&#x27;\d&#123;4,8&#125;&#x27;</span>, qq)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [&#x27;10000000&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 边界匹配，匹配正则表达式完整的字段，大于8位也可以正常判断出来，并排除</span></span><br><span class="line">qq = <span class="string">&#x27;100000001&#x27;</span></span><br><span class="line">r = re.findall(<span class="string">&#x27;^\d&#123;4,8&#125;$&#x27;</span>, qq)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># []</span></span><br></pre></td></tr></table></figure>

<p><strong>^与$的解释：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">qq = <span class="string">&#x27;100000001&#x27;</span></span><br><span class="line">r = re.findall(<span class="string">&#x27;000&#x27;</span>, qq)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [&#x27;000&#x27;, &#x27;000&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ^表示必须以0开头，从头开始匹配是不是000</span></span><br><span class="line">r = re.findall(<span class="string">&#x27;^000&#x27;</span>, qq)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># []</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># $表示必须以0结尾，从尾开始往前匹配是不是000</span></span><br><span class="line">r = re.findall(<span class="string">&#x27;000$&#x27;</span>, qq)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># []</span></span><br></pre></td></tr></table></figure>

<h2 id="分组数量词"><a href="#分组数量词" class="headerlink" title="分组数量词"></a>分组数量词</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;pythonpythonpythonpython&#x27;</span></span><br><span class="line"></span><br><span class="line">r = re.findall(<span class="string">&#x27;(python)&#123;2&#125;&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [&#x27;python&#x27;, &#x27;python&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="匹配模式参数"><a href="#匹配模式参数" class="headerlink" title="匹配模式参数"></a>匹配模式参数</h2><p>第三个参数是匹配模式参数</p>
<p><code>re.I</code>为忽略大小写</p>
<p>原本<code>.</code>是匹配除换行符之外其他所有字符，<code>re.S</code>可以让<code>.</code>匹配所有字符，包括换行符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;PythonC#\nJavaPHP&#x27;</span></span><br><span class="line"></span><br><span class="line">r = re.findall(<span class="string">&#x27;c#&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># []</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三个参数是匹配模式参数</span></span><br><span class="line"><span class="comment"># re.I为忽略大小写</span></span><br><span class="line">r = re.findall(<span class="string">&#x27;c#&#x27;</span>, a, re.I)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [&#x27;C#&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原本.是匹配除换行符之外其他所有字符</span></span><br><span class="line">r = re.findall(<span class="string">&#x27;c#.&#123;1&#125;&#x27;</span>, a, re.I)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># []</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># re.S可以让.匹配所有字符，包括换行符。</span></span><br><span class="line">r = re.findall(<span class="string">&#x27;c#.&#123;1&#125;&#x27;</span>, a, re.I | re.S)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [&#x27;C#\n&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="sub方法，替换"><a href="#sub方法，替换" class="headerlink" title="sub方法，替换"></a>sub方法，替换</h2><p>替换，默认把所有参数替换掉，第四个参数默认是0，替换所有</p>
<p>第四个参数的意思是，匹配到后，所能够替换的最大的次数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;PythonC#JavaC#C#PHP&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换，默认把所有参数替换掉，第四个参数默认是0，替换所有</span></span><br><span class="line">r = re.sub(<span class="string">&#x27;C#&#x27;</span>, <span class="string">&#x27;GO&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># PythonGOJavaGOGOPHP</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四个参数的意思是，匹配到后，所能够替换的最大的次数</span></span><br><span class="line">r = re.sub(<span class="string">&#x27;C#&#x27;</span>, <span class="string">&#x27;GO&#x27;</span>, a, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># PythonGOJavaC#C#PHP</span></span><br><span class="line"></span><br><span class="line">r = re.sub(<span class="string">&#x27;C#&#x27;</span>, <span class="string">&#x27;GO&#x27;</span>, a, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># PythonGOJavaGOC#PHP</span></span><br></pre></td></tr></table></figure>

<p><strong>Python内置的的替换函数replace：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;PythonC#JavaC#C#PHP&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python内置的替换函数replace</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发现没变，因为字符串是不可变的</span></span><br><span class="line">a.replace(<span class="string">&#x27;C#&#x27;</span>, <span class="string">&#x27;GO&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># PythonC#JavaC#C#PHP</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 必须将结果赋值给一个新的变量</span></span><br><span class="line">a = a.replace(<span class="string">&#x27;C#&#x27;</span>, <span class="string">&#x27;GO&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># PythonGOJavaGOGOPHP</span></span><br></pre></td></tr></table></figure>

<p><strong>把函数作为参数传入sub：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;PythonC#JavaC#C#PHP&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="comment"># value传入以后并不是字符串，不能直接返回</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(value)) <span class="comment"># &lt;class &#x27;_sre.SRE_Match&#x27;&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># value.group()方法，可以得到字符串</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;!!&#x27;</span> + value.group() + <span class="string">&#x27;!!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果C#能够匹配到，C#就会以value传入convert(value)这个函数，函数返回值就是替换后的结果</span></span><br><span class="line">r = re.sub(<span class="string">&#x27;C#&#x27;</span>, convert, a)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># Python!!C#!!Java!!C#!!!!C#!!PHP</span></span><br></pre></td></tr></table></figure>

<p><strong>将小于6的数字变成0，大于等于6的改成9：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;A8Casd867328918&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert</span>(<span class="params">value</span>):</span><br><span class="line">    matched = value.group()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(matched) &gt;= <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;9&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;0&#x27;</span></span><br><span class="line"></span><br><span class="line">r = re.sub(<span class="string">&#x27;\d&#x27;</span>, convert, s)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># A9Casd999009909</span></span><br></pre></td></tr></table></figure>

<h2 id="match与search方法"><a href="#match与search方法" class="headerlink" title="match与search方法"></a>match与search方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;qwe1231DW123Q4GE2RW&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># match尝试从字符串的首字符开始匹配，如果没有找到相应结果，就会返回None</span></span><br><span class="line">r = re.<span class="keyword">match</span>(<span class="string">&#x27;\d&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># search将搜索整个字符串，直到找到第一个满足条件的结果，并返回</span></span><br><span class="line">r1 = re.search(<span class="string">&#x27;\d&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(r1)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;1231DW123Q4GE2RW&#x27;</span></span><br><span class="line"></span><br><span class="line">r = re.<span class="keyword">match</span>(<span class="string">&#x27;\d&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># &lt;_sre.SRE_Match object; span=(0, 1), match=&#x27;1&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(r.group()) <span class="comment"># 1</span></span><br><span class="line"><span class="comment"># span返回满足条件的第一个字符的位置</span></span><br><span class="line"><span class="built_in">print</span>(r.span()) <span class="comment"># (0, 1)</span></span><br><span class="line"></span><br><span class="line">r1 = re.search(<span class="string">&#x27;\d&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(r1) <span class="comment"># &lt;_sre.SRE_Match object; span=(0, 1), match=&#x27;1&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(r.group()) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(r.span()) <span class="comment"># (0, 1)</span></span><br><span class="line"></span><br><span class="line">r2 = re.findall(<span class="string">&#x27;\d&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(r2) <span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;1&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;2&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="group分组"><a href="#group分组" class="headerlink" title="group分组"></a>group分组</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;life is short, i use python&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取life到python间所有字符</span></span><br><span class="line">r = re.search(<span class="string">&#x27;life (.*) python&#x27;</span>, s)</span><br><span class="line"><span class="comment"># group(0)是完整匹配结果</span></span><br><span class="line"><span class="built_in">print</span>(r.group(<span class="number">0</span>)) <span class="comment"># life is short, i use python</span></span><br><span class="line"><span class="built_in">print</span>(r.group(<span class="number">1</span>)) <span class="comment"># is short, i use</span></span><br><span class="line"></span><br><span class="line">r = re.findall(<span class="string">&#x27;life (.*) python&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># [&#x27;is short, i use&#x27;]</span></span><br></pre></td></tr></table></figure>

<p><strong>groups：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;life is short, i use python, i love python&#x27;</span></span><br><span class="line"></span><br><span class="line">r = re.search(<span class="string">&#x27;life(.*)python(.*)python&#x27;</span>, s)</span><br><span class="line"><span class="built_in">print</span>(r.group(<span class="number">0</span>)) <span class="comment"># life is short, i use python, i love python</span></span><br><span class="line"><span class="built_in">print</span>(r.group(<span class="number">1</span>)) <span class="comment">#  is short, i use</span></span><br><span class="line"><span class="built_in">print</span>(r.group(<span class="number">2</span>)) <span class="comment"># , i love</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.group(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)) <span class="comment"># (&#x27;life is short, i use python, i love python&#x27;, &#x27; is short, i use &#x27;, &#x27;, i love &#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(r.groups()) <span class="comment"># (&#x27; is short, i use &#x27;, &#x27;, i love &#x27;)</span></span><br></pre></td></tr></table></figure>

<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><h2 id="JSON介绍"><a href="#JSON介绍" class="headerlink" title="JSON介绍"></a>JSON介绍</h2><p><strong>定义：</strong>JavaScript Object Notation(JavaScript对像标记)是一种轻量级的数据交换格式</p>
<p><strong>载体：</strong>字符串是JSON的表现形式，符合JSON格式的字符串叫做JSON字符串</p>
<p><strong>优点：</strong>易于阅读，易于解析，网络传输效率高，跨语言交换数据</p>
<p><strong>XML长什么样：</strong></p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Python.assets/image-20220903135529528.png" alt="image-20220903135529528" style="zoom:50%;" />

<p><strong>JSON跨语言，数据交换：</strong></p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Python.assets/image-20220903135732840.png" alt="image-20220903135732840" style="zoom:33%;" />

<h2 id="Python中JSON的格式"><a href="#Python中JSON的格式" class="headerlink" title="Python中JSON的格式"></a>Python中JSON的格式</h2><p>JSON中字符串必须以双引号表示，JSON的每个key都是字符串，要加双引号</p>
<p>value如果是字符串也要加双引号，数字不用加，bool类型也不用加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">json_str = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;qiyue&quot;, &quot;age&quot;:18&#125;&#x27;</span></span><br><span class="line">json_str = <span class="string">&#x27;[&#123;&quot;name&quot;:&quot;qiyue&quot;, &quot;age&quot;:18&#125;, &#123;&quot;name&quot;:&quot;qiyue&quot;, &quot;age&quot;:18&#125;]&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>将JSON转换为Python中的数据结构</p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Python.assets/image-20220903142329836.png" alt="image-20220903142329836" style="zoom: 67%;" />

<h3 id="loads方法"><a href="#loads方法" class="headerlink" title="loads方法"></a>loads方法</h3><p><strong>将json字符串转换为dict：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">json_str = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;qiyue&quot;, &quot;age&quot;:18&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将json字符串转换为dict</span></span><br><span class="line">student = json.loads(json_str)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(student)) <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(student) <span class="comment"># &#123;&#x27;name&#x27;: &#x27;qiyue&#x27;, &#x27;age&#x27;: 18&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>将json数组转换为list，list里面每个元素是一个dict：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">json_str = <span class="string">&#x27;[&#123;&quot;name&quot;:&quot;qiyue&quot;, &quot;age&quot;:18&#125;, &#123;&quot;name&quot;:&quot;qiyue&quot;, &quot;age&quot;:18&#125;]&#x27;</span></span><br><span class="line"></span><br><span class="line">student = json.loads(json_str)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(student)) <span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(student) <span class="comment"># [&#123;&#x27;name&#x27;: &#x27;qiyue&#x27;, &#x27;age&#x27;: 18&#125;, &#123;&#x27;name&#x27;: &#x27;qiyue&#x27;, &#x27;age&#x27;: 18&#125;]</span></span><br></pre></td></tr></table></figure>

<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>将Python数据类型转换为JSON</p>
<h3 id="dumps方法"><a href="#dumps方法" class="headerlink" title="dumps方法"></a>dumps方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">student = [</span><br><span class="line">            &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;qiyue&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">18</span>, <span class="string">&quot;flag&quot;</span>:<span class="literal">False</span>&#125;, </span><br><span class="line">            &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;qiyue&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">18</span>&#125;</span><br><span class="line">          ]</span><br><span class="line"></span><br><span class="line">json_str = json.dumps(student)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(json_str)) <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(json_str) <span class="comment"># [&#123;&quot;name&quot;: &quot;qiyue&quot;, &quot;age&quot;: 18, &quot;flag&quot;: false&#125;, &#123;&quot;name&quot;: &quot;qiyue&quot;, &quot;age&quot;: 18&#125;]</span></span><br></pre></td></tr></table></figure>

<h2 id="JSON，JSON对象，JSON字符串"><a href="#JSON，JSON对象，JSON字符串" class="headerlink" title="JSON，JSON对象，JSON字符串"></a>JSON，JSON对象，JSON字符串</h2><p>JSON是一种中间的数据类型，实现不同语言之间的快速转换</p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Python.assets/image-20220903144628207.png" alt="image-20220903144628207" style="zoom:50%;" />

<p>JSON有自己的数据类型，虽然它和JavaScript的数据类型有些相似</p>
<p>JSON对象和JSON字符串其实脱离语言来看，是一样的</p>
<h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><p>枚举是一个类，所有的枚举都是Enum的子类</p>
<h2 id="为什么要用枚举？"><a href="#为什么要用枚举？" class="headerlink" title="为什么要用枚举？"></a>为什么要用枚举？</h2><p>其他三种方式的缺陷：值可变，没有防止相同标签的功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yellow = <span class="number">1</span></span><br><span class="line">green = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;yellow&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;green&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TypeDiamond</span>():</span><br><span class="line">    yellow = <span class="number">1</span></span><br><span class="line">    green = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 值可变</span></span><br><span class="line"><span class="comment"># 没有防止相同标签的功能</span></span><br></pre></td></tr></table></figure>

<h3 id="枚举的值不可变"><a href="#枚举的值不可变" class="headerlink" title="枚举的值不可变"></a>枚举的值不可变</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VIP</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    GREEN = <span class="number">2</span></span><br><span class="line">    BLACK = <span class="number">3</span></span><br><span class="line">    RED = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(VIP.YELLOW)</span><br><span class="line"></span><br><span class="line"><span class="comment"># VIP.YELLOW = 6 报错，枚举类型不允许更改</span></span><br></pre></td></tr></table></figure>

<h3 id="枚举不允许相同标签"><a href="#枚举不允许相同标签" class="headerlink" title="枚举不允许相同标签"></a>枚举不允许相同标签</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VIP</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    YELLOW = <span class="number">2</span> <span class="comment"># 报错</span></span><br><span class="line">    BLACK = <span class="number">3</span></span><br><span class="line">    RED = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(VIP.YELLOW)</span><br></pre></td></tr></table></figure>

<h2 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h2><h3 id="枚举类型，枚举的名字，枚举的值"><a href="#枚举类型，枚举的名字，枚举的值" class="headerlink" title="枚举类型，枚举的名字，枚举的值"></a>枚举类型，枚举的名字，枚举的值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VIP</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    GREEN = <span class="number">2</span></span><br><span class="line">    BLACK = <span class="number">3</span></span><br><span class="line">    RED = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(VIP.GREEN)) <span class="comment"># &lt;enum &#x27;VIP&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(VIP.GREEN) <span class="comment"># VIP.YELLOW</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取标签的数值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(VIP.GREEN.value)) <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(VIP.GREEN.value) <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取标签的名字</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(VIP.GREEN.name)) <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(VIP.GREEN.name) <span class="comment"># GREEN</span></span><br></pre></td></tr></table></figure>

<h3 id="遍历枚举"><a href="#遍历枚举" class="headerlink" title="遍历枚举"></a>遍历枚举</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VIP</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    GREEN = <span class="number">2</span></span><br><span class="line">    BLACK = <span class="number">3</span></span><br><span class="line">    RED = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> VIP:</span><br><span class="line">    <span class="built_in">print</span>(v)</span><br></pre></td></tr></table></figure>

<h3 id="枚举间的比较"><a href="#枚举间的比较" class="headerlink" title="枚举间的比较"></a>枚举间的比较</h3><p>枚举类型之间不能做大小比较，但是可以做等值比较</p>
<p>枚举类型可以做身份比较</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VIP</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    GREEN = <span class="number">1</span></span><br><span class="line">    BLACK = <span class="number">3</span></span><br><span class="line">    RED = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">result = VIP.YELLOW == VIP.GREEN</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 枚举类型之间不能做大小比较，但是可以做等值比较</span></span><br><span class="line"><span class="comment"># result = VIP.YELLOW &gt; VIP.GREEN</span></span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line"></span><br><span class="line">result = VIP.BLACK <span class="keyword">is</span> VIP.BLACK</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以做身份比较</span></span><br><span class="line">result = VIP.YELLOW <span class="keyword">is</span> VIP.GREEN</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h3 id="标签别名"><a href="#标签别名" class="headerlink" title="标签别名"></a>标签别名</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VIP</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    YELLOW_ALIAD = <span class="number">1</span></span><br><span class="line">    BLACK = <span class="number">3</span></span><br><span class="line">    RED = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># YELLOW_ALIAD可以看作YELLOW的别名，一般并不会打印出来</span></span><br><span class="line"><span class="built_in">print</span>(VIP.YELLOW_ALIAD) <span class="comment"># VIP.YELLOW</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通遍历也不会展示别名</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> VIP:</span><br><span class="line">    <span class="built_in">print</span>(v) <span class="comment"># VIP.YELLOW  VIP.BLACK  VIP.RED</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样才能打印出别名</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> VIP.__members__:</span><br><span class="line">    <span class="built_in">print</span>(v)</span><br><span class="line"><span class="comment"># YELLOW</span></span><br><span class="line"><span class="comment"># YELLOW_ALIAD</span></span><br><span class="line"><span class="comment"># BLACK</span></span><br><span class="line"><span class="comment"># RED</span></span><br></pre></td></tr></table></figure>

<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>将数字转换为枚举类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VIP</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    GREEN = <span class="number">1</span></span><br><span class="line">    BLACK = <span class="number">3</span></span><br><span class="line">    RED = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(VIP(a)) <span class="comment"># VIP.YELLOW</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(VIP.BLACK)) <span class="comment"># &lt;enum &#x27;VIP&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(VIP.BLACK, VIP)) <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h3 id="标签的值的类型"><a href="#标签的值的类型" class="headerlink" title="标签的值的类型"></a>标签的值的类型</h3><p>标签的值可以是其他类型，不一定要是数字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VIP</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    GREEN = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    BLACK = <span class="string">&#x27;str&#x27;</span></span><br><span class="line">    RED = &#123;<span class="number">213</span>:<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="强制指定标签的值为int"><a href="#强制指定标签的值为int" class="headerlink" title="强制指定标签的值为int"></a>强制指定标签的值为int</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> IntEnum</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VIP</span>(<span class="title class_ inherited__">IntEnum</span>):</span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    GREEN = <span class="number">2</span></span><br><span class="line">    BLACK = <span class="number">3</span></span><br><span class="line">    RED = <span class="number">4</span></span><br></pre></td></tr></table></figure>

<h3 id="限制标签的值不相同"><a href="#限制标签的值不相同" class="headerlink" title="限制标签的值不相同"></a>限制标签的值不相同</h3><p>枚举类的上面加装饰器@unique</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> IntEnum, unique</span><br><span class="line"></span><br><span class="line"><span class="meta">@unique</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VIP</span>(<span class="title class_ inherited__">IntEnum</span>):</span><br><span class="line">    YELLOW = <span class="number">1</span></span><br><span class="line">    GREEN = <span class="number">1</span> <span class="comment"># 报错</span></span><br><span class="line">    BLACK = <span class="number">3</span></span><br><span class="line">    RED = <span class="number">4</span></span><br></pre></td></tr></table></figure>

<h3 id="枚举底层"><a href="#枚举底层" class="headerlink" title="枚举底层"></a>枚举底层</h3><p>枚举类型的实现是单例模式，不能对枚举类型实例化</p>
<h1 id="一切皆对象"><a href="#一切皆对象" class="headerlink" title="一切皆对象"></a>一切皆对象</h1><p>函数也是对象，函数可以赋值给一个变量</p>
<p>可以把函数作为另一个函数的参数，传递到另外的函数里</p>
<p>把一个函数当作另一个函数的返回值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a)) <span class="comment"># &lt;class &#x27;function&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">curve_pre</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">curve</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;this is a function&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> curve</span><br><span class="line"></span><br><span class="line">f = curve_pre()</span><br><span class="line">f() <span class="comment"># this is a function</span></span><br></pre></td></tr></table></figure>

<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>保存了一个现场</p>
<p>由函数以及它在定义时候的外部的环境变量(不能是全局变量)所构成的整体，就是闭包</p>
<p>当闭包形成之后，这个函数在任何地方调用的时候，都不会受到重新赋值的影响，还是会用闭包时的环境变量</p>
<p><strong>外部的环境变量的例子：</strong>形成闭包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">curve_pre</span>():</span><br><span class="line">    a = <span class="number">25</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">curve</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> a*x*x</span><br><span class="line">    <span class="keyword">return</span> curve</span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">f = curve_pre()</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">2</span>)) <span class="comment"># 100</span></span><br></pre></td></tr></table></figure>

<p><strong>全局变量的例子：</strong>没有形成闭包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">25</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">curve_pre</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">curve</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> a*x*x</span><br><span class="line">    <span class="keyword">return</span> curve</span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">f = curve_pre()</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">2</span>)) <span class="comment"># 40</span></span><br></pre></td></tr></table></figure>

<p><strong>局部变量的改变无法影响全局变量：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">        <span class="comment"># a 会被认为是一个局部变量，不会引用环境变量了，没有形成闭包</span></span><br><span class="line">        a = <span class="number">20</span></span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(a) <span class="comment"># 10</span></span><br><span class="line">    f2() <span class="comment"># 20</span></span><br><span class="line">    <span class="built_in">print</span>(a) <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line">f1()</span><br></pre></td></tr></table></figure>

<p><strong>没有形成闭包的例子：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">        <span class="comment"># a 会被认为是一个局部变量，没有引用环境变量，所以没有形成闭包</span></span><br><span class="line">        a = <span class="number">20</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">return</span> f2</span><br><span class="line"></span><br><span class="line">f = f1()</span><br><span class="line"><span class="built_in">print</span>(f) <span class="comment"># &lt;function f1.&lt;locals&gt;.f2 at 0x0000024EE10870D0&gt;</span></span><br><span class="line"><span class="comment"># 不是一个闭包</span></span><br><span class="line"><span class="built_in">print</span>(f.__closure__) <span class="comment"># None</span></span><br></pre></td></tr></table></figure>

<p><strong>改成闭包：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">        <span class="comment"># 此时删除了a局部变量，这里就必须引用环境变量中的a，形成闭包</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">return</span> f2</span><br><span class="line"></span><br><span class="line">f = f1()</span><br><span class="line"><span class="built_in">print</span>(f) <span class="comment"># &lt;function f1.&lt;locals&gt;.f2 at 0x0000024EE10870D0&gt;</span></span><br><span class="line"><span class="comment"># 是一个闭包</span></span><br><span class="line"><span class="built_in">print</span>(f.__closure__) <span class="comment"># (&lt;cell at 0x0000027E79E0B528: int object at 0x000000006DBA6F00&gt;,)</span></span><br></pre></td></tr></table></figure>

<h2 id="global全局变量"><a href="#global全局变量" class="headerlink" title="global全局变量"></a>global全局变量</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">origin = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">go</span>(<span class="params">step</span>):</span><br><span class="line">    <span class="comment"># 申明origin是全局变量</span></span><br><span class="line">    <span class="keyword">global</span> origin</span><br><span class="line">    new_pos = origin + step</span><br><span class="line">    origin = new_pos</span><br><span class="line">    <span class="keyword">return</span> new_pos</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(go(<span class="number">2</span>)) <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(go(<span class="number">3</span>)) <span class="comment"># 5</span></span><br><span class="line"><span class="built_in">print</span>(go(<span class="number">6</span>)) <span class="comment"># 11</span></span><br></pre></td></tr></table></figure>

<p><strong>报错的例子：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">origin = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">go</span>(<span class="params">step</span>):</span><br><span class="line">    <span class="comment"># 如果不申明origin是全局变量，就会报错，origin还未定义，因为内部有origin，函数就不会引用外部的origin了</span></span><br><span class="line">    <span class="comment"># global origin</span></span><br><span class="line">    new_pos = origin + step</span><br><span class="line">    origin = new_pos</span><br><span class="line">    <span class="keyword">return</span> new_pos</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(go(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(go(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(go(<span class="number">6</span>))</span><br></pre></td></tr></table></figure>

<h2 id="nonlocal非局部变量"><a href="#nonlocal非局部变量" class="headerlink" title="nonlocal非局部变量"></a>nonlocal非局部变量</h2><p>强制申明一个变量不是局部变量，要从外部引用</p>
<p><strong>闭包的方式解决：</strong></p>
<p>pos和go函数一起形成了闭包，闭包可以使pos记忆上一次调用的状态</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">origin = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factory</span>(<span class="params">pos</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">go</span>(<span class="params">step</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> pos</span><br><span class="line">        new_pos = pos + step</span><br><span class="line">        pos = new_pos</span><br><span class="line">        <span class="keyword">return</span> new_pos</span><br><span class="line">    <span class="keyword">return</span> go</span><br><span class="line"></span><br><span class="line">tourist = factory(origin)</span><br><span class="line"><span class="built_in">print</span>(tourist(<span class="number">2</span>)) <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(tourist(<span class="number">3</span>)) <span class="comment"># 5</span></span><br><span class="line"><span class="built_in">print</span>(tourist(<span class="number">6</span>)) <span class="comment"># 11</span></span><br></pre></td></tr></table></figure>

<h1 id="lambda匿名函数"><a href="#lambda匿名函数" class="headerlink" title="lambda匿名函数"></a>lambda匿名函数</h1><h2 id="lambda表达式的定义"><a href="#lambda表达式的定义" class="headerlink" title="lambda表达式的定义"></a>lambda表达式的定义</h2><p>定义匿名函数：lambda 参数列表: 函数返回值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>, <span class="number">2</span>)) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">f = <span class="keyword">lambda</span> x, y: x + y</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">1</span>, <span class="number">2</span>)) <span class="comment"># 3</span></span><br></pre></td></tr></table></figure>

<h2 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h2><p>其他语言中<code>x &gt; y ? x : y</code></p>
<p>Python中<code>x if x &gt; y else y</code>也就是</p>
<p>条件为真时返回的结果  if  条件判断  else  条件为假时的返回结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> x, y : x <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> y</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">1</span>, <span class="number">2</span>)) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure>

<h1 id="map类"><a href="#map类" class="headerlink" title="map类"></a>map类</h1><p>map(函数, 集合)，map会把集合里面的所有元素都传入函数，然后返回一个map对象，里面保存了结果</p>
<h2 id="map配合lambda"><a href="#map配合lambda" class="headerlink" title="map配合lambda"></a>map配合lambda</h2><p>单参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line">r = <span class="built_in">map</span>(square, list_x)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(r)) <span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64]</span></span><br><span class="line"></span><br><span class="line">r = <span class="built_in">map</span>(<span class="keyword">lambda</span> x : x * x, list_x)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(r)) <span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64]</span></span><br></pre></td></tr></table></figure>

<p>多参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">list_y = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">r = <span class="built_in">map</span>(<span class="keyword">lambda</span> x, y : x * x + y, list_x, list_y)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(r)) <span class="comment"># [2, 6, 12, 20, 30, 42, 56, 72]</span></span><br></pre></td></tr></table></figure>

<p>结果列表的元素个数取决于传入的比较小的集合的长度：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">list_y = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">r = <span class="built_in">map</span>(<span class="keyword">lambda</span> x, y : x * x + y, list_x, list_y)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(r)) <span class="comment"># [2, 6, 12, 20, 30, 42]</span></span><br></pre></td></tr></table></figure>

<h1 id="reduce函数"><a href="#reduce函数" class="headerlink" title="reduce函数"></a>reduce函数</h1><p>reduce函数：每一次lambda表达式的结果，将作为下一次调用lambda的参数去计算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">list_x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连续计算，连续调用lambda</span></span><br><span class="line">r = reduce(<span class="keyword">lambda</span> x, y : x + y, list_x)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># 36</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">第一次调用：x = 1, y = 2, x + y = 3</span></span><br><span class="line"><span class="string">第二次调用：x = 3, y = 3, x + y = 6</span></span><br><span class="line"><span class="string">第三次调用：x = 6, y = 4, x + y = 10</span></span><br><span class="line"><span class="string">第四次调用：x = 10, y = 5, x + y = 15</span></span><br><span class="line"><span class="string">第五次调用：x = 15, y = 6, x + y = 21</span></span><br><span class="line"><span class="string">第六次调用：x = 21, y = 7, x + y = 28</span></span><br><span class="line"><span class="string">第七次调用：x = 28, y = 8, x + y = 36</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>第三个参数：初始值</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">list_x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三个参数是初始值</span></span><br><span class="line">r = reduce(<span class="keyword">lambda</span> x, y : x + y, list_x, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># 46</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">list_x = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三个参数是初始值</span></span><br><span class="line">r = reduce(<span class="keyword">lambda</span> x, y : x + y, list_x, <span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r) <span class="comment"># aaa123</span></span><br></pre></td></tr></table></figure>

<h1 id="filter类"><a href="#filter类" class="headerlink" title="filter类"></a>filter类</h1><p>filter传入的函数必须返回真或者假，为真，元素保留，为假，剔除此元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_x = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除0</span></span><br><span class="line">r = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: <span class="literal">True</span> <span class="keyword">if</span> x == <span class="number">1</span> <span class="keyword">else</span> <span class="literal">False</span>, list_x)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(r)) <span class="comment"># [1, 1, 1]</span></span><br></pre></td></tr></table></figure>

<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>稳定性：想对被封装的单元做出代码上的修改，可以不改变具体的单元实现，而是通过装饰器，改变函数的行为</p>
<p>复用性：可以加在多个函数上，增加这个功能装饰器</p>
<p>体现了AOP的编程思想</p>
<p>开闭原则：对修改是封闭的，对拓展是开放的</p>
<p><strong>打印时间戳：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="comment"># unix时间戳</span></span><br><span class="line">    <span class="built_in">print</span>(time.time())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This is a function&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f1()</span><br></pre></td></tr></table></figure>

<p><strong>用单独的函数打印时间：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This is a function&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This is a function&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_current_time</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(time.time())</span><br><span class="line">    func()</span><br><span class="line"></span><br><span class="line">print_current_time(f1)</span><br><span class="line">print_current_time(f2)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1662212278.4627192</span></span><br><span class="line"><span class="string">This is a function</span></span><br><span class="line"><span class="string">1662212278.4637156</span></span><br><span class="line"><span class="string">This is a function</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>用装饰器打印时间：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰的</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="comment"># 被封装的</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line">        <span class="built_in">print</span>(time.time())</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This is a function&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f = decorator(f1)</span><br><span class="line">f()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1662212710.1250434</span></span><br><span class="line"><span class="string">This is a function</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="语法糖"><a href="#语法糖" class="headerlink" title="@语法糖"></a>@语法糖</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰的</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="comment"># 被封装的</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line">        <span class="built_in">print</span>(time.time())</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This is a function&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f1()</span><br></pre></td></tr></table></figure>

<h2 id="接收可变参数"><a href="#接收可变参数" class="headerlink" title="接收可变参数"></a>接收可变参数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args</span>):</span><br><span class="line">        <span class="built_in">print</span>(time.time())</span><br><span class="line">        func(*args)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">func_name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This is a function &#x27;</span> + func_name)</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">func_name1, func_name2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This is a function &#x27;</span> + func_name1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This is a function &#x27;</span> + func_name2)</span><br><span class="line"></span><br><span class="line">f1(<span class="string">&#x27;test func&#x27;</span>)</span><br><span class="line">f2(<span class="string">&#x27;test func1&#x27;</span>, <span class="string">&#x27;test func2&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="接收关键字参数"><a href="#接收关键字参数" class="headerlink" title="接收关键字参数"></a>接收关键字参数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kw</span>):</span><br><span class="line">        <span class="built_in">print</span>(time.time())</span><br><span class="line">        func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">func_name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This is a function &#x27;</span> + func_name)</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">func_name1, func_name2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This is a function &#x27;</span> + func_name1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This is a function &#x27;</span> + func_name2)</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f3</span>(<span class="params">func_name1, func_name2, **kw</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This is a function &#x27;</span> + func_name1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;This is a function &#x27;</span> + func_name2)</span><br><span class="line">    <span class="built_in">print</span>(kw)</span><br><span class="line"></span><br><span class="line">f1(<span class="string">&#x27;test func&#x27;</span>)</span><br><span class="line">f2(<span class="string">&#x27;test func1&#x27;</span>, <span class="string">&#x27;test func2&#x27;</span>)</span><br><span class="line">f3(<span class="string">&#x27;test func1&#x27;</span>, <span class="string">&#x27;test func2&#x27;</span>, a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="Python技巧"><a href="#Python技巧" class="headerlink" title="Python技巧"></a>Python技巧</h1><h2 id="用字典映射代替switch-case语句"><a href="#用字典映射代替switch-case语句" class="headerlink" title="用字典映射代替switch case语句"></a>用字典映射代替switch case语句</h2><p>不用下标访问，而是用get方法访问，第一个参数是key，第二个参数是如果key不存在的时候，将返回的结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">day = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">switcher = &#123;</span><br><span class="line">    <span class="number">0</span> : <span class="string">&#x27;Sunday&#x27;</span>,</span><br><span class="line">    <span class="number">1</span> : <span class="string">&#x27;Monday&#x27;</span>,</span><br><span class="line">    <span class="number">2</span> : <span class="string">&#x27;Tuesday&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不用下标访问，而是用get方法访问，第一个参数是key，第二个参数是如果key不存在的时候，将返回的结果</span></span><br><span class="line"><span class="comment"># day_name = switcher[day]</span></span><br><span class="line">day_name = switcher.get(day, <span class="string">&#x27;Unkown&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(day_name)</span><br></pre></td></tr></table></figure>

<p>函数名+()调用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">day = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sunday</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Sunday&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_monday</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Monday&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_Tuesday</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Tuesday&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_unkown</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Unkown&#x27;</span></span><br><span class="line"></span><br><span class="line">switcher = &#123;</span><br><span class="line">    <span class="number">0</span> : get_sunday,</span><br><span class="line">    <span class="number">1</span> : get_monday,</span><br><span class="line">    <span class="number">2</span> : get_Tuesday</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不用下标访问，而是用get方法访问，第一个参数是key，第二个参数是如果key不存在的时候，将返回的结果</span></span><br><span class="line"><span class="comment"># day_name = switcher[day]</span></span><br><span class="line">day_name = switcher.get(day, get_unkown)()</span><br><span class="line"><span class="built_in">print</span>(day_name)</span><br></pre></td></tr></table></figure>

<h2 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">b = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> a]</span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64]</span></span><br></pre></td></tr></table></figure>

<h3 id="有条件的列表推导式"><a href="#有条件的列表推导式" class="headerlink" title="有条件的列表推导式"></a>有条件的列表推导式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">b = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i &gt;= <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># [25, 36, 49, 64]</span></span><br></pre></td></tr></table></figure>

<h3 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;</span><br><span class="line"></span><br><span class="line">b = &#123;i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i &gt;= <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># &#123;64, 25, 36, 49&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="元组推导式"><a href="#元组推导式" class="headerlink" title="元组推导式"></a>元组推导式</h3><p>为什么会得到一个generator对象呢？因为元组是不可变的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">b = (i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i &gt;= <span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> b:</span><br><span class="line">    <span class="built_in">print</span>(item, end=<span class="string">&#x27; &#x27;</span>) <span class="comment"># 25 36 49 64 </span></span><br></pre></td></tr></table></figure>

<h3 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h3><p><strong>得到key的列表：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">students = &#123;</span><br><span class="line">    <span class="string">&#x27;喜小乐&#x27;</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="string">&#x27;石敢当&#x27;</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="string">&#x27;横小五&#x27;</span>:<span class="number">15</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b = [key <span class="keyword">for</span> key,value <span class="keyword">in</span> students.items()]</span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># [&#x27;喜小乐&#x27;, &#x27;石敢当&#x27;, &#x27;横小五&#x27;]</span></span><br></pre></td></tr></table></figure>

<p><strong>颠倒key,value：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">students = &#123;</span><br><span class="line">    <span class="string">&#x27;喜小乐&#x27;</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="string">&#x27;石敢当&#x27;</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="string">&#x27;横小五&#x27;</span>:<span class="number">15</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b = &#123;value:key <span class="keyword">for</span> key,value <span class="keyword">in</span> students.items()&#125;</span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># &#123;18: &#x27;喜小乐&#x27;, 20: &#x27;石敢当&#x27;, 15: &#x27;横小五&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>item方法：</strong>返回可遍历的(键, 值) 元组数组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">students = &#123;</span><br><span class="line">    <span class="string">&#x27;喜小乐&#x27;</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="string">&#x27;石敢当&#x27;</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="string">&#x27;横小五&#x27;</span>:<span class="number">15</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 返回可遍历的(键, 值) 元组数组</span></span><br><span class="line">s = students.items()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s)) <span class="comment"># &lt;class &#x27;dict_items&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(s) <span class="comment"># dict_items([(&#x27;喜小乐&#x27;, 18), (&#x27;石敢当&#x27;, 20), (&#x27;横小五&#x27;, 15)])</span></span><br></pre></td></tr></table></figure>

<p><strong>key变元组：</strong>为什么会得到一个generator对象呢？因为元组是不可变的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">students = &#123;</span><br><span class="line">    <span class="string">&#x27;喜小乐&#x27;</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="string">&#x27;石敢当&#x27;</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="string">&#x27;横小五&#x27;</span>:<span class="number">15</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b = (key <span class="keyword">for</span> key,value <span class="keyword">in</span> students.items())</span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x000001FF02B75990&gt;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> b:</span><br><span class="line">    <span class="built_in">print</span>(x, end=<span class="string">&#x27; &#x27;</span>) <span class="comment"># 喜小乐 石敢当 横小五</span></span><br></pre></td></tr></table></figure>

<h2 id="None"><a href="#None" class="headerlink" title="None"></a>None</h2><p>从类型和值这两个方面来讲，None不等于不等于空字符串，不等于空列表，不等于0，不等于False</p>
<p>空本身也是一个对象，也是一个类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;&#x27;</span></span><br><span class="line">b = <span class="literal">False</span></span><br><span class="line">c = []</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a == <span class="literal">None</span>) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(b == <span class="literal">None</span>) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(c == <span class="literal">None</span>) <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> <span class="literal">None</span>) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(b <span class="keyword">is</span> <span class="literal">None</span>) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(c <span class="keyword">is</span> <span class="literal">None</span>) <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="literal">None</span>)) <span class="comment"># &lt;class &#x27;NoneType&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="对象存在并不一定是True"><a href="#对象存在并不一定是True" class="headerlink" title="对象存在并不一定是True"></a>对象存在并不一定是True</h2><p><strong>None对应的是False：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">0</span>) <span class="comment"># 0</span></span><br></pre></td></tr></table></figure>

<p><strong>一般除了None以外的对象是True：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">test = Test()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> test:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;S&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>对象存在，但是也被转化为False的例子：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">test = Test()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="literal">None</span>)) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>([]))   <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(test)) <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> test:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;S&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;F&#x27;</span>) <span class="comment"># F</span></span><br></pre></td></tr></table></figure>

<h3 id="len-与-bool-内置方法"><a href="#len-与-bool-内置方法" class="headerlink" title="__len__与__bool__内置方法"></a>__len__与__bool__内置方法</h3><p>其实len()和bool()函数，实际上都是调用了类内部的__len__方法</p>
<p>如果没有定义bool和len方法，则这个对象会被认为是True</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">test = Test()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(test)) <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<p>如果len方法返回的是0，则对象被认为是False</p>
<p>len方法只能返回整型和布尔值，返回其他会报错</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">test = Test()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(test)) <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<p>如果__bool__方法存在，那么__len__方法将不再影响bool的取值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__bool__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">test = Test()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(test)) <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<p>为什么__bool__方法存在，那么__len__方法将不再影响bool的取值呢？</p>
<p>因为如果__bool__方法存在，那么bool(test)的时候，__len__方法将不再被调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;called&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__bool__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">test = Test()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(test)) <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<p>__bool__方法只能返回bool，也就是True或者False，如果返回整型，也会报错</p>
]]></content>
      <categories>
        <category>语言学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven下载</title>
    <url>/2022/08/20/Maven/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Maven 是专门用于构建和管理Java相关项目的工具</p>
<p>Maven 主要用处一：相同的项目结构</p>
<p>使用Maven管理的Java 项目都有着相同的项目结构</p>
<ol>
<li>有一个pom.xml 用于维护当前项目都用了哪些jar包</li>
<li>所有的java代码都放在 src&#x2F;main&#x2F;java 下面</li>
<li>所有的测试代码都放在src&#x2F;test&#x2F;java 下面</li>
</ol>
<p>Maven 主要用处二：统一维护jar包</p>
<p>比如说有3个Java 项目，这些项目都不是maven风格。那么这3个项目，就会各自维护一套jar包。 而其中有些jar包是相同的。</p>
<p>而maven风格的项目，首先把所有的jar包都放在“仓库”里，然后哪个项目需要用到这个jar包，只需要给出jar包的名称和版本号就行了。 这样<strong>jar包就实现了共享</strong></p>
<span id="more"></span>

<h1 id="下载与配置"><a href="#下载与配置" class="headerlink" title="下载与配置"></a>下载与配置</h1><p>官方最新版下载地址：<a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a></p>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Maven.assets/image-20220819103949883.png" alt="image-20220819103949883"></p>
<h2 id="检验版本"><a href="#检验版本" class="headerlink" title="检验版本"></a>检验版本</h2><p>使用win+r, 然后输入cmd 打开命令行，输入如下命令</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mvn</span> -v</span><br></pre></td></tr></table></figure>

<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Maven.assets/image-20220819104036178.png" alt="image-20220819104036178"></p>
<h2 id="下载路径"><a href="#下载路径" class="headerlink" title="下载路径"></a>下载路径</h2><p>maven 会默认从maven官方提供的服务器下载jar包。<br>而官方服务器在国外，因为大家都知道的原因，网速很慢，而且容易卡断。 为了便于快速下载相关jar包，可以使用国内maven 阿里云的下载地址</p>
<p>使用阿里云下载路径：</p>
<p>打开<code>D:\apache-maven-3.5.0\conf\settings.xml</code></p>
<p>修改在mirrors下新加一个阿里云的镜像地址：</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以直接复制粘贴即可，修改位置是160-165行</p>
<h1 id="idea配置maven项目"><a href="#idea配置maven项目" class="headerlink" title="idea配置maven项目"></a>idea配置maven项目</h1><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Maven.assets/image-20220825131211524.png" alt="image-20220825131211524"></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Maven.assets/image-20220825133125007.png" alt="image-20220825133125007"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>注解与反射</title>
    <url>/2022/08/19/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h2><img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84.assets/image-20220818110715037.png" alt="image-20220818110715037" style="zoom: 67%;" />

<span id="more"></span>

<h2 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h2><img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84.assets/image-20220818110807620.png" alt="image-20220818110807620" style="zoom: 50%;" />

<h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84.assets/image-20220818112230548.png" alt="image-20220818112230548" style="zoom:50%;" />

<h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84.assets/image-20220818113842581.png" alt="image-20220818113842581" style="zoom:50%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="meta">@MyAnnottation(schools = &#123;&quot;123&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnottation2(&quot;a&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnottation &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注解的参数：参数类型 + 参数名() 也可以用deflaut设置默认值</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">age</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">id</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    String[] schools();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnottation2 &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>在游戏运行的时候，把新的代码注入（跑进去）。用Hook（钩子），在游戏运行的时候，改变游戏的数据。</p>
<p>还可以获取注解，获取类的所有东西</p>
<h2 id="静态VS动态"><a href="#静态VS动态" class="headerlink" title="静态VS动态"></a>静态VS动态</h2><img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84.assets/image-20220818123502577.png" alt="image-20220818123502577" style="zoom: 67%;" />

<h2 id="反射是什么"><a href="#反射是什么" class="headerlink" title="反射是什么"></a>反射是什么</h2><img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84.assets/image-20220818123827690.png" alt="image-20220818123827690" style="zoom:50%;" />

<h2 id="反射应用"><a href="#反射应用" class="headerlink" title="反射应用"></a>反射应用</h2><img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84.assets/image-20220818124004341.png" alt="image-20220818124004341" style="zoom:50%;" />

<h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84.assets/image-20220818131328105.png" alt="image-20220818131328105" style="zoom:50%;" />

<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84.assets/image-20220818131645779.png" alt="image-20220818131645779"></p>
<h3 id="获得Class类"><a href="#获得Class类" class="headerlink" title="获得Class类"></a>获得Class类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(person.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过对象获得Class类</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> person.getClass();</span><br><span class="line">        System.out.println(c1.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过forname获得</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;annotation.Student&quot;</span>);</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过 类名.Class获得</span></span><br><span class="line">        Class&lt;Student&gt; c3 = Student.class;</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得父类类型</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> c1.getSuperclass();</span><br><span class="line">        System.out.println(c4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;学生&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;老师&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="哪些类有Class对象"><a href="#哪些类有Class对象" class="headerlink" title="哪些类有Class对象"></a>哪些类有Class对象</h3><img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84.assets/image-20220818140504813.png" alt="image-20220818140504813" style="zoom: 50%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.Element;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有类型的Class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Object.class; <span class="comment">// 类</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Comparable.class; <span class="comment">// 接口</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> String[].class; <span class="comment">// 一维数组</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="type">int</span>[][].class; <span class="comment">// 二维数组</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c5</span> <span class="operator">=</span> Override.class; <span class="comment">// 注解</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c6</span> <span class="operator">=</span> ElementType.class; <span class="comment">// 枚举</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c7</span> <span class="operator">=</span> Integer.class; <span class="comment">// 包装类</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c8</span> <span class="operator">=</span> <span class="keyword">void</span>.class; <span class="comment">// 空</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c9</span> <span class="operator">=</span> Class.class; <span class="comment">// Class类</span></span><br><span class="line"></span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">        System.out.println(c4);</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">        System.out.println(c6);</span><br><span class="line">        System.out.println(c7);</span><br><span class="line">        System.out.println(c8);</span><br><span class="line">        System.out.println(c9);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 两个长度不一样的数组，底层的Class也是同一个</span></span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br><span class="line">        System.out.println(a.getClass().hashCode());</span><br><span class="line">        System.out.println(b.getClass().hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类加载内存分析"><a href="#类加载内存分析" class="headerlink" title="类加载内存分析"></a>类加载内存分析</h2><img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84.assets/image-20220726201527382.png" alt="image-20220726201527382" style="zoom: 80%;" />

<img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84.assets/image-20220818141620483.png" alt="image-20220818141620483" style="zoom:50%;" />

<h3 id="加载，链接，初始化"><a href="#加载，链接，初始化" class="headerlink" title="加载，链接，初始化"></a>加载，链接，初始化</h3><img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84.assets/image-20220818141838560.png" alt="image-20220818141838560" style="zoom:50%;" />

<img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84.assets/image-20220818143158894.png" alt="image-20220818143158894" style="zoom: 67%;" />

<p>1.加载到内存，会产生一个类对应的Class对象</p>
<p>2.链接，链接结束后m&#x3D;0</p>
<p>3.初始化&lt;clinit&gt;  clinit就是class init的意思</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        System.out.println(A.m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A类静态代码块初始化&quot;</span>);</span><br><span class="line">        m = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A类的无参构造初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="什么时候类初始化"><a href="#什么时候类初始化" class="headerlink" title="什么时候类初始化"></a>什么时候类初始化</h3><img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84.assets/image-20220818144003397.png" alt="image-20220818144003397" style="zoom:50%;" />

<h3 id="类的主动引用"><a href="#类的主动引用" class="headerlink" title="类的主动引用"></a>类的主动引用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test06</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Main类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 1.主动引用</span></span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.反射也会产生主动引用</span></span><br><span class="line">        Class.forName(<span class="string">&quot;reflection.Son&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类被加载&quot;</span>);</span><br><span class="line">        m = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类的被动引用"><a href="#类的被动引用" class="headerlink" title="类的被动引用"></a>类的被动引用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test06</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Main类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// System.out.println(Son.b);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Son[] array = new Son[5];</span></span><br><span class="line"></span><br><span class="line">        System.out.println(Son.M);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类被加载&quot;</span>);</span><br><span class="line">        m = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类加载器的作用"><a href="#类加载器的作用" class="headerlink" title="类加载器的作用"></a>类加载器的作用</h2><img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84.assets/image-20220818145639189.png" alt="image-20220818145639189" style="zoom: 50%;" />

<img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84.assets/image-20220818145733591.png" alt="image-20220818145733591" style="zoom:50%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> com.sun.xml.internal.ws.api.model.wsdl.WSDLOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 获取系统类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取系统类加载器的父类加载器--&gt;扩展类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">parent</span> <span class="operator">=</span> systemClassLoader.getParent();</span><br><span class="line">        System.out.println(parent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取扩展类加载器的父类加载器--&gt;根加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">parent1</span> <span class="operator">=</span> parent.getParent();</span><br><span class="line">        System.out.println(parent1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试当前类是哪个加载器加载的</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;reflection.test07&quot;</span>).getClassLoader();</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试JDK内置的类是谁加载的</span></span><br><span class="line">        classLoader = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getClassLoader();</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">结果：</span><br><span class="line">sun.misc.Launcher$AppClassLoader<span class="symbol">@18b4aac2</span></span><br><span class="line">sun.misc.Launcher$ExtClassLoader<span class="symbol">@1b6d3586</span></span><br><span class="line"><span class="literal">null</span></span><br><span class="line">sun.misc.Launcher$AppClassLoader<span class="symbol">@18b4aac2</span></span><br><span class="line"><span class="literal">null</span></span><br></pre></td></tr></table></figure>

<h2 id="通过Class对象获得类的信息"><a href="#通过Class对象获得类的信息" class="headerlink" title="通过Class对象获得类的信息"></a>通过Class对象获得类的信息</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;reflection.User&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得类的名字</span></span><br><span class="line">        System.out.println(c1.getName()); <span class="comment">// 包名 + 类名</span></span><br><span class="line">        System.out.println(c1.getSimpleName()); <span class="comment">// 类名</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到类的public属性</span></span><br><span class="line">        Field[] fields = c1.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields)</span><br><span class="line">            System.out.println(field);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到类的全部的属性</span></span><br><span class="line">        fields = c1.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields)</span><br><span class="line">            System.out.println(field);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得指定属性的值</span></span><br><span class="line">        <span class="comment">// c1.getField(&quot;name&quot;);</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得本类和父类的全部public方法</span></span><br><span class="line">        Method[] methods = c1.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods)</span><br><span class="line">            System.out.println(<span class="string">&quot;正常的：&quot;</span> + method);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得本类的所有方法</span></span><br><span class="line">        methods = c1.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods)</span><br><span class="line">            System.out.println(<span class="string">&quot;getDeclaredMethods：&quot;</span> + method);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得指定方法，后面要接参数类型，因为要识别方法重载</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">getName</span> <span class="operator">=</span> c1.getMethod(<span class="string">&quot;getName&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">setName</span> <span class="operator">=</span> c1.getMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        System.out.println(getName);</span><br><span class="line">        System.out.println(setName);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得构造器(构造方法)</span></span><br><span class="line">        Constructor[] constructors = c1.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors)</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line"></span><br><span class="line">        constructors = c1.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors)</span><br><span class="line">            System.out.println(<span class="string">&quot;getDeclaredConstructors：&quot;</span> + constructor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得指定的构造器(构造方法)</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">declaredConstructors</span> <span class="operator">=</span> c1.getDeclaredConstructor(String.class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;指定：&quot;</span> + declaredConstructors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">结果：</span><br><span class="line">annotation.User</span><br><span class="line">User</span><br><span class="line">============</span><br><span class="line"><span class="keyword">private</span> java.lang.String annotation.<span class="module-access"><span class="module"><span class="identifier">User</span>.</span></span>name</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> annotation.<span class="module-access"><span class="module"><span class="identifier">User</span>.</span></span>id</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> annotation.<span class="module-access"><span class="module"><span class="identifier">User</span>.</span></span>age</span><br><span class="line"><span class="keyword">private</span> java.lang.String annotation.<span class="module-access"><span class="module"><span class="identifier">User</span>.</span></span>name</span><br><span class="line">=============</span><br><span class="line">正常的：public java.lang.String annotation.<span class="module-access"><span class="module"><span class="identifier">User</span>.</span></span><span class="keyword">to</span><span class="constructor">String()</span></span><br><span class="line">正常的：public java.lang.String annotation.<span class="module-access"><span class="module"><span class="identifier">User</span>.</span></span>get<span class="constructor">Name()</span></span><br><span class="line">正常的：public <span class="built_in">int</span> annotation.<span class="module-access"><span class="module"><span class="identifier">User</span>.</span></span>get<span class="constructor">Id()</span></span><br><span class="line">正常的：public void annotation.<span class="module-access"><span class="module"><span class="identifier">User</span>.</span></span>set<span class="constructor">Name(<span class="params">java</span>.<span class="params">lang</span>.String)</span></span><br><span class="line">正常的：public void annotation.<span class="module-access"><span class="module"><span class="identifier">User</span>.</span></span>set<span class="constructor">Id(<span class="params">int</span>)</span></span><br><span class="line">正常的：public <span class="built_in">int</span> annotation.<span class="module-access"><span class="module"><span class="identifier">User</span>.</span></span>get<span class="constructor">Age()</span></span><br><span class="line">正常的：public void annotation.<span class="module-access"><span class="module"><span class="identifier">User</span>.</span></span>set<span class="constructor">Age(<span class="params">int</span>)</span></span><br><span class="line">正常的：public final void java.lang.<span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>wait<span class="literal">()</span> throws java.lang.InterruptedException</span><br><span class="line">正常的：public final void java.lang.<span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>wait(long,<span class="built_in">int</span>) throws java.lang.InterruptedException</span><br><span class="line">正常的：public final native void java.lang.<span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>wait(long) throws java.lang.InterruptedException</span><br><span class="line">正常的：public boolean java.lang.<span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>equals(java.lang.Object)</span><br><span class="line">正常的：public native <span class="built_in">int</span> java.lang.<span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>hash<span class="constructor">Code()</span></span><br><span class="line">正常的：public final native java.lang.Class java.lang.<span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>get<span class="constructor">Class()</span></span><br><span class="line">正常的：public final native void java.lang.<span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>notify<span class="literal">()</span></span><br><span class="line">正常的：public final native void java.lang.<span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>notify<span class="constructor">All()</span></span><br><span class="line">getDeclaredMethods：public java.lang.String annotation.<span class="module-access"><span class="module"><span class="identifier">User</span>.</span></span><span class="keyword">to</span><span class="constructor">String()</span></span><br><span class="line">getDeclaredMethods：public java.lang.String annotation.<span class="module-access"><span class="module"><span class="identifier">User</span>.</span></span>get<span class="constructor">Name()</span></span><br><span class="line">getDeclaredMethods：public <span class="built_in">int</span> annotation.<span class="module-access"><span class="module"><span class="identifier">User</span>.</span></span>get<span class="constructor">Id()</span></span><br><span class="line">getDeclaredMethods：public void annotation.<span class="module-access"><span class="module"><span class="identifier">User</span>.</span></span>set<span class="constructor">Name(<span class="params">java</span>.<span class="params">lang</span>.String)</span></span><br><span class="line">getDeclaredMethods：public void annotation.<span class="module-access"><span class="module"><span class="identifier">User</span>.</span></span>set<span class="constructor">Id(<span class="params">int</span>)</span></span><br><span class="line">getDeclaredMethods：public <span class="built_in">int</span> annotation.<span class="module-access"><span class="module"><span class="identifier">User</span>.</span></span>get<span class="constructor">Age()</span></span><br><span class="line">getDeclaredMethods：public void annotation.<span class="module-access"><span class="module"><span class="identifier">User</span>.</span></span>set<span class="constructor">Age(<span class="params">int</span>)</span></span><br><span class="line">=================</span><br><span class="line">public java.lang.String annotation.<span class="module-access"><span class="module"><span class="identifier">User</span>.</span></span>get<span class="constructor">Name()</span></span><br><span class="line">public void annotation.<span class="module-access"><span class="module"><span class="identifier">User</span>.</span></span>set<span class="constructor">Name(<span class="params">java</span>.<span class="params">lang</span>.String)</span></span><br><span class="line">===============</span><br><span class="line">public annotation.<span class="constructor">User()</span></span><br><span class="line">public annotation.<span class="constructor">User(<span class="params">java</span>.<span class="params">lang</span>.String,<span class="params">int</span>,<span class="params">int</span>)</span></span><br><span class="line">getDeclaredConstructors：public annotation.<span class="constructor">User()</span></span><br><span class="line">getDeclaredConstructors：public annotation.<span class="constructor">User(<span class="params">java</span>.<span class="params">lang</span>.String,<span class="params">int</span>,<span class="params">int</span>)</span></span><br><span class="line">指定：public annotation.<span class="constructor">User(<span class="params">java</span>.<span class="params">lang</span>.String,<span class="params">int</span>,<span class="params">int</span>)</span></span><br></pre></td></tr></table></figure>

<h2 id="反射动态创建对象"><a href="#反射动态创建对象" class="headerlink" title="反射动态创建对象"></a>反射动态创建对象</h2><img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84.assets/image-20220818164604907.png" alt="image-20220818164604907" style="zoom:50%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line">        <span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态的创建对象，通过反射</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test09</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">        <span class="comment">// 获得Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;reflection.User&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造一个对象，本质上是调用User类的无参构造器，如果没有无参构造器，就会报错</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User)c1.newInstance();</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过构造器创建对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c1.getDeclaredConstructor(String.class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> (User)constructor.newInstance(<span class="string">&quot;郭霖&quot;</span>, <span class="number">001</span>, <span class="number">18</span>);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line"></span><br><span class="line">        user2.setName(<span class="string">&quot;guolin&quot;</span>);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反射操作注解"><a href="#反射操作注解" class="headerlink" title="反射操作注解"></a>反射操作注解</h2><img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84.assets/image-20220821210038519.png" alt="image-20220821210038519" style="zoom:50%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.deploy.security.ValidationState;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反射操作注解，了解ORM</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test12</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;reflection.Student2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射获取类的注解</span></span><br><span class="line">        Annotation[] annotations = c1.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得类的注解</span></span><br><span class="line">        <span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> (Table)c1.getAnnotation(Table.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> table.value();</span><br><span class="line">        System.out.println(value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得变量的注解</span></span><br><span class="line">        java.lang.reflect.<span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">annotation</span> <span class="operator">=</span> f.getAnnotation(Field.class);</span><br><span class="line">        System.out.println(annotation.columnName());</span><br><span class="line">        System.out.println(annotation.type());</span><br><span class="line">        System.out.println(annotation.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Table(&quot;db_student&quot;)</span></span><br><span class="line"><span class="comment">// 实体类，假设这是一个数据库</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student2</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(columnName = &quot;db_id&quot;, type = &quot;int&quot;, length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="meta">@Field(columnName = &quot;db_age&quot;, type = &quot;int&quot;, length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="meta">@Field(columnName = &quot;db_name&quot;, type = &quot;varchar&quot;, length = 3)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student2</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类名的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Table &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Field &#123;</span><br><span class="line">    String <span class="title function_">columnName</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">type</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2022/08/19/git/</url>
    <content><![CDATA[<h1 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h1><h2 id="在Windows上安装Git"><a href="#在Windows上安装Git" class="headerlink" title="在Windows上安装Git"></a>在Windows上安装Git</h2><p>在Windows上使用Git，可以从Git官网直接<a href="https://git-scm.com/downloads">下载安装程序</a>，然后按默认选项安装即可。</p>
<p>安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220811180348526.png" alt="image-20220811180348526"></p>
<span id="more"></span>

<p>安装完成后，还需要最后一步设置，在命令行输入：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">$ git config <span class="attr">--global</span> user<span class="selector-class">.name</span> <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">$ git config <span class="attr">--global</span> user<span class="selector-class">.email</span> <span class="string">&quot;email@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>
<h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>首先，选择一个合适的地方，创建一个空目录：</p>
<img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220811180738624.png" alt="image-20220811180738624" style="zoom:67%;" />

<p>通过<code>git init</code>命令把这个目录变成Git可以管理的仓库：</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220811180829226.png" alt="image-20220811180829226"></p>
<p>Git把仓库建好了，而且告诉你是一个空的仓库（empty Git repository）。</p>
<p>当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p>
<p>如果你没有看到<code>.git</code>目录，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见。</p>
<img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220811181017536.png" alt="image-20220811181017536" style="zoom: 67%;" />

<h2 id="文件添加到版本库"><a href="#文件添加到版本库" class="headerlink" title="文件添加到版本库"></a>文件添加到版本库</h2><p>首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p>
<p>不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，如果要真正使用版本控制系统，就要以纯文本方式编写文件。</p>
<p>因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。</p>
<p>不要使用Windows自带的<strong>记事本</strong>编辑任何文本文件，建议下载<a href="https://code.visualstudio.com/">Visual Studio Code</a>代替记事本。</p>
<p>现在我们编写一个<code>readme.txt</code>文件，内容如下：</p>
<figure class="highlight mercury"><table><tr><td class="code"><pre><span class="line">Git <span class="keyword">is</span> a version control system.</span><br><span class="line">Git <span class="keyword">is</span> free software.</span><br></pre></td></tr></table></figure>

<p>一定要放到<code>git22</code>目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。</p>
<p>把一个文件放到Git仓库只需要两步。</p>
<p>第一步，用命令<code>git add</code>告诉Git，把文件添加到仓库：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">add</span> readme.txt</span><br></pre></td></tr></table></figure>

<p>执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。</p>
<p>第二步，用命令<code>git commit</code>告诉Git，把文件提交到仓库：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git commit -m <span class="string">&quot;wrote a readme file&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220811181853568.png" alt="image-20220811181853568"></p>
<p>简单解释一下<code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p>
<p><code>git commit</code>命令执行成功后会告诉你，<code>1 file changed</code>：1个文件被改动（我们新添加的readme.txt文件）；<code>2 insertions</code>：插入了两行内容（readme.txt有两行内容）。</p>
<p>为什么Git添加文件需要<code>add</code>，<code>commit</code>一共两步呢？因为<code>commit</code>可以一次提交很多文件，所以你可以多次<code>add</code>不同的文件，比如：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">add</span> file1.txt</span><br><span class="line">$ git <span class="built_in">add</span> file2.txt file3.txt</span><br><span class="line">$ git commit -m <span class="string">&quot;add 3 files.&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="疑难解答"><a href="#疑难解答" class="headerlink" title="疑难解答"></a>疑难解答</h2><p>Q：输入<code>git add readme.txt</code>，得到错误：<code>fatal: not a git repository (or any of the parent directories)</code>。</p>
<p>A：Git命令必须在Git仓库目录内执行（<code>git init</code>除外），在仓库目录外执行是没有意义的。</p>
<p>Q：输入<code>git add readme.txt</code>，得到错误<code>fatal: pathspec &#39;readme.txt&#39; did not match any files</code>。</p>
<p>A：添加某个文件时，该文件必须在当前目录下存在，用<code>ls</code>或者<code>dir</code>命令查看当前目录的文件，看看文件是否存在，或者是否写错了文件名。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>现在总结一下今天学的两点内容：</p>
<p>初始化一个Git仓库，使用<code>git init</code>命令。</p>
<p>添加文件到Git仓库，分两步：</p>
<ol>
<li>使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</li>
<li>使用命令<code>git commit -m &lt;message&gt;</code>，完成。</li>
</ol>
<h1 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h1><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>现在，你已经学会了修改文件，然后把修改提交到Git版本库，现在，再练习一次，修改readme.txt文件如下：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Git is <span class="keyword">a</span> distributed <span class="built_in">version</span> control <span class="keyword">system</span>.</span><br><span class="line">Git is free software distributed under <span class="keyword">the</span> GPL.</span><br></pre></td></tr></table></figure>

<p>然后尝试提交：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git add readme.txt</span><br><span class="line"><span class="variable">$ </span>git commit -m <span class="string">&quot;append GPL&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220811182547291.png" alt="image-20220811182547291"></p>
<p>每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为<code>commit</code>。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个<code>commit</code>恢复，然后继续工作，而不是把几个月的工作成果全部丢失。</p>
<p>现在，我们回顾一下<code>readme.txt</code>文件一共有几个版本被提交到Git仓库里了。</p>
<p>在Git中，我们用<code>git log</code>命令查看：</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220811182812522.png" alt="image-20220811182812522"></p>
<p>你看到的一大串是<code>commit id</code>（版本号），和SVN不一样，Git的<code>commit id</code>不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示。</p>
<p>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上<code>--pretty=oneline</code>参数：</p>
<p>每提交一个新版本，实际上Git就会把它们自动串成一条时间线。</p>
<p>首先，Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p>
<p>现在，我们要把当前版本<code>append GPL</code>回退到上一个版本，就可以使用<code>git reset</code>命令：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard HEAD^</span></span><br></pre></td></tr></table></figure>

<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220811183026271.png" alt="image-20220811183026271"></p>
<p>看看<code>readme.txt</code>的内容是不是正确的？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> readme.txt</span><br></pre></td></tr></table></figure>

<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220811183106704.png" alt="image-20220811183106704"></p>
<p>果然被还原了。</p>
<p>我们用<code>git log</code>再看看现在版本库的状态：</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220811183340452.png" alt="image-20220811183340452"></p>
<p>最新的那个版本<code>append GPL</code>已经看不到了！好比你从21世纪坐时光穿梭机来到了19世纪，想再回去已经回不去了，肿么办？</p>
<p>办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个<code>append GPL</code>的<code>commit id</code>是<code>3b107...</code>，于是就可以指定回到未来的某个版本：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">reset</span> --hard <span class="number">3b107</span></span><br></pre></td></tr></table></figure>

<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220811183628548.png" alt="image-20220811183628548"></p>
<p>版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。</p>
<p>再小心翼翼地看看<code>readme.txt</code>的内容：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> readme.txt</span><br></pre></td></tr></table></figure>

<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220811183711942.png" alt="image-20220811183711942"></p>
<p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的<code>HEAD</code>指针，当你回退版本的时候，Git仅仅是把HEAD从指向<code>append GPL</code>。</p>
<p>然后顺便把工作区的文件更新了。所以你让<code>HEAD</code>指向哪个版本号，你就把当前版本定位在哪。</p>
<p>现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的<code>commit id</code>怎么办？</p>
<p>在Git中，总是有后悔药可以吃的。当你用<code>$ git reset --hard HEAD^</code>回退到<code>add distributed</code>版本时，再想恢复到<code>append GPL</code>，就必须找到<code>append GPL</code>的commit id。Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令：</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220811183950855.png" alt="image-20220811183950855"></p>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>现在总结一下：</p>
<ul>
<li><code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</li>
<li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</li>
<li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li>
</ul>
<h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><p>工作区（Working Directory）就是你在电脑里能看到的目录，比如我的<code>git22</code>文件夹就是一个工作区</p>
<p>版本库（Repository）工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。</p>
<p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p>
<img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220811184330538.png" alt="image-20220811184330538" style="zoom:67%;" />

<p>分支和<code>HEAD</code>的概念我们以后再讲。</p>
<p>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：</p>
<p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p>
<p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p>
<p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p>
<p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p>
<p>俗话说，实践出真知。现在，我们再练习一遍，先对<code>readme.txt</code>做个修改，比如加上一行内容：</p>
<figure class="highlight mercury"><table><tr><td class="code"><pre><span class="line">Git <span class="keyword">is</span> a distributed version control system.</span><br><span class="line">Git <span class="keyword">is</span> free software distributed under the GPL.</span><br><span class="line">Git has a <span class="keyword">mutable</span> index called stage.</span><br></pre></td></tr></table></figure>

<p>然后，在工作区新增一个<code>LICENSE</code>文本文件（内容随便写）。</p>
<p>先用<code>git status</code>查看一下状态：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> <span class="keyword">to</span> <span class="keyword">update</span> what will <span class="keyword">be</span> committed)</span><br><span class="line">bash: $: <span class="keyword">command</span> not found</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> <span class="keyword">to</span> discard <span class="keyword">changes</span> in working directory)</span><br><span class="line">        modified:   readme.txt</span><br><span class="line"></span><br><span class="line">Untracked <span class="keyword">files</span>:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> <span class="keyword">to</span> include in what will <span class="keyword">be</span> committed)</span><br><span class="line">        LICENSE</span><br><span class="line"></span><br><span class="line"><span class="keyword">no</span> <span class="keyword">changes</span> added <span class="keyword">to</span> commit (use <span class="string">&quot;git add&quot;</span> <span class="built_in">and</span>/<span class="built_in">or</span> <span class="string">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>Git非常清楚地告诉我们，<code>readme.txt</code>被修改了，而<code>LICENSE</code>还从来没有被添加过，所以它的状态是<code>Untracked</code>。</p>
<p>现在，使用两次命令<code>git add</code>，把<code>readme.txt</code>和<code>LICENSE</code>都添加后，用<code>git status</code>再查看一下：</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line"><span class="keyword">On</span> branch master</span><br><span class="line">Changes <span class="keyword">to</span> be committed:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> <span class="keyword">to</span> unstage)</span><br><span class="line">        <span class="keyword">new</span> <span class="keyword">file</span>:   LICENSE</span><br><span class="line">        modified:   readme.txt</span><br></pre></td></tr></table></figure>

<p>现在，暂存区的状态就变成这样了：</p>
<img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220811193042017.png" alt="image-20220811193042017" style="zoom:67%;" />

<p>所以，<code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git commit -m <span class="string">&quot;understand how stage works&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220811193137630.png" alt="image-20220811193137630"></p>
<p>一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line"><span class="keyword">On</span> branch master</span><br><span class="line"><span class="keyword">nothing</span> <span class="keyword">to</span> <span class="keyword">commit</span>, working tree clean</span><br></pre></td></tr></table></figure>

<p>现在版本库变成了这样，暂存区就没有任何内容了：</p>
<img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220811193224827.png" alt="image-20220811193224827" style="zoom:67%;" />

<h2 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h2><p>为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。</p>
<p>你会问，什么是修改？比如你新增了一行，这就是一个修改，删除了一行，也是一个修改，更改了某些字符，也是一个修改，删了一些又加了一些，也是一个修改，甚至创建一个新文件，也算一个修改。</p>
<p>为什么说Git管理的是修改，而不是文件呢？我们还是做实验。第一步，对readme.txt做一个修改，比如加一行内容：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">cat</span> readme.txt</span><br><span class="line">Git <span class="keyword">is</span> <span class="keyword">a</span> distributed <span class="keyword">version</span> control <span class="built_in">system</span>.</span><br><span class="line">Git <span class="keyword">is</span> free software distributed under the GPL.</span><br><span class="line">Git <span class="built_in">has</span> <span class="keyword">a</span> mutable <span class="built_in">index</span> called stage.</span><br><span class="line">Git tracks <span class="keyword">changes</span>.</span><br></pre></td></tr></table></figure>

<p>然后，添加：</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line"><span class="keyword">On</span> branch master</span><br><span class="line">Changes <span class="keyword">to</span> be committed:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> <span class="keyword">to</span> unstage)</span><br><span class="line">        modified:   readme.txt</span><br></pre></td></tr></table></figure>

<p>然后，再修改readme.txt：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">Git <span class="keyword">is</span> <span class="keyword">a</span> distributed <span class="keyword">version</span> control <span class="built_in">system</span>.</span><br><span class="line">Git <span class="keyword">is</span> free software distributed under the GPL.</span><br><span class="line">Git <span class="built_in">has</span> <span class="keyword">a</span> mutable <span class="built_in">index</span> called stage.</span><br><span class="line">Git tracks <span class="keyword">changes</span> of <span class="keyword">files</span>.</span><br></pre></td></tr></table></figure>

<p>提交：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;git tracks changes&quot;</span><br><span class="line"><span class="selector-attr">[master cc5e732]</span> git tracks changes</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">2</span> <span class="built_in">insertions</span>(+), <span class="number">1</span> <span class="built_in">deletion</span>(-)</span><br></pre></td></tr></table></figure>

<p>提交后，再看看状态：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> <span class="keyword">to</span> <span class="keyword">update</span> what will <span class="keyword">be</span> committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> <span class="keyword">to</span> discard <span class="keyword">changes</span> in working directory)</span><br><span class="line">        modified:   readme.txt</span><br><span class="line"></span><br><span class="line"><span class="keyword">no</span> <span class="keyword">changes</span> added <span class="keyword">to</span> commit (use <span class="string">&quot;git add&quot;</span> <span class="built_in">and</span>/<span class="built_in">or</span> <span class="string">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>咦，怎么第二次的修改没有被提交？</p>
<p>别激动，我们回顾一下操作过程：</p>
<p>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git commit</code></p>
<p>你看，我们前面讲了，Git管理的是修改，当你用<code>git add</code>命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，<code>git commit</code>只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">$ git diff HEAD -- readme.txt</span><br><span class="line"><span class="comment">diff --git a/readme.txt b/readme.txt</span></span><br><span class="line"><span class="comment">index db28b2c..9a8b341 100644</span></span><br><span class="line"><span class="comment">--- a/readme.txt</span></span><br><span class="line"><span class="comment">+++ b/readme.txt</span></span><br><span class="line"><span class="meta">@@ -1,4 +1,4 @@</span></span><br><span class="line"> Git is a distributed version control system.</span><br><span class="line"> Git is free software distributed under the GPL.</span><br><span class="line"> Git has a mutable index called stage.</span><br><span class="line"><span class="deletion">-Git tracks changes.</span></span><br><span class="line"><span class="addition">+Git tracks changes of files.</span></span><br></pre></td></tr></table></figure>

<p>可见，第二次修改确实没有被提交。</p>
<p>那怎么提交第二次修改呢？你可以继续<code>git add</code>再<code>git commit</code>，也可以别着急提交第一次修改，先<code>git add</code>第二次修改，再<code>git commit</code>，就相当于把两次修改合并后一块提交了：</p>
<p>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git add</code> -&gt; <code>git commit</code></p>
<p>好，现在，把第二次修改提交了，然后开始小结。</p>
<h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>现在，你又理解了Git是如何跟踪修改的，每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到<code>commit</code>中。</p>
<h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p>自然，你是不会犯错的。不过现在是凌晨两点，你正在赶一份工作报告，你在<code>readme.txt</code>中添加了一行：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">cat</span> readme.txt</span><br><span class="line">Git <span class="keyword">is</span> <span class="keyword">a</span> distributed <span class="keyword">version</span> control <span class="built_in">system</span>.</span><br><span class="line">Git <span class="keyword">is</span> free software distributed under the GPL.</span><br><span class="line">Git <span class="built_in">has</span> <span class="keyword">a</span> mutable <span class="built_in">index</span> called stage.</span><br><span class="line">Git tracks <span class="keyword">changes</span> of <span class="keyword">files</span>.</span><br><span class="line">My stupid boss still prefers SVN.</span><br></pre></td></tr></table></figure>

<p>在你准备提交前，一杯咖啡起了作用，你猛然发现了<code>stupid boss</code>可能会让你丢掉这个月的奖金！</p>
<p>既然错误发现得很及时，就可以很容易地纠正它。你可以删掉最后一行，手动把文件恢复到上一个版本的状态。如果用<code>git status</code>查看一下：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> <span class="keyword">to</span> <span class="keyword">update</span> what will <span class="keyword">be</span> committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> <span class="keyword">to</span> discard <span class="keyword">changes</span> in working directory)</span><br><span class="line">        modified:   readme.txt</span><br><span class="line"></span><br><span class="line"><span class="keyword">no</span> <span class="keyword">changes</span> added <span class="keyword">to</span> commit (use <span class="string">&quot;git add&quot;</span> <span class="built_in">and</span>/<span class="built_in">or</span> <span class="string">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>你可以发现，Git会告诉你，<code>git restore &lt;file&gt;</code>可以丢弃工作区的修改：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git restore readme.txt</span><br></pre></td></tr></table></figure>

<p><code>git checkout -- file</code>也可以丢弃工作区的修改。</p>
<p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p>
<p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>
<p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>
<p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p>
<p>现在，看看<code>readme.txt</code>的文件内容：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">cat</span> readme.txt</span><br><span class="line">Git <span class="keyword">is</span> <span class="keyword">a</span> distributed <span class="keyword">version</span> control <span class="built_in">system</span>.</span><br><span class="line">Git <span class="keyword">is</span> free software distributed under the GPL.</span><br><span class="line">Git <span class="built_in">has</span> <span class="keyword">a</span> mutable <span class="built_in">index</span> called stage.</span><br><span class="line">Git tracks <span class="keyword">changes</span> of <span class="keyword">files</span>.</span><br></pre></td></tr></table></figure>

<p>文件内容果然复原了。</p>
<p><code>git checkout -- file</code>命令中的<code>--</code>很重要，没有<code>--</code>，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到<code>git checkout</code>命令。</p>
<p>现在假定是凌晨3点，你不但写了一些胡话，还<code>git add</code>到暂存区了：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">cat</span> readme.txt</span><br><span class="line">Git <span class="keyword">is</span> <span class="keyword">a</span> distributed <span class="keyword">version</span> control <span class="built_in">system</span>.</span><br><span class="line">Git <span class="keyword">is</span> free software distributed under the GPL.</span><br><span class="line">Git <span class="built_in">has</span> <span class="keyword">a</span> mutable <span class="built_in">index</span> called stage.</span><br><span class="line">Git tracks <span class="keyword">changes</span> of <span class="keyword">files</span>.</span><br><span class="line">My stupid boss still prefers SVN.</span><br><span class="line"></span><br><span class="line">$ git <span class="built_in">add</span> readme.txt</span><br></pre></td></tr></table></figure>

<p>庆幸的是，在<code>commit</code>之前，你发现了这个问题。用<code>git status</code>查看一下，修改只是添加到了暂存区，还没有提交：</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line"><span class="keyword">On</span> branch master</span><br><span class="line">Changes <span class="keyword">to</span> be committed:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> <span class="keyword">to</span> unstage)</span><br><span class="line">        modified:   readme.txt</span><br></pre></td></tr></table></figure>

<p>Git同样告诉我们，用命令<code>git restore --staged &lt;file&gt;</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区：</p>
<p>用命令<code>git reset HEAD &lt;file&gt;</code>也可以把暂存区的修改撤销掉（unstage），重新放回工作区：</p>
<p><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用<code>HEAD</code>时，表示最新的版本。</p>
<p>再用<code>git status</code>查看一下，现在暂存区是干净的，工作区有修改：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> <span class="keyword">to</span> <span class="keyword">update</span> what will <span class="keyword">be</span> committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> <span class="keyword">to</span> discard <span class="keyword">changes</span> in working directory)</span><br><span class="line">        modified:   readme.txt</span><br><span class="line"></span><br><span class="line"><span class="keyword">no</span> <span class="keyword">changes</span> added <span class="keyword">to</span> commit (use <span class="string">&quot;git add&quot;</span> <span class="built_in">and</span>/<span class="built_in">or</span> <span class="string">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>还记得如何丢弃工作区的修改吗？</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">$ git checkout <span class="comment">-- readme.txt</span></span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line"><span class="keyword">On</span> branch master</span><br><span class="line"><span class="keyword">nothing</span> <span class="keyword">to</span> <span class="keyword">commit</span>, working tree clean</span><br></pre></td></tr></table></figure>

<p>现在，假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192">版本回退</a>一节吗？可以回退到上一个版本。不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程。还记得Git是分布式版本控制系统吗？我们后面会讲到远程版本库，一旦你把<code>stupid boss</code>提交推送到远程版本库，你就真的惨了……</p>
<h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><p>又到了小结时间。</p>
<p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p>
<p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</p>
<p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>在Git中，删除也是一个修改操作，我们实战一下，先添加一个新文件<code>test.txt</code>到Git并且提交：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git add test.txt</span><br><span class="line"><span class="variable">$ </span>git commit -m <span class="string">&quot;add test.txt&quot;</span></span><br></pre></td></tr></table></figure>

<p>一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用<code>rm</code>命令删了：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">rm</span> test.txt</span><br></pre></td></tr></table></figure>

<p>这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，<code>git status</code>命令会立刻告诉你哪些文件被删除了：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line"><span class="keyword">On</span> branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">&quot;git add/rm &lt;file&gt;...&quot;</span> to <span class="keyword">update</span> what will be committed)</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to <span class="keyword">discard</span> changes <span class="keyword">in</span> working directory)</span><br><span class="line">        deleted:    <span class="keyword">test</span>.txt</span><br><span class="line"></span><br><span class="line"><span class="keyword">no</span> changes added to commit (<span class="keyword">use</span> <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code>：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">$ git <span class="keyword">rm</span> <span class="keyword">test</span>.txt</span><br><span class="line"><span class="keyword">rm</span> &#x27;<span class="keyword">test</span>.txt&#x27;</span><br><span class="line"></span><br><span class="line">$ git commit -<span class="keyword">m</span> <span class="string">&quot;remove test.txt&quot;</span></span><br><span class="line">[master d46f35e] remove <span class="keyword">test</span>.txt</span><br><span class="line"> 1 <span class="keyword">file</span> changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 <span class="keyword">test</span>.txt</span><br></pre></td></tr></table></figure>

<p>现在，文件就从版本库中被删除了。</p>
<p>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">$ git checkout <span class="comment">-- test.txt</span></span><br></pre></td></tr></table></figure>

<p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p>
<h3 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h3><p>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失<strong>最近一次提交后你修改的内容</strong>。</p>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><h2 id="推送仓库"><a href="#推送仓库" class="headerlink" title="推送仓库"></a>推送仓库</h2><p>现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。</p>
<p>首先，登陆GitHub，创建一个新的仓库，与本地库名相同：</p>
<p>目前，在GitHub上的这个仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p>
<p>现在，我们根据GitHub的提示，在本地的仓库下运行命令：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">git remote <span class="keyword">add</span><span class="language-bash"> origin git@github.com:guolinac/springboot_Luckymoney</span></span><br></pre></td></tr></table></figure>

<p>请千万注意，把上面的<code>guolinac</code>替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。</p>
<p>添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。</p>
<p>下一步，就可以把本地库的所有内容推送到远程库上：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>

<p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p>
<p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>
<blockquote>
<p>注意将本地的SSH同步到Github上哦~！</p>
</blockquote>
<p>从现在起，只要本地作了提交，就可以通过命令：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>

<p>把本地<code>master</code>分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！</p>
<h2 id="删除仓库"><a href="#删除仓库" class="headerlink" title="删除仓库"></a>删除仓库</h2><p>如果添加的时候地址写错了，或者就是想删除远程库，可以用<code>git remote rm &lt;name&gt;</code>命令。使用前，建议先用<code>git remote -v</code>查看远程库信息：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  git<span class="keyword">@github</span>.<span class="attribute">com</span>:guolinac/DIY_Cache.git (fetch)</span><br><span class="line">origin  git<span class="keyword">@github</span>.<span class="attribute">com</span>:guolinac/DIY_Cache.git (push)</span><br></pre></td></tr></table></figure>

<p>然后，根据名字删除，比如删除<code>origin</code>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> git remote <span class="built_in">rm</span> origin</span><br></pre></td></tr></table></figure>

<p>此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。要真正删除远程库，需要登录到GitHub，在后台页面找到删除按钮再删除。</p>
<h2 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h2><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p>
<p>关联一个远程库时必须给远程库指定一个名字，<code>origin</code>是默认习惯命名；</p>
<p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p>
<p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p>
<p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p>
<h1 id="Git分支，推送，忽略本地变化"><a href="#Git分支，推送，忽略本地变化" class="headerlink" title="Git分支，推送，忽略本地变化"></a>Git分支，推送，忽略本地变化</h1><p>创建和使用git仓库</p>
<p>git初始化</p>
<p>.gitignore文件配置：匹配到的文件不推送到git仓库上，也不会检查到本地的变化</p>
<p>添加更新文件</p>
<p>推送到远程git仓库</p>
<p>创建及切换分支</p>
<p>注：前提是安装git并配置git的ssh，否则在pull和push的时候会提示无权限</p>
<h2 id="github创建仓库"><a href="#github创建仓库" class="headerlink" title="github创建仓库"></a>github创建仓库</h2><img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220913003106450.png" alt="image-20220913003106450" style="zoom:50%;" />

<img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220913003210731.png" alt="image-20220913003210731" style="zoom:50%;" />

<h2 id="初始化git"><a href="#初始化git" class="headerlink" title="初始化git"></a>初始化git</h2><p>创建文件type nul&gt;README.md</p>
<p>写入mmall_learning</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220913003731177.png" alt="image-20220913003731177"></p>
<p>.gitignore文件配置：创建文件type nul&gt;.gitignore</p>
<p>匹配到的文件不推送到git仓库上，也不会检查到本地的变化</p>
<p>在里面增加：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">*<span class="string">.class</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#package file</span></span><br><span class="line"></span><br><span class="line">*<span class="string">.war</span></span><br><span class="line">*<span class="string">.ear</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#kdiff3 ignore</span></span><br><span class="line">*<span class="string">.orig</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#maven ignore</span></span><br><span class="line">target/</span><br><span class="line"></span><br><span class="line"><span class="comment">#eclipse ignore</span></span><br><span class="line"><span class="string">.settings/</span></span><br><span class="line"><span class="string">.project</span></span><br><span class="line"><span class="string">.classpath</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#idea</span></span><br><span class="line"><span class="string">.idea/</span></span><br><span class="line"><span class="string">/idea/</span></span><br><span class="line">*<span class="string">.ipr</span></span><br><span class="line">*<span class="string">.iml</span></span><br><span class="line">*<span class="string">.iws</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#temp file</span></span><br><span class="line"></span><br><span class="line">*<span class="string">.log</span></span><br><span class="line">*<span class="string">.cache</span></span><br><span class="line">*<span class="string">.diff</span></span><br><span class="line">*<span class="string">.patch</span></span><br><span class="line">*<span class="string">.tmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#system ignore</span></span><br><span class="line"><span class="string">.DS_Store</span></span><br><span class="line">Thumbs.db</span><br></pre></td></tr></table></figure>

<h2 id="简单命令"><a href="#简单命令" class="headerlink" title="简单命令"></a>简单命令</h2><p>初始化：git init</p>
<p>查看变更：git status</p>
<p>文件添加到仓库：git add .</p>
<p>文件提交到版本库：git commit -m “first commit init project”</p>
<h2 id="提交到远程仓库"><a href="#提交到远程仓库" class="headerlink" title="提交到远程仓库"></a>提交到远程仓库</h2><p>绑定到远程仓库：git remote add origin <a href="mailto:&#x67;&#105;&#116;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#x6d;">&#x67;&#105;&#116;&#64;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#x6d;</a>:guolinac&#x2F;mmall_learning.git</p>
<p>查看分支：git branch</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">D:\project_git\mmall&gt;git branch</span><br><span class="line"><span class="bullet">* </span>master</span><br></pre></td></tr></table></figure>

<p>把本地改动推送到远程的master上：git push -u origin master</p>
<p>取回远程主机某个分支的更新，再与本地的指定分支合并：git pull</p>
<p><strong>强制推送，直接覆盖远程的master</strong>：git push -u -f origin master</p>
<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>我们回到github，可以看到上方已经出现“master had recent pushes less than a minute ago”字样</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220913010453537.png" alt="image-20220913010453537"></p>
<p>切换分支：点击main的下拉框，查看master分支</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220913010512818.png" alt="image-20220913010512818"></p>
<p>已经是最新版：</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220913010545199.png" alt="image-20220913010545199"></p>
<h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><p><strong>分支开发，主干发布</strong></p>
<p>查看本地分支：git branch</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">D:\project_git\mmall&gt;git branch</span><br><span class="line"><span class="bullet">* </span>master</span><br></pre></td></tr></table></figure>

<p>查看远程分支：git branch -r</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\project_git\mmall&gt;git branch -r</span><br><span class="line">  origin/main</span><br><span class="line">  origin/master</span><br></pre></td></tr></table></figure>

<h2 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h2><p>在origin&#x2F;master的基础上，生成v1.0的分支</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> checkout -<span class="keyword">b</span> <span class="built_in">v1</span>.<span class="number">0</span> origin/master</span><br></pre></td></tr></table></figure>

<p>git branch</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">D:\project_git\mmall&gt;git branch</span><br><span class="line">  <span class="keyword">master</span></span><br><span class="line"><span class="title">* v1</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>将这个分支推送到远程：git push origin HEAD -u</p>
<p>此时github上面已经有三个分支了</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220913011148989.png" alt="image-20220913011148989"></p>
<p>v1.0的代码就是从master这个分支的基础上创建的</p>
<h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git checkout <span class="literal">master</span></span><br></pre></td></tr></table></figure>

<h2 id="拉取分支代码"><a href="#拉取分支代码" class="headerlink" title="拉取分支代码"></a>拉取分支代码</h2><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git fetch <span class="built_in">origin</span> develop #可以使用git fetch <span class="built_in">origin</span> 拉取全部</span><br></pre></td></tr></table></figure>

<p>develop为我的分支名字，根据自己的分支决定。</p>
<p>有的同学可能会用git pull，git pull &#x3D; git fetch + git merge，因为pull拉取会合并本地文件，可能会导致冲突。</p>
<h1 id="Github仓库master分支到main分支迁移指南"><a href="#Github仓库master分支到main分支迁移指南" class="headerlink" title="Github仓库master分支到main分支迁移指南"></a>Github仓库master分支到main分支迁移指南</h1><p>2020年10月1日后，<code>Github</code>会将所有新建的仓库的默认分支从<code>master</code>修改为<code>main</code>，这就导致了一些旧仓库主分支是<code>master</code>，新仓库主分支是<code>main</code>的问题，这在有时候会带来一些麻烦，因此这里提供一种方案将旧仓库的<code>master</code>分支迁移到<code>main</code>分支</p>
<h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>四步：</p>
<ul>
<li>克隆原仓库</li>
<li>创建并推送<code>main</code>分支</li>
<li>修改默认分支</li>
<li>删除<code>master</code>分支</li>
</ul>
<h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><p>首先克隆一份原仓库到本地进行操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> xxxxxxx.git</span><br></pre></td></tr></table></figure>

<h2 id="创建并推送main"><a href="#创建并推送main" class="headerlink" title="创建并推送main"></a>创建并推送<code>main</code></h2><p>创建并切换到<code>main</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b main</span><br></pre></td></tr></table></figure>

<p>推送<code>main</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin main</span><br></pre></td></tr></table></figure>

<h2 id="修改默认分支"><a href="#修改默认分支" class="headerlink" title="修改默认分支"></a>修改默认分支</h2><p>这一步需要到<code>Github</code>中进行操作</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220914225555642.png" alt="image-20220914225555642"></p>
<h2 id="删除master"><a href="#删除master" class="headerlink" title="删除master"></a>删除<code>master</code></h2><p>删除本地<code>master</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d master</span><br></pre></td></tr></table></figure>

<p>删除远程<code>master</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin :master</span><br></pre></td></tr></table></figure>

<p>这样就算成功迁移到<code>main</code>分支了</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在仓库做一些修改后进行提交：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add -A </span><br><span class="line">git commit -m <span class="string">&quot;test main branch&quot;</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure>

<p>可以看到<code>Github</code>上会有对应更新</p>
<h1 id="修改之前的注释"><a href="#修改之前的注释" class="headerlink" title="修改之前的注释"></a>修改之前的注释</h1><h2 id="修改最后一次注释"><a href="#修改最后一次注释" class="headerlink" title="修改最后一次注释"></a>修改最后一次注释</h2><p>如果你只想修改最后一次注释</p>
<p><code>git commit --amend</code><br>出现有注释的界面（你的注释应该显示在第一行）， 输入<code>i</code>进入修改模式，修改好注释后，按<code>Esc</code>键 退出编辑模式，输入<code>:wq</code>保存并退出。ok，修改完成。</p>
<h2 id="修改之前的某次注释"><a href="#修改之前的某次注释" class="headerlink" title="修改之前的某次注释"></a>修改之前的某次注释</h2><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220819141238224.png" alt="image-20220819141238224"></p>
<p>输入：<br><code>git rebase -i HEAD~2</code><br>最后的数字2指的是显示到倒数第几次 比如这个输入的2就会显示倒数的两次注释</p>
<p>你想修改哪条注释 就把哪条注释前面的<code>pick</code>换成<code>edit</code>。方法就是上面说的编辑方式：<code>i</code>—编辑，把<code>pick</code>换成<code>edit</code>—<code>Esc</code>—<code>:wq</code></p>
<p>然后：（接下来的步骤Terminal会提示）<br><code>git commit --amend</code></p>
<p>修改注释，保存并退出后，输入：<br><code>git rebase --continue</code></p>
<h2 id="已经将代码push到远程仓库"><a href="#已经将代码push到远程仓库" class="headerlink" title="已经将代码push到远程仓库"></a>已经将代码push到远程仓库</h2><p>首先，你把最新的版本从远程仓库先pull下来，修改的方法都如上，最后修改完成后，强制push到远程仓库：<br> <code>git push --force origin master</code><br> <strong>注：很重要的一点是，你最好保证在你强制push之前没有人提交代码，如果在你push之前有人提交了新的代码到远程仓库，然后你又强制push，那么会被你的强制更新覆盖！！！</strong></p>
<h2 id="修改第一次提交的注释"><a href="#修改第一次提交的注释" class="headerlink" title="修改第一次提交的注释"></a>修改第一次提交的注释</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git rebase -<span class="selector-tag">i</span> <span class="attr">--root</span></span><br></pre></td></tr></table></figure>

<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220819141330416.png" alt="image-20220819141330416"></p>
<p>按 i 或者 a 编辑，你想修改哪条注释 就把哪条注释前面的<code>pick</code>换成<code>edit</code>，然后<code>edit</code>—<code>Esc</code>—<code>:wq</code></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220819141432303.png" alt="image-20220819141432303"></p>
<p>然后：（接下来的步骤Terminal会提示）<br><code>git commit --amend</code></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220819141539249.png" alt="image-20220819141539249"></p>
<p>修改注释，保存并退出后，输入：<br><code>git rebase --continue</code></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220819141624921.png" alt="image-20220819141624921"></p>
<p>查看是否成功</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220819141704558.png" alt="image-20220819141704558"></p>
<p>成功</p>
<p>推送到github，强制推送命令</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> --force <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>

<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220819141837076.png" alt="image-20220819141837076"></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/git.assets/image-20220819141814460.png" alt="image-20220819141814460"></p>
<p>修改成功</p>
<h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><h2 id="Git崩溃，锁未释放怎么办"><a href="#Git崩溃，锁未释放怎么办" class="headerlink" title="Git崩溃，锁未释放怎么办"></a>Git崩溃，锁未释放怎么办</h2><p>操作任何git命令，都提示该内容。</p>
<p>Another git process semms to be running in this repository, e.g. an editor opened by ‘git commit’. Please make sure all processes are terminated then try again. If it still fails, a git process remove the file manually to continue…</p>
<blockquote>
<p>另一个git进程似乎正在这个存储库中运行，例如。 “git commit”打开的编辑器。请确保所有流程 终止，然后重试。如果仍然失败，git进程 可能已在此存储库中崩溃： 手动删除文件以继续。</p>
</blockquote>
<p>原因在于Git在使用过程中遭遇了奔溃，部分被上锁资源没有被释放导致的。</p>
<p>解决方案：</p>
<p>进入.git文件夹，手动将 .git 文件中 index.lock 删除即可（rm -rf index.lock）</p>
<h2 id="push到远程报错"><a href="#push到远程报错" class="headerlink" title="push到远程报错"></a>push到远程报错</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">fatal: unable <span class="keyword">to</span> <span class="keyword">access</span> <span class="string">&#x27;https://github.com/guolinac/python_web_crawler.git/&#x27;</span>: Failed <span class="keyword">to</span> <span class="keyword">connect</span> <span class="keyword">to</span> github.com port <span class="number">443</span> <span class="keyword">after</span> <span class="number">21185</span> ms: Timed <span class="keyword">out</span></span><br></pre></td></tr></table></figure>

<p>网上找了下遇到类似情况的大家的处理方案，有的说是由于网络不稳定造成的，个人觉得有这方面的原因，因为github提交的时候这个错误不是一定会出来的，为了稳妥起见还是把ssl验证关了方便些</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git config <span class="attr">--global</span> http<span class="selector-class">.sslVerify</span> <span class="string">&quot;false&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="git-log无法退出"><a href="#git-log无法退出" class="headerlink" title="git log无法退出"></a>git log无法退出</h2><p>使用git log之后无法回到主页面,最后只能暴力关闭git bash. 解决方法其实很简单,输入字母Q即可退出</p>
<h2 id="git-push失败，-提示-rejected-master-＞-master-fetch-first-error-failed-to-push-some-refs"><a href="#git-push失败，-提示-rejected-master-＞-master-fetch-first-error-failed-to-push-some-refs" class="headerlink" title="git push失败， 提示! [rejected] master -＞ master (fetch first)error: failed to push some refs"></a>git push失败， 提示! [rejected] master -＞ master (fetch first)error: failed to push some refs</h2><h3 id="第一次提交项目到一个新的仓库"><a href="#第一次提交项目到一个新的仓库" class="headerlink" title="第一次提交项目到一个新的仓库"></a>第一次提交项目到一个新的仓库</h3><p>我们按照如下的步骤上传了一个项目到仓库的时候，是可以成功的：</p>
<p>1、git init 初始化</p>
<p>2、git add .  将当前目录下修改的所有代码从工作区添加到暂存区</p>
<p>3、git commit -m  [‘注释’]  将缓存区内容添加到本地仓库</p>
<p>4、git remote add origin 仓库地址  将本地仓库与远程仓库连接起来</p>
<p>5、git push origin master 将项目推送到远程仓库的master分支上</p>
<h3 id="第二次将一个新的项目在提交到仓库"><a href="#第二次将一个新的项目在提交到仓库" class="headerlink" title="第二次将一个新的项目在提交到仓库"></a>第二次将一个新的项目在提交到仓库</h3><p>此时，我们继续按照上面的步骤提交项目，第五步的时候就会出现一个错误！！</p>
<p>git push失败， 提示! [rejected] master -＞ master (fetch first)error: failed to push some refs</p>
<p><strong>出现错误的主要原因是gitee中的README.md文件不在本地代码目录中</strong></p>
<p>此时我们要执行<strong>git pull –rebase origin master</strong>命令将README.md拉到本地，</p>
<p>然后执行git push origin master就可以成功了</p>
<h2 id="远程仓库已存在"><a href="#远程仓库已存在" class="headerlink" title="远程仓库已存在"></a>远程仓库已存在</h2><p>如果你clone下来一个别人的仓库，在此基础上完成你的代码，推送到自己的仓库可能遇到如下问题：<br>error: remote origin already exists.表示远程仓库已存在。<br>因此你要进行以下操作：<br>1、先输入git remote rm origin 删除关联的origin的远程库<br>2、关联自己的仓库 git remote add origin <a href="https://gitee.com/xxxxxx.git">https://gitee.com/xxxxxx.git</a><br>3、最后git push origin master，这样就推送到自己的仓库了。</p>
<h2 id="Git问题Everything-up-to-date正确解决方法"><a href="#Git问题Everything-up-to-date正确解决方法" class="headerlink" title="Git问题Everything up-to-date正确解决方法"></a>Git问题Everything up-to-date正确解决方法</h2><p>先说说出现这个问题的原因：git提交改动到缓存，要push的时候不会将本地所有的分支都push掉，所以出现这个问题。那么我们就需要新建分支提交改动然后合并分支。</p>
<p>1.先创建一个新的分支提交改动</p>
<p>$ git branch newbranch</p>
<p>2.检查这条命令是否创建成功</p>
<p>$ git branch</p>
<p>这时终端会输出：</p>
<p>newbranch</p>
<p>*master</p>
<p>这样就创建成功了，前面的*代表的是当前你所在的工作分支，接下来就要切换工作分支。</p>
<p>3.git checkout newbranch</p>
<p>4.然后将你的改动提交到新的分支上</p>
<p>$ git add XXX</p>
<p>$ git commit -m “XXX”</p>
<p>此时可以$ git status 检查下提交情况。如果提交成功，我们接下来就要回主分支了，$ git checkout master</p>
<p>5.我们将新分支提交的改动合并到主分支上</p>
<p>$ git merge newbranch</p>
<p>合并分支可能产生冲突这是正常的，虽然我们这是新建的分支不会产生冲突，但还是在这里记录下。可以用</p>
<p>$ git diff 来查看产生冲突的文件，然后做对应的修改再提交一次就可以了。</p>
<p>6.我们的问题解决了，接下来就可以push代码了</p>
<p>$ git push -u origin master</p>
<p>7.最后，新建分支的朋友别忘了删除分支</p>
<p>$ git branch -D newbranch</p>
<p>如果想保留分支只是想删除已经合并的部分只要把大写的D改成小写的d就行了。</p>
]]></content>
      <categories>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言</title>
    <url>/2022/08/06/Go%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<p>没有”对象”，没有继承多态，没有泛型，没有try&#x2F;catch</p>
<p>有接口，函数式编程，CSP并发模型（goroutine+channel）</p>
<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h2><p>Go语言没有全局变量的说法，定义在包内(函数外面)的变量叫包内变量</p>
<p>不赋初值，默认int是0，string是空串</p>
<p>不写type，Go也可以自动推断类型</p>
<p>简写，函数内可以把var用 :&#x3D; 代替，用来定义变量</p>
<span id="more"></span>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Go语言没有全局变量的说法，定义在包内(函数外面)的变量叫包内变量</span></span><br><span class="line"><span class="keyword">var</span> aa = <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> ss = <span class="string">&quot;kkk&quot;</span></span><br><span class="line"><span class="keyword">var</span> bb = <span class="literal">true</span> <span class="comment">// bb := true 函数外面定义变量不能用 :=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以这么定义</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	aaa = <span class="number">33</span></span><br><span class="line">	sss = <span class="string">&quot;kkkk&quot;</span></span><br><span class="line">	bbb = <span class="literal">true</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 不赋初值，默认int是0，string是空串</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">variableZeroValue</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a <span class="type">int</span></span><br><span class="line">	<span class="keyword">var</span> s <span class="type">string</span></span><br><span class="line">	fmt.Println(a, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给变量赋初值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">variableInitialValue</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a, b <span class="type">int</span> = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">	<span class="keyword">var</span> s <span class="type">string</span> = <span class="string">&quot;abc&quot;</span></span><br><span class="line">	fmt.Println(a, b, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不写type，Go也可以自动推断类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">variableTypeDeduction</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a, b, c, s = <span class="number">3</span>, <span class="number">4</span>, <span class="literal">true</span>, <span class="string">&quot;def&quot;</span></span><br><span class="line">	fmt.Println(a, b, c, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数内可以把var用 := 代替，用来定义变量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">variableShorter</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a, b, c, s :=  <span class="number">3</span>, <span class="number">4</span>, <span class="literal">true</span>, <span class="string">&quot;def&quot;</span></span><br><span class="line">	b = <span class="number">5</span></span><br><span class="line">	fmt.Println(a, b, c, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">	variableZeroValue()</span><br><span class="line">	variableInitialValue()</span><br><span class="line">	variableTypeDeduction()</span><br><span class="line">	variableShorter()</span><br><span class="line">	fmt.Println(aa, ss, bb)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="内建变量类型"><a href="#内建变量类型" class="headerlink" title="内建变量类型"></a>内建变量类型</h2><p>布尔类型8位，string类型string是8位字节的集合</p>
<p>bool,string</p>
<p>加u就是无符号整数，不加就是有符号整数；一种是规定长度的，一种是不规定长度的，不规定长度的int，其长度根据操作系统来，操作系统是多少位，他的长度就是多少位</p>
<p>(u)int,(u)int8,(u)int16,(u)int32,(u)int64</p>
<p>uintptr是指针，指针的长度也是根据操作系统来的</p>
<p>uintptr</p>
<p>byte是8位的；rune是字符型，长度是32位的，也就是其他语言的char</p>
<p>byte,rune</p>
<p>浮点数类型，复数类型</p>
<p>float32,float64,complex64,complex128</p>
<h3 id="验证欧拉公式"><a href="#验证欧拉公式" class="headerlink" title="验证欧拉公式"></a>验证欧拉公式</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math&quot;</span></span><br><span class="line">	<span class="string">&quot;math/cmplx&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证欧拉公式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">euler</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(cmplx.Pow(math.E, <span class="number">1i</span> * math.Pi) + <span class="number">1</span>)</span><br><span class="line">	fmt.Println(cmplx.Exp(<span class="number">1i</span> * math.Pi) + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	c := <span class="number">3</span> + <span class="number">4i</span></span><br><span class="line">	<span class="comment">// 复数的库cmplx，取绝对值</span></span><br><span class="line">	fmt.Println(cmplx.Abs(c))</span><br><span class="line">	euler()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>go语言类型转换是强制的</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">triangle</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a, b <span class="type">int</span> = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">	<span class="keyword">var</span> c <span class="type">int</span></span><br><span class="line">	c = <span class="type">int</span>(math.Sqrt(<span class="type">float64</span>(a * a + b * b)))</span><br><span class="line">	fmt.Println(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	triangle()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量一定要赋值</p>
<p>用const定义常量，而且go语言常量命名不用大写const filename string</p>
<p>const数值可作为各种类型使用</p>
<p>const a, b &#x3D; 3, 4，又可以是float又可以是int</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">consts</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> filename <span class="type">string</span> = <span class="string">&quot;abc.txt&quot;</span></span><br><span class="line">	<span class="comment">// 常量可以不定义类型，a，b的类型就是不确定的，又可以是float又可以是int</span></span><br><span class="line">	<span class="keyword">const</span> a, b = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">	<span class="keyword">var</span> c <span class="type">int</span></span><br><span class="line">	c = <span class="type">int</span>(math.Sqrt(a * a + b * b))</span><br><span class="line">	fmt.Println(filename, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	consts()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="iota自增"><a href="#iota自增" class="headerlink" title="iota自增"></a>iota自增</h3><p>一组const的定义，可以用iota表示自增</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">enums</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span>(</span><br><span class="line">		cpp = <span class="literal">iota</span></span><br><span class="line">		java</span><br><span class="line">		python</span><br><span class="line">		golang</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	fmt.Println(cpp, java, python, golang)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	enums()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>iota还可以作为自增值的种子</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">enums</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span>(</span><br><span class="line">		b = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">		kb</span><br><span class="line">		mb</span><br><span class="line">		gb</span><br><span class="line">		tb</span><br><span class="line">	)</span><br><span class="line">	fmt.Println(b, kb, mb, gb, tb)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	enums()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>go没有枚举类型，用常量表示枚举</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">enums</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span>(</span><br><span class="line">		cpp = <span class="number">0</span></span><br><span class="line">		java = <span class="number">1</span></span><br><span class="line">		python = <span class="number">2</span></span><br><span class="line">		golang = <span class="number">3</span></span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	fmt.Println(cpp, java, python, golang)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	enums()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><h3 id="if-x2F-else"><a href="#if-x2F-else" class="headerlink" title="if&#x2F;else"></a>if&#x2F;else</h3><p>第一种方式：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> filename = <span class="string">&quot;abc.txt&quot;</span></span><br><span class="line">	contents, err := ioutil.ReadFile(filename)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, contents)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二种方式：</p>
<p>if的条件里可以赋值</p>
<p>if的条件里赋值的变量作用域就在这个if语句里</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> filename = <span class="string">&quot;abc.txt&quot;</span></span><br><span class="line">	<span class="keyword">if</span> contents, err := ioutil.ReadFile(filename); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, contents)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>switch会自动break，除非使用fallthrough</p>
<p>switch后可以没有表达式</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">grade</span><span class="params">(score <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	g := <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">switch</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> score &lt; <span class="number">0</span> || score &gt; <span class="number">100</span>:</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(</span><br><span class="line">			<span class="string">&quot;Wrong score: %d&quot;</span>, score))</span><br><span class="line">	<span class="keyword">case</span> score &lt; <span class="number">60</span>:</span><br><span class="line">		g = <span class="string">&quot;F&quot;</span></span><br><span class="line">	<span class="keyword">case</span> score &lt; <span class="number">80</span>:</span><br><span class="line">		g = <span class="string">&quot;C&quot;</span></span><br><span class="line">	<span class="keyword">case</span> score &lt; <span class="number">90</span>:</span><br><span class="line">		g = <span class="string">&quot;B&quot;</span></span><br><span class="line">	<span class="keyword">case</span> score &lt;= <span class="number">100</span>:</span><br><span class="line">		g = <span class="string">&quot;A&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> g</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(</span><br><span class="line">		grade(<span class="number">0</span>),</span><br><span class="line">		grade(<span class="number">59</span>),</span><br><span class="line">		grade(<span class="number">60</span>),</span><br><span class="line">		grade(<span class="number">82</span>),</span><br><span class="line">		grade(<span class="number">99</span>),</span><br><span class="line">		grade(<span class="number">100</span>),</span><br><span class="line">		grade(<span class="number">101</span>),</span><br><span class="line">		)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>省略起始条件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convertToBin</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	result := <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">for</span> ; n &gt; <span class="number">0</span>; n /= <span class="number">2</span> &#123;</span><br><span class="line">		lsb := n % <span class="number">2</span></span><br><span class="line">		result = strconv.Itoa(lsb) + result</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(</span><br><span class="line">		convertToBin(<span class="number">5</span>),</span><br><span class="line">		convertToBin(<span class="number">13</span>),</span><br><span class="line">		)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>省略递增条件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bufio&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printFile</span><span class="params">(filename <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	file, err := os.Open(filename)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	scanner := bufio.NewScanner(file)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line">		fmt.Println(scanner.Text())</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	printFile(<span class="string">&quot;abc.txt&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>省略终止条件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">forever</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	forever()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="多个返回值"><a href="#多个返回值" class="headerlink" title="多个返回值"></a>多个返回值</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">div</span><span class="params">(a, b <span class="type">int</span>)</span></span> (q, r <span class="type">int</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> a / b, a % b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(div(<span class="number">13</span>, <span class="number">3</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多个返回值通常用于返回error</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">eval</span><span class="params">(a, b <span class="type">int</span>, op <span class="type">string</span>)</span></span> (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">switch</span> op &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">		<span class="keyword">return</span> a + b, <span class="literal">nil</span></span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">		<span class="keyword">return</span> a - b, <span class="literal">nil</span></span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">		<span class="keyword">return</span> a * b, <span class="literal">nil</span></span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">		<span class="comment">// 不想用到的值可以用_代替</span></span><br><span class="line">		q, _ := div(a, b)</span><br><span class="line">		<span class="keyword">return</span> q, <span class="literal">nil</span></span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>, fmt.Errorf(<span class="string">&quot;unsupported operation: %s&quot;</span>, op)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">div</span><span class="params">(a, b <span class="type">int</span>)</span></span> (q, r <span class="type">int</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> a / b, a % b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(eval(<span class="number">3</span>, <span class="number">4</span>, <span class="string">&quot;x&quot;</span>))</span><br><span class="line">	fmt.Println(div(<span class="number">13</span>, <span class="number">3</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数的参数也可以是一个函数"><a href="#函数的参数也可以是一个函数" class="headerlink" title="函数的参数也可以是一个函数"></a>函数的参数也可以是一个函数</h3><p>匿名函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math&quot;</span></span><br><span class="line">	<span class="string">&quot;reflect&quot;</span></span><br><span class="line">	<span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">apply</span><span class="params">(op <span class="keyword">func</span>(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span>, a, b <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">	p := reflect.ValueOf(op).Pointer()</span><br><span class="line">	opName := runtime.FuncForPC(p).Name()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Calling function %s with args (%d, %d)\n&quot;</span>, opName, a, b)</span><br><span class="line">	<span class="keyword">return</span> op(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(apply(<span class="function"><span class="keyword">func</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="type">int</span>(math.Pow(</span><br><span class="line">			<span class="type">float64</span>(a), <span class="type">float64</span>(b)))</span><br><span class="line">	&#125;, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="可变参数列表"><a href="#可变参数列表" class="headerlink" title="可变参数列表"></a>可变参数列表</h3><p>没有默认参数，可选参数，函数重载，操作符重载</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(numbers ...<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	s := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span>  numbers &#123;</span><br><span class="line">		s += numbers[i]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>指针不能运算</p>
<p>go语言只有值传递一种方式</p>
<img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/Go%E8%AF%AD%E8%A8%80.assets/image-20220918113008295.png" alt="image-20220918113008295" style="zoom: 33%;" />

<img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/Go%E8%AF%AD%E8%A8%80.assets/image-20220918113026786.png" alt="image-20220918113026786" style="zoom:33%;" />

<img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/Go%E8%AF%AD%E8%A8%80.assets/image-20220918114102139.png" alt="image-20220918114102139" style="zoom:33%;" />

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(a, b *<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	*b, *a = *a, *b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a, b := <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">	swap(&amp;a, &amp;b)</span><br><span class="line">	fmt.Println(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="内建容器"><a href="#内建容器" class="headerlink" title="内建容器"></a>内建容器</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组的遍历—range关键字"><a href="#数组的遍历—range关键字" class="headerlink" title="数组的遍历—range关键字"></a>数组的遍历—range关键字</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> arr1 [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">	arr2 := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;</span><br><span class="line">	arr3 := [...]<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>&#125;</span><br><span class="line">	<span class="keyword">var</span> grid [<span class="number">4</span>][<span class="number">5</span>]<span class="type">int</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(arr1, arr2, arr3)</span><br><span class="line">	fmt.Println(grid)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr3); i++ &#123;</span><br><span class="line">		fmt.Println(arr3[i])</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i, v := <span class="keyword">range</span> arr3 &#123;</span><br><span class="line">		fmt.Println(i, v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组传递是值类型"><a href="#数组传递是值类型" class="headerlink" title="数组传递是值类型"></a>数组传递是值类型</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printArray</span><span class="params">(arr [5]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	arr[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">	<span class="keyword">for</span> i, v := <span class="keyword">range</span> arr &#123;</span><br><span class="line">		fmt.Println(i, v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> arr1 [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">	arr3 := [...]<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line">	printArray(arr1)</span><br><span class="line">	printArray(arr3)</span><br><span class="line">	fmt.Println(arr1, arr3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>切片本身没有数据，而是数组的一个视图(view)</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateSlice</span><span class="params">(s []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	s[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	arr := [...]<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line">	s1 := arr[<span class="number">2</span>:]</span><br><span class="line">	fmt.Println(s1) <span class="comment">// [2 3 4 5 6 7]</span></span><br><span class="line">	s2 := arr[:]</span><br><span class="line">	fmt.Println(s2) <span class="comment">// [0 1 2 3 4 5 6 7]</span></span><br><span class="line"></span><br><span class="line">	updateSlice(s1)</span><br><span class="line">	fmt.Println(s1) <span class="comment">// [100 3 4 5 6 7]</span></span><br><span class="line">	fmt.Println(s2) <span class="comment">// [0 1 100 3 4 5 6 7]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="slice的拓展"><a href="#slice的拓展" class="headerlink" title="slice的拓展"></a>slice的拓展</h3><img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/Go%E8%AF%AD%E8%A8%80.assets/image-20220918143132904.png" alt="image-20220918143132904" style="zoom: 33%;" />

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	arr := [...]<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line">	s1 := arr[<span class="number">2</span>:<span class="number">6</span>]</span><br><span class="line">	fmt.Println(s1) <span class="comment">// [2 3 4 5]</span></span><br><span class="line">	s2 := s1[<span class="number">3</span>:<span class="number">5</span>]</span><br><span class="line">	fmt.Println(s2) <span class="comment">// [5 6]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Slice的实现"><a href="#Slice的实现" class="headerlink" title="Slice的实现"></a>Slice的实现</h3><p>只要不超过capacity即可</p>
<p>slice可以向后扩展，不可以向前扩展</p>
<p>s[i]不可以超越len(s)，向后扩展不可以超越底层数组cap(s)</p>
<img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/Go%E8%AF%AD%E8%A8%80.assets/image-20220918143235819.png" alt="image-20220918143235819" style="zoom:33%;" />

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	arr := [...]<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line">	s1 := arr[<span class="number">2</span>:<span class="number">6</span>]</span><br><span class="line">	fmt.Println(s1) <span class="comment">// [2 3 4 5]</span></span><br><span class="line">	s2 := s1[<span class="number">3</span>:<span class="number">5</span>]</span><br><span class="line">	fmt.Println(s2) <span class="comment">// [5 6]</span></span><br><span class="line">	<span class="comment">// s1=[2 3 4 5], len(s1)=4, cap(s1)=6</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;s1=%v, len(s1)=%d, cap(s1)=%d\n&quot;</span>, s1, <span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s1))</span><br><span class="line">	<span class="comment">// s2=[5 6], len(s2)=2, cap(s2)=3</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;s2=%v, len(s2)=%d, cap(s2)=%d\n&quot;</span>, s2, <span class="built_in">len</span>(s2), <span class="built_in">cap</span>(s2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="向Slice添加元素"><a href="#向Slice添加元素" class="headerlink" title="向Slice添加元素"></a>向Slice添加元素</h3><p>s4和s5不在是对arr的view</p>
<p>添加元素时如果超越cap，系统会重新分配更大的底层数组</p>
<p>s &#x3D; append(s, val)</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	arr := [...]<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line">	s1 := arr[<span class="number">2</span>:<span class="number">6</span>]</span><br><span class="line">	fmt.Println(s1) <span class="comment">// [2 3 4 5]</span></span><br><span class="line">	s2 := s1[<span class="number">3</span>:<span class="number">5</span>]</span><br><span class="line">	fmt.Println(s2) <span class="comment">// [5 6]</span></span><br><span class="line"></span><br><span class="line">	s3 := <span class="built_in">append</span>(s2, <span class="number">10</span>)</span><br><span class="line">	s4 := <span class="built_in">append</span>(s3, <span class="number">11</span>)</span><br><span class="line">	s5 := <span class="built_in">append</span>(s4, <span class="number">12</span>)</span><br><span class="line">	<span class="comment">// s3, s4, s5 = [5 6 10] [5 6 10 11] [5 6 10 11 12]</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;s3, s4, s5 =&quot;</span>, s3, s4, s5)</span><br><span class="line">	<span class="comment">// [0 1 2 3 4 5 6 10]</span></span><br><span class="line">	fmt.Println(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Slice的定义"><a href="#Slice的定义" class="headerlink" title="Slice的定义"></a>Slice的定义</h3><p>cap每次空间不够用的时候会翻倍</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(s []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;len=%d, cap=%d\n&quot;</span>, <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := []<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">		printSlice(s)</span><br><span class="line">		s = <span class="built_in">append</span>(s, <span class="number">2</span> * i + <span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>slice可以直接用make定义</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(s []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;len=%d, cap=%d\n&quot;</span>, <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s2 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">16</span>) <span class="comment">// len=16, cap=16</span></span><br><span class="line">	s3 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">10</span>, <span class="number">32</span>) <span class="comment">// len=10, cap=32</span></span><br><span class="line">	printSlice(s2)</span><br><span class="line">	printSlice(s3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Slice的复制"><a href="#Slice的复制" class="headerlink" title="Slice的复制"></a>Slice的复制</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(s []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s1 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	s2 := []<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>&#125;</span><br><span class="line">	<span class="built_in">copy</span>(s1, s2)</span><br><span class="line">	printSlice(s1) <span class="comment">// [2 4 6 8 5]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Slice删除元素"><a href="#Slice删除元素" class="headerlink" title="Slice删除元素"></a>Slice删除元素</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(s []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s1 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	s2 := []<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>&#125;</span><br><span class="line">	<span class="built_in">copy</span>(s1, s2)</span><br><span class="line">	printSlice(s1) <span class="comment">// [2 4 6 8 5]</span></span><br><span class="line">	s1 = <span class="built_in">append</span>(s1[:<span class="number">3</span>], s1[<span class="number">4</span>:]...)</span><br><span class="line">	printSlice(s1) <span class="comment">// [2 4 6 5]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>map是无序的，类似hashmap</p>
<p>创建：make(map[string]int)</p>
<p>获取元素：m[key]</p>
<p>key不存在时，获得Value类型的初始值</p>
<p>用value，ok :&#x3D; m[key]来判断是否存在key用</p>
<p>delete删除一个key</p>
<p>使用range遍历key，或者遍历key,value对</p>
<p>不保证遍历顺序，如需顺序，需手动对key排序</p>
<p>使用len获得元素个数</p>
<p><strong>map的key的类型：</strong></p>
<p>map使用哈希表，必须可以比较相等</p>
<p>除了slice，map，function的内建类型都可以作为key</p>
<p>Struct类型不包含上述字段，也可作为key</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>map[K]V</p>
<p>map[K1]map[K2]v</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span> &#123;</span><br><span class="line">		<span class="string">&quot;name&quot;</span> : <span class="string">&quot;ccmouse&quot;</span>,</span><br><span class="line">		<span class="string">&quot;course&quot;</span> : <span class="string">&quot;golang&quot;</span>,</span><br><span class="line">		<span class="string">&quot;site&quot;</span> : <span class="string">&quot;imooc&quot;</span>,</span><br><span class="line">		<span class="string">&quot;quality&quot;</span> : <span class="string">&quot;notbad&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(m) <span class="comment">// map[course:golang name:ccmouse quality:notbad site:imooc]</span></span><br><span class="line"></span><br><span class="line">	m2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>) <span class="comment">// m2 == empty</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> m3 <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span> <span class="comment">// m3 == nil</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(m2)</span><br><span class="line"></span><br><span class="line">	fmt.Println(m3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span> &#123;</span><br><span class="line">		<span class="string">&quot;name&quot;</span> : <span class="string">&quot;ccmouse&quot;</span>,</span><br><span class="line">		<span class="string">&quot;course&quot;</span> : <span class="string">&quot;golang&quot;</span>,</span><br><span class="line">		<span class="string">&quot;site&quot;</span> : <span class="string">&quot;imooc&quot;</span>,</span><br><span class="line">		<span class="string">&quot;quality&quot;</span> : <span class="string">&quot;notbad&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(m)</span><br><span class="line">	<span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">		fmt.Println(k, v)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> k := <span class="keyword">range</span> m &#123;</span><br><span class="line">		fmt.Println(k)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">		fmt.Println(v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="支持-操作"><a href="#支持-操作" class="headerlink" title="支持[ ]操作"></a>支持[ ]操作</h3><p>key不存在，也不会报错，而是输出zero value</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span> &#123;</span><br><span class="line">		<span class="string">&quot;name&quot;</span> : <span class="string">&quot;ccmouse&quot;</span>,</span><br><span class="line">		<span class="string">&quot;course&quot;</span> : <span class="string">&quot;golang&quot;</span>,</span><br><span class="line">		<span class="string">&quot;site&quot;</span> : <span class="string">&quot;imooc&quot;</span>,</span><br><span class="line">		<span class="string">&quot;quality&quot;</span> : <span class="string">&quot;notbad&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(m[<span class="string">&quot;site&quot;</span>]) <span class="comment">// imooc</span></span><br><span class="line">	fmt.Println(m[<span class="string">&quot;si&quot;</span>]) <span class="comment">// 不会报错，打印空值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>key是否在map中，k1, ok :&#x3D; map[key]，如果存在，k1就是值，ok为true；不存在k1为zero value，ok为false</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span> &#123;</span><br><span class="line">		<span class="string">&quot;name&quot;</span> : <span class="string">&quot;ccmouse&quot;</span>,</span><br><span class="line">		<span class="string">&quot;course&quot;</span> : <span class="string">&quot;golang&quot;</span>,</span><br><span class="line">		<span class="string">&quot;site&quot;</span> : <span class="string">&quot;imooc&quot;</span>,</span><br><span class="line">		<span class="string">&quot;quality&quot;</span> : <span class="string">&quot;notbad&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	k1, ok := m[<span class="string">&quot;site&quot;</span>]</span><br><span class="line">	fmt.Println(k1, ok) <span class="comment">// imooc true</span></span><br><span class="line">	k2, ok := m[<span class="string">&quot;si&quot;</span>]</span><br><span class="line">	fmt.Println(k2, ok) <span class="comment">//  false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span> &#123;</span><br><span class="line">		<span class="string">&quot;name&quot;</span> : <span class="string">&quot;ccmouse&quot;</span>,</span><br><span class="line">		<span class="string">&quot;course&quot;</span> : <span class="string">&quot;golang&quot;</span>,</span><br><span class="line">		<span class="string">&quot;site&quot;</span> : <span class="string">&quot;imooc&quot;</span>,</span><br><span class="line">		<span class="string">&quot;quality&quot;</span> : <span class="string">&quot;notbad&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	_, ok := m[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">	fmt.Println(ok) <span class="comment">// true</span></span><br><span class="line">	<span class="built_in">delete</span>(m, <span class="string">&quot;name&quot;</span>)</span><br><span class="line">	_, ok = m[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">	fmt.Println(ok) <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符串和字符串处理"><a href="#字符串和字符串处理" class="headerlink" title="字符串和字符串处理"></a>字符串和字符串处理</h2><p>rune相当于go的char</p>
<p>%x表示按<strong>16进制输出</strong></p>
<p>使用range遍历pos，rune对</p>
<p>使用utf8.RuneCountInString获得字符数量</p>
<p>使用len获得字节长度</p>
<p>使用[]byte获得字节</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;unicode/utf8&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := <span class="string">&quot;Yes咕咕咕&quot;</span> <span class="comment">// UTF-8，一个中文是3个字节</span></span><br><span class="line">	fmt.Println(<span class="built_in">len</span>(s)) <span class="comment">// 12</span></span><br><span class="line">	<span class="keyword">for</span> _, b := <span class="keyword">range</span> []<span class="type">byte</span>(s) &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%X &quot;</span>, b) <span class="comment">// 59 65 73 E5 92 95 E5 92 95 E5 92 95</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i, ch := <span class="keyword">range</span> s &#123; <span class="comment">// ch is a rune</span></span><br><span class="line">		fmt.Printf(<span class="string">&quot;(%d %X) &quot;</span>, i, ch) <span class="comment">// (0 59) (1 65) (2 73) (3 5495) (6 5495) (9 5495)</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 按习惯上的字符个数来计算</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;Rune count: &quot;</span>, utf8.RuneCountInString(s)) <span class="comment">// Rune count:  6</span></span><br><span class="line"></span><br><span class="line">	bytes := []<span class="type">byte</span>(s)</span><br><span class="line">	<span class="keyword">for</span> <span class="built_in">len</span>(bytes) &gt; <span class="number">0</span> &#123;</span><br><span class="line">		ch, size := utf8.DecodeRune(bytes) <span class="comment">// 读取第一个字符和字符的长度</span></span><br><span class="line">		bytes = bytes[size:]</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%c &quot;</span>, ch)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println()</span><br><span class="line">	<span class="keyword">for</span> i, ch := <span class="keyword">range</span> []<span class="type">rune</span>(s) &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;(%d %c) &quot;</span>, i, ch)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>go语言仅支持封装，不支持继承和多态</p>
<p>go语言没有class，只有struct</p>
<h2 id="结构的创建"><a href="#结构的创建" class="headerlink" title="结构的创建"></a>结构的创建</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> treeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	value <span class="type">int</span></span><br><span class="line">	left, right *treeNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> root treeNode</span><br><span class="line">	fmt.Println(root) <span class="comment">// &#123;0 &lt;nil&gt; &lt;nil&gt;&#125;</span></span><br><span class="line"></span><br><span class="line">	root = treeNode&#123;value: <span class="number">3</span>&#125;</span><br><span class="line">	root.left = &amp;treeNode&#123;&#125;</span><br><span class="line">	root.right = &amp;treeNode&#123;<span class="number">5</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">	root.right.left = <span class="built_in">new</span>(treeNode)</span><br><span class="line"></span><br><span class="line">	nodes := []treeNode &#123;</span><br><span class="line">		&#123;value: <span class="number">3</span>&#125;,</span><br><span class="line">		&#123;&#125;,</span><br><span class="line">		&#123;<span class="number">6</span>, <span class="literal">nil</span>, &amp;root&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(nodes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="工厂函数"><a href="#工厂函数" class="headerlink" title="工厂函数"></a>工厂函数</h3><p>使用自定义工厂函数</p>
<p>go语言允许返回局部变量的地址，这在C++中是不允许的</p>
<p>C++中局部变量是分配在栈上的，函数一旦退出，局部变量就会被销毁；如果要传出函数体，就要分配在栈上</p>
<p>Java中，new出来的变量一般是放在堆上的，这样才能被GC回收</p>
<p>Go不需要知道变量是分配在堆上还是栈上，垃圾回收机制会自动判断之后是否还会用到这个变量，自动选择在堆上还是栈上分配</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> treeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	value <span class="type">int</span></span><br><span class="line">	left, right *treeNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createNode</span><span class="params">(value <span class="type">int</span>)</span></span> *treeNode &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;treeNode&#123;value: value&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> root treeNode</span><br><span class="line">	fmt.Println(root) <span class="comment">// &#123;0 &lt;nil&gt; &lt;nil&gt;&#125;</span></span><br><span class="line"></span><br><span class="line">	root = treeNode&#123;value: <span class="number">3</span>&#125;</span><br><span class="line">	root.left = &amp;treeNode&#123;&#125;</span><br><span class="line">	root.right = &amp;treeNode&#123;<span class="number">5</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">	root.right.left = <span class="built_in">new</span>(treeNode)</span><br><span class="line">	root.left.right = createNode(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/Go%E8%AF%AD%E8%A8%80.assets/image-20220918204316175.png" alt="image-20220918204316175" style="zoom:33%;" />

<h3 id="给结构体定义方法"><a href="#给结构体定义方法" class="headerlink" title="给结构体定义方法"></a>给结构体定义方法</h3><p>结构体的方法定义在结构体外部</p>
<h4 id="值作为方法的接收者"><a href="#值作为方法的接收者" class="headerlink" title="值作为方法的接收者"></a>值作为方法的接收者</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> treeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	value <span class="type">int</span></span><br><span class="line">	left, right *treeNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// treeNode结构体的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node treeNode)</span></span> <span class="built_in">print</span>() &#123;</span><br><span class="line">	fmt.Print(node.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createNode</span><span class="params">(value <span class="type">int</span>)</span></span> *treeNode &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;treeNode&#123;value: value&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> root treeNode</span><br><span class="line">	fmt.Println(root) <span class="comment">// &#123;0 &lt;nil&gt; &lt;nil&gt;&#125;</span></span><br><span class="line"></span><br><span class="line">	root = treeNode&#123;value: <span class="number">3</span>&#125;</span><br><span class="line">	root.left = &amp;treeNode&#123;&#125;</span><br><span class="line">	root.right = &amp;treeNode&#123;<span class="number">5</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">	root.right.left = <span class="built_in">new</span>(treeNode)</span><br><span class="line">	root.left.right = createNode(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">	root.<span class="built_in">print</span>()</span><br><span class="line">	fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="指针作为方法的接收者"><a href="#指针作为方法的接收者" class="headerlink" title="指针作为方法的接收者"></a>指针作为方法的接收者</h4><p>只有使用指针才可以改变结构内容</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> treeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	value <span class="type">int</span></span><br><span class="line">	left, right *treeNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// treeNode结构体的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node treeNode)</span></span> <span class="built_in">print</span>() &#123;</span><br><span class="line">	fmt.Print(node.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *treeNode)</span></span> setValue(value <span class="type">int</span>) &#123;</span><br><span class="line">	node.value = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createNode</span><span class="params">(value <span class="type">int</span>)</span></span> *treeNode &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;treeNode&#123;value: value&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> root treeNode</span><br><span class="line">	root = treeNode&#123;value: <span class="number">3</span>&#125;</span><br><span class="line">	root.left = &amp;treeNode&#123;&#125;</span><br><span class="line">	root.right = &amp;treeNode&#123;<span class="number">5</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">	root.right.left = <span class="built_in">new</span>(treeNode)</span><br><span class="line">	root.left.right = createNode(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">	root.right.left.setValue(<span class="number">4</span>)</span><br><span class="line">	root.right.left.<span class="built_in">print</span>() <span class="comment">// 4</span></span><br><span class="line">	fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="nil指针也可以调用方法"><a href="#nil指针也可以调用方法" class="headerlink" title="nil指针也可以调用方法"></a>nil指针也可以调用方法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> treeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	value <span class="type">int</span></span><br><span class="line">	left, right *treeNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// treeNode结构体的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node treeNode)</span></span> <span class="built_in">print</span>() &#123;</span><br><span class="line">	fmt.Print(node.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *treeNode)</span></span> setValue(value <span class="type">int</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Setting value to nil node. &quot;</span> +</span><br><span class="line">			<span class="string">&quot;Ignored&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	node.value = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createNode</span><span class="params">(value <span class="type">int</span>)</span></span> *treeNode &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;treeNode&#123;value: value&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> root treeNode</span><br><span class="line">	root = treeNode&#123;value: <span class="number">3</span>&#125;</span><br><span class="line">	root.left = &amp;treeNode&#123;&#125;</span><br><span class="line">	root.right = &amp;treeNode&#123;<span class="number">5</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">	root.right.left = <span class="built_in">new</span>(treeNode)</span><br><span class="line">	root.left.right = createNode(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">	root.right.left.setValue(<span class="number">4</span>)</span><br><span class="line">	root.right.left.<span class="built_in">print</span>()</span><br><span class="line">	fmt.Println()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> pRoot *treeNode</span><br><span class="line">	pRoot.setValue(<span class="number">200</span>)</span><br><span class="line">	pRoot = &amp;root</span><br><span class="line">	pRoot.setValue(<span class="number">300</span>)</span><br><span class="line">	pRoot.<span class="built_in">print</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> treeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	value <span class="type">int</span></span><br><span class="line">	left, right *treeNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// treeNode结构体的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node treeNode)</span></span> <span class="built_in">print</span>() &#123;</span><br><span class="line">	fmt.Print(node.value, <span class="string">&quot; &quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *treeNode)</span></span> setValue(value <span class="type">int</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Setting value to nil node. &quot;</span> +</span><br><span class="line">			<span class="string">&quot;Ignored&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	node.value = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *treeNode)</span></span> traverse() &#123;</span><br><span class="line">	<span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	node.left.traverse()</span><br><span class="line">	node.<span class="built_in">print</span>()</span><br><span class="line">	node.right.traverse()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createNode</span><span class="params">(value <span class="type">int</span>)</span></span> *treeNode &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;treeNode&#123;value: value&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> root treeNode</span><br><span class="line">	root = treeNode&#123;value: <span class="number">3</span>&#125;</span><br><span class="line">	root.left = &amp;treeNode&#123;&#125;</span><br><span class="line">	root.right = &amp;treeNode&#123;<span class="number">5</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">	root.right.left = <span class="built_in">new</span>(treeNode)</span><br><span class="line">	root.left.right = createNode(<span class="number">2</span>)</span><br><span class="line">	root.right.left.setValue(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">	root.traverse()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="值接收者VS指针接收者"><a href="#值接收者VS指针接收者" class="headerlink" title="值接收者VS指针接收者"></a>值接收者VS指针接收者</h3><p>要改变内容必须使用指针接收者</p>
<p>结构过大也考虑使用指针接收者</p>
<p>一致性：如有指针接收者，最好都是指针接收者</p>
<p>值接收者是go语言特有</p>
<p>值&#x2F;指针接收者均可接收值&#x2F;指针</p>
<h2 id="包和封装"><a href="#包和封装" class="headerlink" title="包和封装"></a>包和封装</h2><p>名字一般使用CamelCase</p>
<p>首字母大写：public</p>
<p>首字母小写：private</p>
<p>每个目录一个包</p>
<p>main包包含可执行入口</p>
<p>为结构定义的方法必须放在同一个包内，可以是不同文件</p>
<h3 id="扩展已有类型"><a href="#扩展已有类型" class="headerlink" title="扩展已有类型"></a>扩展已有类型</h3><p>如何扩充系统类型或者别人的类型？</p>
<p>1.定义别名</p>
<p>2.使用组合</p>
<h4 id="通过组合"><a href="#通过组合" class="headerlink" title="通过组合"></a>通过组合</h4><p>通过组合实现后序遍历</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;golang/tree&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现后序遍历</span></span><br><span class="line"><span class="keyword">type</span> myTreeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	node *tree.Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(myNode *myTreeNode)</span></span> postOrder() &#123;</span><br><span class="line">	<span class="keyword">if</span> myNode == <span class="literal">nil</span> || myNode.node == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	left := myTreeNode&#123;myNode.node.Left&#125;</span><br><span class="line">	left.postOrder()</span><br><span class="line">	right := myTreeNode&#123;myNode.node.Right&#125;</span><br><span class="line">	right.postOrder()</span><br><span class="line">	myNode.node.Print()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> root tree.Node</span><br><span class="line">	root = tree.Node&#123;Value: <span class="number">3</span>&#125;</span><br><span class="line">	root.Left = &amp;tree.Node&#123;&#125;</span><br><span class="line">	root.Right = &amp;tree.Node&#123;<span class="number">5</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">	root.Right.Left = <span class="built_in">new</span>(tree.Node)</span><br><span class="line">	root.Left.Right = tree.CreateNode(<span class="number">2</span>)</span><br><span class="line">	root.Right.Left.SetValue(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">	root.Traverse()</span><br><span class="line">	fmt.Println()</span><br><span class="line">	myRoot := myTreeNode&#123;&amp;root&#125;</span><br><span class="line">	myRoot.postOrder()</span><br><span class="line">	fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="定义别名"><a href="#定义别名" class="headerlink" title="定义别名"></a>定义别名</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> queue</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Queue []<span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> Push(v <span class="type">int</span>) &#123;</span><br><span class="line">	*q = <span class="built_in">append</span>(*q, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> Pop() <span class="type">int</span> &#123;</span><br><span class="line">	head := (*q)[<span class="number">0</span>]</span><br><span class="line">	*q = (*q)[<span class="number">1</span>:]</span><br><span class="line">	<span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span></span> IsEmpty() <span class="type">bool</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">len</span>(*q) == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;golang/queue&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	q := queue.Queue&#123;<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">	q.Push(<span class="number">2</span>)</span><br><span class="line">	q.Push(<span class="number">3</span>)</span><br><span class="line">	fmt.Println(q.Pop())</span><br><span class="line">	fmt.Println(q.Pop())</span><br><span class="line">	fmt.Println(q.IsEmpty())</span><br><span class="line">	fmt.Println(q.Pop())</span><br><span class="line">	fmt.Println(q.IsEmpty())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="GOPATH环境变量"><a href="#GOPATH环境变量" class="headerlink" title="GOPATH环境变量"></a>GOPATH环境变量</h2><p>默认在~&#x2F;go（uniX，linux），%USERPROFILE%\go（windows）</p>
<p>官方推荐：所有项目和第三方库都放在同一个GOPATH下</p>
<p>也可以将每个项目放在不同的GOPATH</p>
<h2 id="go-get获取第三方库"><a href="#go-get获取第三方库" class="headerlink" title="go get获取第三方库"></a>go get获取第三方库</h2><p>go get命令演示</p>
<p>使用gopm来获取无法下载的包</p>
<p>go get -v github.com&#x2F;gpmgo&#x2F;gopm</p>
<h1 id="面向接口"><a href="#面向接口" class="headerlink" title="面向接口"></a>面向接口</h1><p>duck typing</p>
<p>像鸭子走路，像鸭子叫（长得像鸭子），那么就是鸭子</p>
<p>描述事物的外部行为而非内部结构</p>
<img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/Go%E8%AF%AD%E8%A8%80.assets/image-20221008223004982.png" alt="image-20221008223004982" style="zoom:50%;" />

]]></content>
      <categories>
        <category>语言学习</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring实验</title>
    <url>/2022/07/19/Spring%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="Spring-IOC-x2F-DI"><a href="#Spring-IOC-x2F-DI" class="headerlink" title="Spring IOC&#x2F;DI"></a>Spring IOC&#x2F;DI</h1><p>学习链接：<a href="https://how2j.cn/k/spring/spring-ioc-di/87.html#nowhere">Spring系列教材 （一）- 教程 (how2j.cn)</a></p>
<p>Spring是一个基于IOC和AOP的结构J2EE系统的框架<br>IOC 反转控制 是Spring的基础，Inversion Of Control<br>简单说就是创建对象由以前的程序员自己new 构造方法来调用，变成了交由Spring创建对象<br>DI 依赖注入 Dependency Inject. 简单地说就是拿到的对象的属性，已经被注入好相关值了，直接使用即可。</p>
<span id="more"></span>

<p><strong>导入实验项目过程：</strong></p>
<ul>
<li><p>Import project “src”文件夹即可</p>
<blockquote>
<p>C:\Users\hahaha\Desktop\计算机\spring\spring_experiment_HOW2J\springIOC\src</p>
</blockquote>
</li>
<li><p>Project Structure-&gt;SDKs-&gt;导包</p>
<blockquote>
<p>C:\Users\hahaha\Desktop\计算机\spring\spring_experiment_HOW2J\spring_lib(HOW2J)</p>
</blockquote>
</li>
</ul>
<p><strong>原理：</strong></p>
<p>以获取对象的方式来进行比较</p>
<p><strong>传统的方式：</strong><br>通过new 关键字主动创建一个对象<br><strong>IOC方式</strong><br>对象的生命周期由Spring来管理，直接从Spring那里去获取一个对象。 IOC是<strong>反转控制</strong> (Inversion Of Control)的缩写，就像控制权从本来在自己手里，交给了Spring。</p>
<p>打个比喻：<br><strong>传统方式：</strong>相当于你自己去菜市场new 了一只鸡，不过是生鸡，要自己拔毛，去内脏，再上花椒，酱油，烤制，经过各种工序之后，才可以食用。<br><strong>用 IOC：</strong>相当于去馆子(Spring)点了一只鸡，交到你手上的时候，已经五味俱全，你就只管吃就行了。</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Spring%E5%AE%9E%E9%AA%8C.assets/image-20220416170554792.png" alt="image-20220416170554792"></p>
<p><strong>一些解释：</strong></p>
<p>学习链接：<a href="https://how2j.cn/k/spring/spring-ioc-di/87.html#nowhere">Spring系列教材 （一）- 教程 (how2j.cn)</a></p>
<p>1.这里的意思是通过关键字c即可获取com.how2java.pojo.Category对象，并且将”category 1”这个字符串，注入到了com.how2java.pojo.Category这个类的private String name;属性中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;c&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.how2java.pojo.Category&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;category 1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.这里的意思是由Spring创建bean对象，也就是c，也就是com.how2java.pojo.Category这个类对应的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSpring</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;applicationContext.xml&quot;</span> &#125;);</span><br><span class="line">        <span class="type">Category</span> <span class="variable">c</span> <span class="operator">=</span> (Category) context.getBean(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        System.out.println(c.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Spring-注入对象"><a href="#Spring-注入对象" class="headerlink" title="Spring 注入对象"></a>Spring 注入对象</h1><p>在上例中，对Category的name属性注入了”category 1”字符串<br>在本例中 ，对Product对象，注入一个Category对象</p>
<p><strong>Product类中有对Category对象的setter getter</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Category category;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Category <span class="title function_">getCategory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> category;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCategory</span><span class="params">(Category category)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.category = category;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>applicationContext.xml</strong></p>
<p>在创建Product的时候注入一个Category对象<br>注意，这里要使用ref来注入另一个对象</p>
<p>我的理解是：</p>
<p>这里给com.how2java.pojo.Category对象的name属性赋值category 1</p>
<p>并且可以通过p调用com.how2java.pojo.Product的对象，并且com.how2java.pojo.Product对象的category属性是一个c，也就是com.how2java.pojo.Category对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;c&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.how2java.pojo.Category&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;category 1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;p&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.how2java.pojo.Product&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;product1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;category&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;c&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>TestSpring</strong></p>
<p>这里的意思是由Spring创建bean对象，也就是p，也就是com.how2java.pojo.Product对象，然后调用p.getName()得到com.how2java.pojo.Product对象的name属性，也就是字符串”product1”</p>
<p>然后通过p.getCategory()得到com.how2java.pojo.Category对象，然后再通过getName()得到其name属性，也就是字符串”category 1”</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Spring%E5%AE%9E%E9%AA%8C.assets/image-20220417215909535.png" alt="image-20220417215909535"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSpring</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;applicationContext.xml&quot;</span> &#125;);</span><br><span class="line">        <span class="type">Product</span> <span class="variable">p</span> <span class="operator">=</span> (Product) context.getBean(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">        System.out.println(p.getName());</span><br><span class="line">        System.out.println(p.getCategory().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Spring-注解方式-IOC-x2F-DI"><a href="#Spring-注解方式-IOC-x2F-DI" class="headerlink" title="Spring 注解方式 IOC&#x2F;DI"></a>Spring 注解方式 IOC&#x2F;DI</h1><p><strong>修改applicationContext.xml</strong></p>
<p>添加&lt;context:annotation-config&#x2F;&gt; 意思是注解配置，annotation注解</p>
<p>注释掉&lt;property name&#x3D;”category” ref&#x3D;”c” &#x2F;&gt; 这个行为在后面将使用注解来完成</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    添加下面这一行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;c&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.how2java.pojo.Category&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;category 1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;p&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.how2java.pojo.Product&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;product1&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;category&quot; ref=&quot;c&quot; /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>修改Product.java</strong></p>
<p>在Product.java的category属性前加上@Autowired注解，Autowired自动接线</p>
<p>我的理解就是，让com.how2java.pojo.Category对象自动接线，赋值到com.how2java.pojo.Product对象的private Category category;属性中</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Spring%E5%AE%9E%E9%AA%8C.assets/image-20220417220314797.png" alt="image-20220417220314797"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Category category;</span><br></pre></td></tr></table></figure>

<p>除了前面的 <a href="https://how2j.cn/k/spring/spring-annotation-ioc-di/1067.html#step4076">在属性前加上@Autowired</a> 这种方式外，也可以在setCategory方法前加上@Autowired，这样来达到相同的效果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCategory</span><span class="params">(Category category)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.category = category;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@Resource</strong></p>
<p>除了@Autowired之外，@Resource也是常用的手段  @Resource(name&#x3D;”c”)</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Spring%E5%AE%9E%E9%AA%8C.assets/image-20220417220639017.png" alt="image-20220417220639017"></p>
<p>Product.java文件添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource(name=&quot;c&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Category category;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource(name=&quot;c&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCategory</span><span class="params">(Category category)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.category = category;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>对Bean的注解</strong></p>
<p>上述例子是对<strong>注入对象行为</strong>的注解，那么bean对象本身，比如Category,Product可不可以移出</p>
<p>applicationContext.xml配置文件，也通过注解进行呢？</p>
<p><strong>接下来就讲解如何对Bean进行注解配置</strong></p>
<p>修改applicationContext.xml，什么都去掉，只新增：</p>
<p>其作用是告诉Spring，bean都放在com.how2java.pojo这个包下，让java自动扫描com.how2java.pojo这个包，自己去找bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.how2java.pojo&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>为Product类加上@Component注解，即表明此类是bean，也就是再测试类中，可以通过p，来生成一个Product对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;p&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br></pre></td></tr></table></figure>

<p>为Category 类加上@Component注解，即表明此类是bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;c&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Category</span> &#123;</span><br></pre></td></tr></table></figure>

<p>另外，因为配置从applicationContext.xml中移出来了，所以属性初始化放在属性声明上进行了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Product.java文件中直接定义name字符串是<span class="string">&quot;product 1&quot;</span></span><br><span class="line"><span class="keyword">private</span> String name=<span class="string">&quot;product 1&quot;</span>;</span><br><span class="line">Category.java文件中直接定义name字符串是<span class="string">&quot;category 1&quot;</span></span><br><span class="line"><span class="keyword">private</span> String name=<span class="string">&quot;category 1&quot;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h1><p>AOP 即 Aspect Oriented Program 面向切面编程<br>首先，在面向切面编程的思想里面，把功能分为<strong>核心业务功能</strong>，和<strong>周边功能</strong>。<br>所谓的核心业务，比如登陆，增加数据，删除数据都叫核心业务<br>所谓的周边功能，比如性能统计，日志，事务管理等等</p>
<p>周边功能在Spring的面向切面编程AOP思想里，即被定义为<strong>切面</strong></p>
<p>在面向切面编程AOP的思想里面，核心业务功能和切面功能分别<strong>独立进行开发</strong><br>然后把切面功能和核心业务功能 <strong>“编织”</strong> 在一起，这就叫AOP</p>
<p><strong>思路图：</strong></p>
<p>\1. 功能分两大类，辅助功能和核心业务功能</p>
<p>\2. 辅助功能和核心业务功能<strong>彼此独立</strong>进行开发</p>
<p>\3. 比如登陆功能，即便是没有性能统计和日志输出，也可以正常运行</p>
<p>\4. 如果有需要，就把”日志输出” 功能和 “登陆” 功能 <strong>编织</strong>在一起，这样登陆的时候，就可以看到日志输出了</p>
<p>\5. 辅助功能，又叫做<strong>切面</strong>，这种能够<strong>选择性的，低耦合的</strong>把切面和核心业务功能结合在一起的编程思想，就叫做切面编程</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Spring%E5%AE%9E%E9%AA%8C.assets/image-20220416202451770.png" alt="image-20220416202451770"></p>
<p><strong>更改applicationContext.xml配置（一）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.how2java.service&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>准备业务类 ProductService（一）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;s&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomeService</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doSomeService&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>或者更改applicationContext.xml配置（二）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;s&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.how2java.service.ProductService&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>或者准备业务类 ProductService（二）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomeService</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doSomeService&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>在引入切面之前，调用该业务类</strong></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Spring%E5%AE%9E%E9%AA%8C.assets/image-20220417222005683.png" alt="image-20220417222005683"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.how2java.service.ProductService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSpring</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;applicationContext.xml&quot;</span> &#125;);</span><br><span class="line">        <span class="type">ProductService</span> <span class="variable">s</span> <span class="operator">=</span> (ProductService) context.getBean(<span class="string">&quot;s&quot;</span>);</span><br><span class="line">        s.doSomeService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>准备日志切面 LoggerAspect</strong></p>
<p>该日志切面的功能是 在调用核心功能之前和之后分别打印日志，切面就是原理图中讲的那些辅助功能。</p>
<p><code>Object object = joinPoint.proceed();</code>就是将来与某个核心功能编织之后，用于执行核心功能的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggerAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">log</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start log:&quot;</span> + joinPoint.getSignature().getName());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;end log:&quot;</span> + joinPoint.getSignature().getName());</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>applicationContext.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    这里声明业务对象，也就是通过s可以得到com.how2java.service.ProductService类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;s&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.how2java.service.ProductService&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    声明日志切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;loggerAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.how2java.aspect.LoggerAspect&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    指定右边的核心业务功能--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    execution(* com.how2java.service.ProductService.*(..))</span></span><br><span class="line"><span class="comment">        这表示对满足如下条件的方法调用，进行切面操作：</span></span><br><span class="line"><span class="comment">        * 返回任意类型</span></span><br><span class="line"><span class="comment">        com.how2java.service.ProductService.* 包名以 com.how2java.service.ProductService 开头的类的任意方法</span></span><br><span class="line"><span class="comment">        (..) 参数是任意数量和类型    --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;loggerCutpoint&quot;</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">expression</span>=</span></span><br><span class="line"><span class="tag">                              <span class="string">&quot;execution(* com.how2java.service.ProductService.*(..)) &quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        指定左边的辅助功能--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;logAspect&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;loggerAspect&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;loggerCutpoint&quot;</span> <span class="attr">method</span>=<span class="string">&quot;log&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Spring-注解方式-AOP"><a href="#Spring-注解方式-AOP" class="headerlink" title="Spring 注解方式 AOP"></a>Spring 注解方式 AOP</h1><p><strong>注解配置业务类</strong></p>
<p>使用@Component(“s”) 注解ProductService 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;s&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductService</span> &#123;</span><br></pre></td></tr></table></figure>

<p><strong>注解配置切面</strong></p>
<p>@Aspect 注解表示这是一个切面<br>@Component 表示这是一个bean,由Spring进行管理<br>@Around(value &#x3D; “execution(* com.how2java.service.ProductService.*(..))”) 表示对com.how2java.service.ProductService 这个类中的所有方法进行切面操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggerAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(* com.how2java.service.ProductService.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">log</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start log:&quot;</span> + joinPoint.getSignature().getName());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;end log:&quot;</span> + joinPoint.getSignature().getName());</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>applicationContext.xml去掉原有信息，添加如下3行</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    扫描包com.how2java.aspect和com.how2java.service，定位业务类和切面类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.how2java.aspect&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.how2java.service&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    找到被注解了的切面类，进行切面配置(切面自动代理)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>运行</strong></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Spring%E5%AE%9E%E9%AA%8C.assets/image-20220417224349336.png" alt="image-20220417224349336"></p>
<h1 id="Spring-注解方式测试"><a href="#Spring-注解方式测试" class="headerlink" title="Spring 注解方式测试"></a>Spring 注解方式测试</h1><p><strong>修改TestSpring, 并运行</strong></p>
<p><strong>修改前：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.test;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Category;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSpring</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;applicationContext.xml&quot;</span> &#125;);</span><br><span class="line"> </span><br><span class="line">        <span class="type">Category</span> <span class="variable">c</span> <span class="operator">=</span> (Category) context.getBean(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">         </span><br><span class="line">        System.out.println(c.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>修改后：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Category;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示这是一个Spring的测试类</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">// 定位Spring的配置文件</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSpring</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给这个测试类装配Category对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Category c;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试逻辑，打印c对象的名称</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(c.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>applicationContext.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;c&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.how2java.pojo.Category&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;category 1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MVC实验</title>
    <url>/2022/07/19/SpringMVC%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="Hello-Spring-MVC"><a href="#Hello-Spring-MVC" class="headerlink" title="Hello Spring MVC"></a>Hello Spring MVC</h1><p><strong>创建项目springmvc</strong></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/SpringMVC%E5%AE%9E%E9%AA%8C.assets/image-20220418105613296.png" alt="image-20220418105613296"></p>
<span id="more"></span>

<p><strong>导入网络框架支持</strong></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/SpringMVC%E5%AE%9E%E9%AA%8C.assets/image-20220418105730090.png" alt="image-20220418105730090"></p>
<img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/SpringMVC%E5%AE%9E%E9%AA%8C.assets/image-20220418105804409.png" alt="image-20220418105804409" style="zoom:50%;" />

<p><strong>导入jar包</strong></p>
<p>把lib(C:\Users\hahaha\Desktop\计算机\spring\springmvc_HOW2J\lib), 复制到E:\project\springmvc\web\WEB-INF目录下</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/SpringMVC%E5%AE%9E%E9%AA%8C.assets/image-20220418110014802.png" alt="image-20220418110014802"></p>
<p><strong>web.xml</strong></p>
<p>在WEB-INF目录下创建 web.xml</p>
<p>配置Spring MVC的入口 <strong>DispatcherServlet</strong>，把所有的请求都提交到该Servlet</p>
<p>注意：&lt;servlet-name&gt;<strong>springmvc</strong>&lt;&#x2F;servlet-name&gt;</p>
<p><strong>springmvc</strong>这个名字在下一步会用到</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">&quot;2.4&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee</span></span></span><br><span class="line"><span class="string"><span class="tag">http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">            org.springframework.web.servlet.DispatcherServlet</span><br><span class="line">        <span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>创建springmvc-servlet.xml</strong></p>
<p>在WEB-INF目录下创建 springmvc-servlet.xml<br>springmvc-servlet.xml 与上一步中的</p>
<p><code>&lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</code></p>
<p><strong>springmvc</strong>对应</p>
<p>这是Spring MVC的 映射配置文件<br>表示访问路径**&#x2F;index<strong>会交给id&#x3D;indexController的bean处理<br>id&#x3D;indexController的bean配置为类：</strong>IndexController**</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">beans</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//SPRING//DTD BEAN//EN&quot;</span> <span class="string">&quot;http://www.springframework.org/dtd/spring-beans.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;simpleUrlHandlerMapping&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mappings&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;/index&quot;</span>&gt;</span>indexController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;indexController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;controller.IndexController&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>控制类 IndexController</strong></p>
<p>控制类 IndexController实现接口Controller ，提供方法handleRequest处理请求</p>
<p>SpringMVC通过 ModelAndView 对象把模型和视图结合在一起</p>
<p>表示视图是index.jsp<br>模型数据是 message，内容是 “Hello Spring MVC”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;index.jsp&quot;</span>);</span><br><span class="line">        mav.addObject(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Hello Spring MVC&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>准备index.jsp</strong></p>
<p>在Web目录下创建index.jsp</p>
<p>index.jsp很简单，通过<a href="https://how2j.cn/k/jsp/jsp-el/579.html">EL表达式</a>显示message的内容</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span>%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;h1&gt;$&#123;message&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<p><strong>部署在tomcat中，重启测试</strong></p>
<p>部署在Tomcat中，重启tomcat，然后访问地址，观察效果</p>
<p><a href="http://127.0.0.1:8080/springmvc/index">http://127.0.0.1:8080/springmvc/index</a></p>
<p>部署过程：</p>
<img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/SpringMVC%E5%AE%9E%E9%AA%8C.assets/image-20220418110854740.png" alt="image-20220418110854740" style="zoom: 67%;" />

<img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/SpringMVC%E5%AE%9E%E9%AA%8C.assets/image-20220418110943648.png" alt="image-20220418110943648" style="zoom: 67%;" />

<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/SpringMVC%E5%AE%9E%E9%AA%8C.assets/image-20220418111059176.png" alt="image-20220418111059176"></p>
<p>改名：</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/SpringMVC%E5%AE%9E%E9%AA%8C.assets/image-20220418113706195.png" alt="image-20220418113706195"></p>
<p>改地址：</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/SpringMVC%E5%AE%9E%E9%AA%8C.assets/image-20220418113814242.png" alt="image-20220418113814242"></p>
<p>结果：</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/SpringMVC%E5%AE%9E%E9%AA%8C.assets/image-20220418113915423.png" alt="image-20220418113915423"></p>
<p><strong>原理图</strong></p>
<p>\1. 用户访问 &#x2F;index<br>\2. 根据web.xml中的配置 所有的访问都会经过DispatcherServlet<br>\3. 根据 根据配置文件springmvc-servlet.xml ，访问路径&#x2F;index<br>会进入IndexController类<br>\4. 在IndexController中指定跳转到页面index.jsp，并传递message数据<br>\5. 在index.jsp中显示message信息</p>
<img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/SpringMVC%E5%AE%9E%E9%AA%8C.assets/image-20220418114018990.png" alt="image-20220418114018990" style="zoom: 67%;" />

<h1 id="视图定位"><a href="#视图定位" class="headerlink" title="视图定位"></a>视图定位</h1><p>如果代码写成这样，就表示跳转到页面 index.jsp<br>new ModelAndView(“<strong>index.jsp</strong>“);</p>
<p>所谓的视图定位，指的是代码还是写成这样，但是会跳转到 &#x2F;WEB-INF&#x2F;page&#x2F;index.jsp<br>new ModelAndView(“<strong>index</strong>“);</p>
<p><strong>修改springmvc-servlet.xml</strong></p>
<p>修改springmvc-servlet.xml，增加</p>
<p>其作用是把视图约定在 <strong>&#x2F;WEB-INF&#x2F;page&#x2F;*.jsp</strong> 这个位置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/page/&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>修改IndexController</strong></p>
<p>把IndexController类的这一行代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;index.jsp&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>修改为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;index&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>移动index.jsp</strong></p>
<p>在WEB-INF下新建目录page<br>把index.jsp移动到 WEB-INF&#x2F;page 目录下</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/SpringMVC%E5%AE%9E%E9%AA%8C.assets/image-20220418114507395.png" alt="image-20220418114507395"></p>
<p><strong>测试</strong></p>
<p>访问页面</p>
<p><a href="http://127.0.0.1:8080/springmvc/index">http://127.0.0.1:8080/springmvc/index</a></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/SpringMVC%E5%AE%9E%E9%AA%8C.assets/image-20220418114545278.png" alt="image-20220418114545278"></p>
<h1 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h1><p><strong>修改IndexController</strong></p>
<p>在类前面加上**@Controller** 表示该类是一个控制器<br>在方法handleRequest 前面加上 <strong>@RequestMapping(“&#x2F;index”)</strong> 表示路径&#x2F;index会映射到该方法上<br><strong>注意</strong>：<strong>不再</strong>让IndexController实现Controller接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        mav.addObject(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Hello Spring MVC&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>修改springmvc-servlet.xml</strong></p>
<p>去掉映射相关的配置，因为已经使用<strong>注解方式</strong>了</p>
<p>增加<code>&lt;context:component-scan base-package=&quot;controller&quot; /&gt;</code></p>
<p>表示从包controller下扫描有**@Controller**注解的类</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;controller&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;irViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/page/&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--     &lt;bean id=&quot;simpleUrlHandlerMapping&quot; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--         class=&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--         &lt;property name=&quot;mappings&quot;&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--             &lt;props&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                 &lt;prop key=&quot;/index&quot;&gt;indexController&lt;/prop&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--             &lt;/props&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--         &lt;/property&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--     &lt;/bean&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--     &lt;bean id=&quot;indexController&quot; class=&quot;controller.IndexController&quot;&gt;&lt;/bean&gt; --&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/SpringMVC%E5%AE%9E%E9%AA%8C.assets/image-20220418114935911.png" alt="image-20220418114935911"></p>
<h1 id="接受表单数据"><a href="#接受表单数据" class="headerlink" title="接受表单数据"></a>接受表单数据</h1><p><strong>pojo</strong></p>
<p>实体类Product</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> price;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">float</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>addProduct.jsp</strong></p>
<p>在<strong>web目录下</strong> （不是在WEB-INF下）增加商品的页面addProduct.jsp<br><strong>注意</strong>：产品名称input的name要使用<strong>name</strong>，<strong>而不是</strong> product.name</p>
<p>action属性规定当提交表单时，向何处发送表单数据</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/SpringMVC%E5%AE%9E%E9%AA%8C.assets/image-20220418120638474.png" alt="image-20220418120638474"></p>
<blockquote>
<p>addProduct.jsp里面的form action&#x3D;”addProduct”，表示提交后跳转到&#x2F;addProduct，然后就被ProductController处理了</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot; import=&quot;java.util.*&quot; isELIgnored=&quot;false&quot;%&gt;</span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;addProduct&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    产品名称 ：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    产品价格： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;增加商品&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>ProductController</strong></p>
<p>控制器ProductController，准备一个add方法映射&#x2F;addProduct路径</p>
<p>为add方法准备一个Product 参数，用于接收注入</p>
<p>最后跳转到showProduct页面显示用户提交的数据</p>
<blockquote>
<p>ProductController.add方法接收的是Product对象</p>
<p>spring收到消息后会根据字段名调用setter方法设置数据</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/addProduct&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">add</span><span class="params">(Product product)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;showProduct&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>showProduct.jsp</strong></p>
<p>在<strong>WEB-INF&#x2F;page</strong> 目录下创建 showProduct.jsp<br>用 EL 表达式显示用户提交的名称和价格</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot;%&gt;</span><br><span class="line"> </span><br><span class="line">产品名称： $&#123;product.name&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">产品价格： $&#123;product.price&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<p>访问页面</p>
<p><a href="http://127.0.0.1:8080/springmvc/addProduct.jsp">http://127.0.0.1:8080/springmvc/addProduct.jsp</a></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/SpringMVC%E5%AE%9E%E9%AA%8C.assets/image-20220418115911535.png" alt="image-20220418115911535"></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/SpringMVC%E5%AE%9E%E9%AA%8C.assets/image-20220418115924106.png" alt="image-20220418115924106"></p>
<h1 id="客户端跳转"><a href="#客户端跳转" class="headerlink" title="客户端跳转"></a>客户端跳转</h1><p><strong>修改IndexController</strong></p>
<p>首先映射&#x2F;jump到jump()方法<br>在jump()中编写如下代码，redirect:&#x2F;index即表示客户端跳转的意思</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/jump&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">jump</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;redirect:/index&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<p>访问页面，自动跳转到<a href="http://127.0.0.1:8080/springmvc/index">127.0.0.1:8080&#x2F;springmvc&#x2F;index</a>了</p>
<p><a href="http://127.0.0.1:8080/springmvc/jump">http://127.0.0.1:8080/springmvc/jump</a></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/SpringMVC%E5%AE%9E%E9%AA%8C.assets/image-20220418121621535.png" alt="image-20220418121621535"></p>
<h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p><strong>修改IndexController</strong></p>
<p>映射 &#x2F;check 到方法check()<br>为方法check()提供<strong>参数HttpSession session</strong>，这样就可以在方法体中使用session了<br>接下来的逻辑就是每次访问为session中的count+1.<br>最后跳转到check.jsp页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/check&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">check</span><span class="params">(HttpSession session)</span> &#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> (Integer) session.getAttribute(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="literal">null</span>)</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">    i++;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;count&quot;</span>, i);</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;check&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>check.jsp</strong></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/SpringMVC%E5%AE%9E%E9%AA%8C.assets/image-20220418121848401.png" alt="image-20220418121848401"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">         pageEncoding=&quot;UTF-8&quot; isELIgnored=&quot;false&quot;%&gt;</span><br><span class="line"></span><br><span class="line">session中记录的访问次数：$&#123;count&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<p>访问页面</p>
<p><a href="http://127.0.0.1:8080/springmvc/check">http://127.0.0.1:8080/springmvc/check</a></p>
<p>每次访问，次数都+1</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/SpringMVC%E5%AE%9E%E9%AA%8C.assets/image-20220418122039955.png" alt="image-20220418122039955"></p>
<h1 id="中文问题"><a href="#中文问题" class="headerlink" title="中文问题"></a>中文问题</h1><p>按照上述直接输入中文会乱码</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/SpringMVC%E5%AE%9E%E9%AA%8C.assets/image-20220418122631411.png" alt="image-20220418122631411"></p>
<p>在Spring MVC中处理中文问题和<a href="https://how2j.cn/k/filter/filter-encoding/589.html">Filter处理中文问题</a>是一样的手段</p>
<p><strong>Filter</strong></p>
<p>修改web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">&quot;2.4&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee</span></span></span><br><span class="line"><span class="string"><span class="tag">http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">            org.springframework.web.servlet.DispatcherServlet</span><br><span class="line">        <span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>addProduct.jsp</strong></p>
<p>为form 设置method&#x3D;”post”</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">         pageEncoding=&quot;UTF-8&quot; import=&quot;java.util.*&quot; isELIgnored=&quot;false&quot;%&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;addProduct&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    产品名称 ：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    产品价格： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;增加商品&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<p>重启tomcat,访问页面</p>
<p><a href="http://127.0.0.1:8080/springmvc/addProduct.jsp">http://127.0.0.1:8080/springmvc/addProduct.jsp</a></p>
<p>提交数据</p>
<p><strong>注：</strong> SpringMVC会自动检测类发生的变化，但是web.xml做的改动还是必须重启tomcat才可以看到效果</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/SpringMVC%E5%AE%9E%E9%AA%8C.assets/image-20220418122534243.png" alt="image-20220418122534243"></p>
<h1 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h1><p><em><em>配置web.xml允许访问</em>.jpg</em>*</p>
<p>在web.xml中新增加一段</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jpg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">表示允许访问*.jpg。</span><br></pre></td></tr></table></figure>

<p>为什么要加这一段呢？ 因为配置springmvc的servlet的时候，使用的路径是**”&#x2F;“**，导致静态资源在默认情况下不能访问，所以要加上这一段，允许访问jpg。 <strong>并且必须加在springmvc的servlet之前</strong></p>
<p>如果你配置spring-mvc使用的路径是&#x2F;*.do，就不会有这个问题了。</p>
<p>注：这里仅仅是允许访问jpg,如果你要显示png或者gif那么需要额外进行配置</p>
<p><strong>配置springmvc-servlet.xml</strong></p>
<p>新增加一段配置，开放对上传功能的支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>upload.jsp 上传页面</strong></p>
<p>在web文件夹下创建</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/SpringMVC%E5%AE%9E%E9%AA%8C.assets/image-20220418123650941.png" alt="image-20220418123650941"></p>
<p>上传页面，需要注意的是form 的两个属性必须提供<br>method&#x3D;”post” 和 enctype&#x3D;”multipart&#x2F;form-data” 缺一不可<br>上传组件 增加一个属性 <strong>accept&#x3D;”image&#x2F;*“</strong> 表示只能选择图片进行上传<br>留意 &lt;input type&#x3D;”file” name&#x3D;”<strong>image**” accept&#x3D;”image&#x2F;*” &#x2F;&gt; 这个image，后面会用到这个</strong>image**</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">         pageEncoding=&quot;UTF-8&quot; import=&quot;java.util.*&quot; isELIgnored=&quot;false&quot;%&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;uploadImage&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    选择图片:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;image&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/*&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>准备UploadedImageFile</strong></p>
<p>在UploadedImageFile中封装MultipartFile类型的字段 image ，用于接受页面的注入</p>
<p>这里的字段 image必须和上传页面upload.jsp中的image<br>&lt;input type&#x3D;”file” name&#x3D;”**image**” accept&#x3D;”image&#x2F;*” &#x2F;&gt;<br>保持一致</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadedImageFile</span> &#123;</span><br><span class="line">    MultipartFile image;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> MultipartFile <span class="title function_">getImage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImage</span><span class="params">(MultipartFile image)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.image = image;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UploadController 上传控制器</strong></p>
<p>新建类UploadController 作为上传控制器<br>准备方法upload 映射上传路径&#x2F;uploadImage<br>\1. 方法的第二个参数UploadedImageFile 中已经注入好了 image<br>\2. 通过 RandomStringUtils.randomAlphanumeric(10);获取一个随机文件名。 因为用户可能上传相同文件名的文件，为了不覆盖原来的文件，通过随机文件名的办法来规避<br>\3. 根据request.getServletContext().getRealPath 获取到web目录下的image目录，用于存放上传后的文件。<br>\4. 调用file.getImage().transferTo(newFile); 复制文件<br>\5. 把生成的随机文件名提交给视图，用于后续的显示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 准备方法upload 映射上传路径/uploadImage，也就是从upload.jsp注入来过的file</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/uploadImage&quot;)</span></span><br><span class="line">    <span class="comment">// 方法的第二个参数UploadedImageFile 中已经注入好了 image</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">upload</span><span class="params">(HttpServletRequest request, UploadedImageFile file)</span> <span class="keyword">throws</span> IllegalStateException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过 RandomStringUtils.randomAlphanumeric(10);获取一个随机文件名。 因为用户可能上传相同文件名的文件，为了不覆盖原来的文件，通过随机文件名的办法来规避</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> RandomStringUtils.randomAlphanumeric(<span class="number">10</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> name + <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据request.getServletContext().getRealPath 获取到web目录下的image目录，用于存放上传后的文件。</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">newFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(request.getServletContext().getRealPath(<span class="string">&quot;/image&quot;</span>), newFileName);</span><br><span class="line">        <span class="comment">// getParentFile().mkdirs()其作用就是为了避免文件创建失败（该文件所在的文件夹不存在所以创建它所在的文件目录）</span></span><br><span class="line">        <span class="comment">// 注意mkdirs() ,方法 ，如果文件夹已经存在，是不会再次创建的</span></span><br><span class="line">        newFile.getParentFile().mkdirs();</span><br><span class="line">        <span class="comment">// 调用file.getImage().transferTo(newFile); 复制文件</span></span><br><span class="line">        file.getImage().transferTo(newFile);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把生成的随机文件名提交给视图，用于后续的显示</span></span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;showUploadedFile&quot;</span>);</span><br><span class="line">        mav.addObject(<span class="string">&quot;imageName&quot;</span>, newFileName);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>showUploadedFile.jsp 显示图片的页面</strong></p>
<p>在WEB-INF&#x2F;page 下新建文件showUploadedFile 显示上传的图片</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span>%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;img src=<span class="string">&quot;image/$&#123;imageName&#125;&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<p><strong>整体流程解释：</strong></p>
<blockquote>
<p>首先访问upload.jsp点击上传。此时会建立属于SpringMVC的servlet既DispatcherServlet来进行相关访问的处理，之后通过springm-servlet.xml 和web.xml中的映射得知该操作交由UploadController进行处理，UploadController需要两个参数，是request和UploadedImageFile类型的file，那么spring会生成一个UploadedImageFile对象并调用它的setImage方法把上传的image赋值给UploadedImageFile对象的MultipartFile（也是一个spring内部的类，不过它属于UploadedImageFile对象的一个属性）属性，此时便有了一个拥有MultipartFile属性的UploadedImageFile对象。然后把UploadedImageFile对象和request传入了Controller，之后在这里随机生成一个文件名，同时获取Spring的servlet所在的目录，并在其下创建一个image目录和一个随机生成文件名的jpg文件，之后调用UploadedImageFile对象的getImage（）方法获取图像，再调用这个图像的tranferTo（）方法，把file赋值给新生成的jpg空文件，之后告知showImage视图，图像的相对路径（因为showImage视图是由Spring生成的，所以它会在Spring的Servlet的image目录下寻找相关文件）并显示出来。</p>
</blockquote>
<p><strong>测试</strong></p>
<p>访问页面</p>
<p><a href="http://127.0.0.1:8080/springmvc/upload.jsp">http://127.0.0.1:8080/springmvc/upload.jsp</a></p>
<p>选择jpg文件进行上传</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/SpringMVC%E5%AE%9E%E9%AA%8C.assets/image-20220418125022293.png" alt="image-20220418125022293"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis实验</title>
    <url>/2022/07/19/Mybatis%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>平时我们都用JDBC访问数据库，除了需要自己写SQL之外，还必须操作Connection, Statement, ResultSet 这些其实只是手段的辅助类。 不仅如此，访问不同的表，还会写很多雷同的代码，显得繁琐和枯燥。</p>
<p>那么用了Mybatis之后，只需要自己提供SQL语句，其他的工作，诸如建立连接，Statement， JDBC相关异常处理等等都交给Mybatis去做了，那些重复性的工作Mybatis也给做掉了，我们只需要关注在增删改查等操作层面上，而把技术细节都封装在了我们看不见的地方。</p>
<span id="more"></span>

<p><strong>创建数据库</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database how2java</span><br></pre></td></tr></table></figure>

<p><strong>创建表</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE how2java;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> category_ (</span><br><span class="line">  id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>MyISAM AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>

<p><strong>导入数据</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE how2java;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> category_ <span class="keyword">VALUES</span> (<span class="keyword">null</span>,<span class="string">&#x27;category1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> category_ <span class="keyword">VALUES</span> (<span class="keyword">null</span>,<span class="string">&#x27;category2&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>上面数据库的三步完成后截图：</strong></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Mybatis%E5%AE%9E%E9%AA%8C.assets/image-20220417225356691.png" alt="image-20220417225356691"></p>
<p><strong>创建项目</strong></p>
<blockquote>
<p>e:\project\mybatis</p>
</blockquote>
<p><strong>导包</strong></p>
<blockquote>
<p>C:\Users\hahaha\Desktop\计算机\spring\mybatis_experiment_HOW2J\lib</p>
</blockquote>
<p><strong>创建实体类</strong></p>
<p>准备实体类Category，用于映射表category_</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.pojo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Category</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>配置文件mybatis-config.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.how2java.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/how2java/pojo/Category.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>解释：</p>
<p>在src目录下创建mybatis的主配置文件<strong>mybatis-config.xml</strong> (相当于hibernate.cfg.xml，如果没有hibernate基础请忽略本句)。<br>其作用主要是提供连接数据库用的驱动，数据库名称，编码方式，账号密码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/how2java?characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>以及别名，<strong>自动扫描com.how2java.pojo下的类型</strong>，使得在后续<a href="https://how2j.cn/k/mybatis/mybatis-tutorial/1087.html#step4202">配置文件Category.xml</a>中使用resultType的时候，可以直接使用Category,而不必写全com.how2java.pojo.Category</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.how2java.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>映射Category.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/how2java/pojo/Category.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>配置文件Category.xml</strong></p>
<p>在包com.how2java.pojo下，新建文件Category.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.how2java.pojo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listCategory&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Category&quot;</span>&gt;</span></span><br><span class="line">            select * from   category_     </span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>解释：</p>
<p>表示命名空间是com.how2java.pojo，在后续调用sql语句的时候，会用到它</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">namespace=&quot;com.how2java.pojo&quot;</span><br></pre></td></tr></table></figure>

<p>里面定义了一条sql语句</p>
<p>这条sql语句用id: <strong>listCategory</strong> 进行标示以供后续代码调用。<strong>resultType&#x3D;”Category”</strong> 表示返回的是一个Category类型的对象，里面就有在数据库里面查询出来的值，这里本应该使用的是 com.how2java.pojo.Category, 但是因为上一步配置了别名（自动扫描com.how2java.pojo下面的类型），所以直接使用Category就行了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listCategory&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Category&quot;</span>&gt;</span></span><br><span class="line">    select * from   category_</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>测试类TestMybatis</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Category;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMybatis</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 根据配置文件mybatis-config.xml得到sqlSessionFactory(会话工厂)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 然后再根据sqlSessionFactory 打开会话得到session</span></span><br><span class="line">        SqlSession session=sqlSessionFactory.openSession();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 最后通过session的selectList方法，调用sql语句listCategory。</span></span><br><span class="line">        <span class="comment">// listCategory这个就是在配置文件Category.xml中那条sql语句设置的id</span></span><br><span class="line">        <span class="comment">// 相当于执行了select * from   category_，因为listCategory是他的别名</span></span><br><span class="line">        <span class="comment">// 执行完毕之后，得到一个Category集合（集合里面的每个元素，就是一条数据，也就是一个Category对象），遍历即可看到数据</span></span><br><span class="line">        List&lt;Category&gt; cs=session.selectList(<span class="string">&quot;listCategory&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Category c : cs) &#123;</span><br><span class="line">            System.out.println(c.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>基本原理图</strong></p>
<ol>
<li><p>应用程序找Mybatis要数据</p>
</li>
<li><p>mybatis从数据库中找来数据<br>2.1 通过mybatis-config.xml 定位哪个数据库<br>2.2 通过Category.xml执行对应的select语句<br>2.3 基于Category.xml把返回的数据库记录封装在Category对象中<br>2.4 把多个Category对象装在一个Category集合中</p>
</li>
<li><p>返回一个Category集合</p>
</li>
</ol>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Mybatis%E5%AE%9E%E9%AA%8C.assets/image-20220416205104364.png" alt="image-20220416205104364"></p>
<h2 id="CRUD-增删改查"><a href="#CRUD-增删改查" class="headerlink" title="CRUD(增删改查)"></a>CRUD(增删改查)</h2><p><strong>配置文件Category.xml</strong></p>
<p>首先一次性修改配置文件Category.xml，提供CRUD对应的sql语句。<br>每个SQL如何使用在后续对应操作里一一讲解。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.how2java.pojo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addCategory&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Category&quot;</span> &gt;</span></span><br><span class="line">            insert into category_ ( name ) values (#&#123;name&#125;)   </span><br><span class="line">        <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">        <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteCategory&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Category&quot;</span> &gt;</span></span><br><span class="line">            delete from category_ where id= #&#123;id&#125;  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCategory&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;_int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Category&quot;</span>&gt;</span></span><br><span class="line">            select * from   category_  where id= #&#123;id&#125;   </span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateCategory&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Category&quot;</span> &gt;</span></span><br><span class="line">            update category_ set name=#&#123;name&#125; where id=#&#123;id&#125;   </span><br><span class="line">        <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listCategory&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Category&quot;</span>&gt;</span></span><br><span class="line">            select * from   category_     </span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>增加</strong></p>
<p>addCategory对应的插入sql语句，#{name}会自动获取c对象的name属性值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.how2java.pojo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addCategory&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Category&quot;</span> &gt;</span></span><br><span class="line">    insert into category_ ( name ) values (#&#123;name&#125;)    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过session.insert调用addCategory对应的SQL语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Category</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Category</span>();</span><br><span class="line">c.setName(<span class="string">&quot;新增加的Category&quot;</span>);</span><br><span class="line">session.insert(<span class="string">&quot;addCategory&quot;</span>,c);</span><br></pre></td></tr></table></figure>

<p>测试类，增加后再遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Category;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMybatis</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="type">Category</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Category</span>();</span><br><span class="line">        c.setName(<span class="string">&quot;新增加的Category&quot;</span>);</span><br><span class="line">        session.insert(<span class="string">&quot;addCategory&quot;</span>,c);</span><br><span class="line"></span><br><span class="line">        listAll(session);</span><br><span class="line"></span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">listAll</span><span class="params">(SqlSession session)</span> &#123;</span><br><span class="line">        List&lt;Category&gt; cs = session.selectList(<span class="string">&quot;listCategory&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Category c : cs) &#123;</span><br><span class="line">            System.out.println(c.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：增加了一条数据进去</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Mybatis%E5%AE%9E%E9%AA%8C.assets/image-20220417235245255.png" alt="image-20220417235245255"></p>
<p><strong>删除</strong></p>
<p>删除id&#x3D;6的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Category</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Category</span>();</span><br><span class="line">c.setId(<span class="number">6</span>);</span><br><span class="line">session.delete(<span class="string">&quot;deleteCategory&quot;</span>,c);</span><br></pre></td></tr></table></figure>

<p>deleteCategory对应删除的sql语句，#{id}会自动获取c对象的id属性值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteCategory&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Category&quot;</span> &gt;</span></span><br><span class="line">    delete from category_ where id= #&#123;id&#125;   </span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Mybatis%E5%AE%9E%E9%AA%8C.assets/image-20220417235629587.png" alt="image-20220417235629587"></p>
<p><strong>获取</strong></p>
<p>通过session.selectOne获取id&#x3D;3的记录</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Category c= session.selectOne(<span class="string">&quot;getCategory&quot;</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>getCategory对应的sql语句：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCategory&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;_int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Category&quot;</span>&gt;</span></span><br><span class="line">    select * from   category_  where id= #&#123;id&#125;    </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>修改</strong></p>
<p>通过session.update进行修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Category c= session.selectOne(<span class="string">&quot;getCategory&quot;</span>,<span class="number">3</span>);</span><br><span class="line">c.setName(<span class="string">&quot;修改了的Category名稱&quot;</span>);</span><br><span class="line">session.update(<span class="string">&quot;updateCategory&quot;</span>,c);</span><br></pre></td></tr></table></figure>

<p>updateCategory对应的sql语句：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateCategory&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Category&quot;</span> &gt;</span></span><br><span class="line">    update category_ set name=#&#123;name&#125; where id=#&#123;id&#125;    </span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>查询所有</strong></p>
<p>session.selectList执行查询语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">listAll</span><span class="params">(SqlSession session)</span> &#123;</span><br><span class="line">    List&lt;Category&gt; cs = session.selectList(<span class="string">&quot;listCategory&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Category c : cs) &#123;</span><br><span class="line">        System.out.println(c.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>listCategory对应的sql语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listCategory&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Category&quot;</span>&gt;</span></span><br><span class="line">    select * from   category_      </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>MyBatis的传入参数parameterType类型分两种</p>
<ol>
<li>基本数据类型：int,string,long,Date;</li>
<li>复杂数据类型：类和Map</li>
</ol>
</li>
<li><p>如何获取参数中的值:</p>
<p>2.1  基本数据类型：#{value}或${value} 获取参数中的值</p>
<p>2.2  复杂数据类型：#{属性名}或${属性名}  ，map中则是#{key}或${key}</p>
</li>
</ol>
<p>resultType:</p>
<p>1、基本类型  ：resultType&#x3D;基本类型</p>
<p>2、List类型：   resultType&#x3D;List中元素的类型</p>
<p>3、Map类型：   单条记录：resultType &#x3D;map</p>
<p>​							 多条记录：resultType &#x3D;Map中value的类型</p>
<blockquote>
<p>parameterType 指定输入参数类型，mybatis 通过 ognl 从输入对象中获取参数值拼接在 sql 中。 </p>
<p>resultType 指定输出结果类型，mybatis 将 sql 查询结果的一行记录数据映射为 resultType 指定类型的对象。如果有多条数据，则分别进行映射，并把对象放到容器List中。 </p>
<p>selectOne 查询一条记录，如果使用 selectOne 查询多条记录则抛出异常。 </p>
<p>selectList 可以查询一条或多条记录，返回一个 List 集合。</p>
</blockquote>
<h2 id="更多查询"><a href="#更多查询" class="headerlink" title="更多查询"></a>更多查询</h2><p><strong>模糊查询</strong></p>
<p>修改Category.xml，提供listCategoryByName查询语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listCategoryByName&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Category&quot;</span>&gt;</span></span><br><span class="line">	select * from   category_  where name like concat(&#x27;%&#x27;,#&#123;0&#125;,&#x27;%&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试类由<code>List&lt;Category&gt; cs = session.selectList(&quot;listCategory&quot;);</code></p>
<p>变为<code>List&lt;Category&gt; cs = session.selectList(&quot;listCategoryByName&quot;,&quot;cat&quot;);</code></p>
<p>解释：</p>
<p>SQL语句中： </p>
<p>CONCAT 关键字：把字符串拼接到一起 </p>
<p>LIKE 关联字：模糊匹配 。”%” 可用于定义通配符（模式中缺少的字母）。</p>
<p>参数解释：<br>like concat(’%&#x2F;’,#{datePath,jdbcType&#x3D;VARCHAR},’&#x2F;%’)</p>
<pre><code>    concat函数：
       第一个参数 ，就是&#39;%&#39;，其中%后边可以加上一些常量字符比如  / 。
       第二参数，基本上就是传递过来的参数 。
       第三个参数，是结尾的 &#39;%&#39;， %前边可以加一定的常量字符比如  / 。
</code></pre>
<p>出现了cat的字符串都输出了：</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Mybatis%E5%AE%9E%E9%AA%8C.assets/image-20220418084145071.png" alt="image-20220418084145071"></p>
<p><strong>多条件查询</strong></p>
<p>结合前面的模糊查询，多一个id&gt;多少的条件<br>Category.xml 准备sql语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listCategoryByIdAndName&quot;</span>  <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Category&quot;</span>&gt;</span></span><br><span class="line">    select * from   category_  where id&gt; #&#123;id&#125;  and name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试代码<br>因为是多个参数，而selectList方法又只接受一个参数对象，所以需要把多个参数放在Map里，然后把这个Map对象作为参数传递进去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,Object&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">params.put(<span class="string">&quot;id&quot;</span>, <span class="number">3</span>);</span><br><span class="line">params.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;cat&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;Category&gt; cs = session.selectList(<span class="string">&quot;listCategoryByIdAndName&quot;</span>,params);</span><br><span class="line"><span class="keyword">for</span> (Category c : cs) &#123;</span><br><span class="line">    System.out.println(c.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释模糊查询的逻辑：session(会话)</p>
<p>Test.java：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="comment">//将mybatis-config配置文件，作为输入流。这个文件里面有数据库连接，category.xml映射。</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="comment">//根据输入流的配置文件，创建一个sqlsession工厂</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        <span class="comment">//根据工厂，创建一个用来操作数据库的示例对象session</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建集合cs，用来存放session对象获取的集合数据。通过“listCategoryByName”锁定Category.xml中的sql语句，将“cat”传值进去，用来进行模糊查询。selectlist()方法用来将查询的单个或者多个结果放入一个list集合中，并返回给新建的集合cs</span></span><br><span class="line">        List&lt;Category&gt; cs = session.selectList(<span class="string">&quot;listCategoryByName&quot;</span>,<span class="string">&quot;cat&quot;</span>);</span><br><span class="line">        <span class="comment">//将获得的集合遍历输出</span></span><br><span class="line">        <span class="keyword">for</span> (Category c : cs) &#123;</span><br><span class="line">            System.out.println(c.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//提交数据，用来更新数据库。（增加 修改）</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">//关闭会话</span></span><br><span class="line">        session.close();</span><br></pre></td></tr></table></figure>

<h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><p><strong>表结构</strong></p>
<p>分类表不变化，新增加产品表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use how2java;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product_(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">30</span>)  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">price <span class="type">float</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">cid <span class="type">int</span> ,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">)AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>

<p><strong>准备数据</strong></p>
<p>清空category_ 和 product_ 表<br>新增2条分类数据，id分别是1,2<br>新增6条产品数据，分别关联上述2条分类数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use how2java;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> category_;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> category_ <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;category1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> category_ <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="string">&#x27;category2&#x27;</span>);</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> product_;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product_ <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;product a&#x27;</span>, <span class="number">88.88</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product_ <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="string">&#x27;product b&#x27;</span>, <span class="number">88.88</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product_ <span class="keyword">VALUES</span> (<span class="number">3</span>,<span class="string">&#x27;product c&#x27;</span>, <span class="number">88.88</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product_ <span class="keyword">VALUES</span> (<span class="number">4</span>,<span class="string">&#x27;product x&#x27;</span>, <span class="number">88.88</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product_ <span class="keyword">VALUES</span> (<span class="number">5</span>,<span class="string">&#x27;product y&#x27;</span>, <span class="number">88.88</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product_ <span class="keyword">VALUES</span> (<span class="number">6</span>,<span class="string">&#x27;product z&#x27;</span>, <span class="number">88.88</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Mybatis%E5%AE%9E%E9%AA%8C.assets/image-20220418085539997.png" alt="image-20220418085539997"></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Mybatis%E5%AE%9E%E9%AA%8C.assets/image-20220418085549874.png" alt="image-20220418085549874"></p>
<p><strong>Product实体类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> price;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">float</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Product [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, price=&quot;</span> + price + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>修改Category实体类</strong></p>
<p>修改Category实体类，提供products的集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.pojo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Category</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    List&lt;Product&gt; products;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">getProducts</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> products;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProducts</span><span class="params">(List&lt;Product&gt; products)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.products = products;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Category [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>暂时无需 Product.xml</strong></p>
<p>本例演示通过分类对产品的一对多，暂时无需 Product.xml</p>
<p><strong>修改Category.xml</strong></p>
<p>通过left join关联查询，对Category和Product表进行关联查询。<br>与前面学习的有所区别，这里不是用的resultType, 而是resultMap，通过resultMap把数据取出来放在<strong>对应的</strong> 对象属性里<br><strong>注</strong>： Category的id 字段 和Product的id字段同名，Mybatis不知道谁是谁的，所以需要通过取别名cid,pid来区分。<br>name字段同理。</p>
<p>我的理解：</p>
<p>resultMap是用来给返回的结果起别名的，其映射是property和column的映射，</p>
<p>比如说<code>&lt;id column=&quot;cid&quot; property=&quot;id&quot; /&gt;</code>的意思就是，key是属性id，值是数据库中取出来的cid，cid就是数据库中c.id的别名</p>
<p>而<code>&lt;result column=&quot;price&quot; property=&quot;price&quot; /&gt;</code>因为属性price和数据库中的列price名字一样，所以没有起别名，直接把属性price作为key，取出value，也就是数据库中的price</p>
<p>这里也可以看出取别名的过程，将category_表取名为c，将product__表取名为p。将c.id列取名为cid，将p.id列取名为pid</p>
<p><code>select c.*, p.*, c.id &#39;cid&#39;, p.id &#39;pid&#39;, c.name &#39;cname&#39;, p.name &#39;pname&#39; from category_ c left join product_ p on c.id = p.cid</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.how2java.pojo&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resultMap最终还是要将结果映射到pojo上，type就是指定映射到哪一个pojo --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id：设置ResultMap的id --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Category&quot;</span> <span class="attr">id</span>=<span class="string">&quot;categoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置主键，是关联products的唯一标识 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- property：主键在pojo中的属性名 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- column：主键在数据库中的列名或者别名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 定义普通属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 一对多的关系 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- property: 指的是集合属性的值, ofType：指的是集合中元素的类型 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;products&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Product&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置主键，是关联categoryBean的唯一标识 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;pid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;price&quot;</span> <span class="attr">property</span>=<span class="string">&quot;price&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 关联查询分类和产品表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listCategory&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;categoryBean&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这里其实是c.id as &#x27;cid&#x27;，省略了as，也就是起别名 --&gt;</span></span><br><span class="line">            select c.*, p.*, c.id &#x27;cid&#x27;, p.id &#x27;pid&#x27;, c.name &#x27;cname&#x27;, p.name &#x27;pname&#x27; from category_ c left join product_ p on c.id = p.cid</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>测试运行TestMybatis</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Category&gt; cs = session.selectList(<span class="string">&quot;listCategory&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Category c : cs) &#123;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">    List&lt;Product&gt; ps = c.getProducts();</span><br><span class="line">    <span class="keyword">for</span> (Product p : ps) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\t&quot;</span>+p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Mybatis%E5%AE%9E%E9%AA%8C.assets/image-20220418093013886.png" alt="image-20220418093013886"></p>
<h2 id="一对多-1"><a href="#一对多-1" class="headerlink" title="一对多"></a>一对多</h2><p><strong>修改Product.java</strong></p>
<p>为Product增加category属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Category category;</span><br><span class="line">     </span><br><span class="line"><span class="keyword">public</span> Category <span class="title function_">getCategory</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> category;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCategory</span><span class="params">(Category category)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.category = category;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Product.xml</strong></p>
<p>提供Product.xml，通过listProduct配置关联查询的sql语句。<br>然后通过resultMap ，进行字段和属性的对应。<br>使用association 进行多对一关系关联，指定表字段名称与对象属性名称的一一对应关系<br><strong>注：</strong> Category的id 字段 和Product的id字段同名，Mybatis不知道谁是谁的，所以需要通过取别名cid,pid来区分。<br>name字段同理。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.how2java.pojo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Product&quot;</span> <span class="attr">id</span>=<span class="string">&quot;productBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;pid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;price&quot;</span> <span class="attr">property</span>=<span class="string">&quot;price&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 多对一的关系 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- property: 指的是属性名称, javaType：指的是属性的类型 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;category&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Category&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据id查询Product, 关联将Orders查询出来 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listProduct&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;productBean&quot;</span>&gt;</span></span><br><span class="line">            select c.*, p.*, c.id &#x27;cid&#x27;, p.id &#x27;pid&#x27;, c.name &#x27;cname&#x27;, p.name &#x27;pname&#x27; from category_ c left join product_ p on c.id = p.cid</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>mybatis-config.xml</strong></p>
<p>在mybatis-config.xml中增加对于Product.xml的映射</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/how2java/pojo/Category.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/how2java/pojo/Product.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>TestMybatis</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Product&gt; ps = session.selectList(<span class="string">&quot;listProduct&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Product p : ps) &#123;</span><br><span class="line">    System.out.println(p+<span class="string">&quot; 对应的分类是 \t &quot;</span>+ p.getCategory());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Mybatis%E5%AE%9E%E9%AA%8C.assets/image-20220418094305520.png" alt="image-20220418094305520"></p>
<h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><p><strong>定义多对多关系</strong></p>
<p>本知识点是基于<a href="https://how2j.cn/k/mybatis/mybatis-many-to-one/1090.html">多对一</a>的基础上进行。<br>在学习之前首先要理清楚多对多的关系，这里以订单Order和产品Product为例：<br>一张订单里 可以包含多种产品<br>一种产品 可以出现在多张订单里<br>这就是多对多关系<br>为了维系多对多关系，必须要一个中间表。 在这里我们使用订单项(OrderItem)表来作为中间表</p>
<p><strong>表结构</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> order_ (</span><br><span class="line">  id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  code <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">) ENGINE<span class="operator">=</span>MyISAM AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> order_item_(</span><br><span class="line">  id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT, </span><br><span class="line">  oid <span class="type">int</span> ,</span><br><span class="line">  pid <span class="type">int</span> ,</span><br><span class="line">  number <span class="type">int</span> ,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY(id)</span><br><span class="line">)AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>

<p><strong>导入数据</strong></p>
<p>在<a href="https://how2j.cn/k/mybatis/mybatis-one-to-many/1089.html#step4228">一对多关系中准备的数据</a>里已经有Product数据里，这里就只准备订单数据和订单项数据：</p>
<ol>
<li>插入两个订单</li>
<li>插入6条订单项数据，建立如下关系<br>2.1 订单1对应产品 1，2，3<br>2.2 订单2对应产品 2，3，4</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_ <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;code000A&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_ <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="string">&#x27;code000B&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_item_ <span class="keyword">VALUES</span> (<span class="keyword">null</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_item_ <span class="keyword">VALUES</span> (<span class="keyword">null</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_item_ <span class="keyword">VALUES</span> (<span class="keyword">null</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_item_ <span class="keyword">VALUES</span> (<span class="keyword">null</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_item_ <span class="keyword">VALUES</span> (<span class="keyword">null</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_item_ <span class="keyword">VALUES</span> (<span class="keyword">null</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<p><strong>实体类</strong></p>
<p>实体类Order和OrderItem</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.pojo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderItem</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> number;</span><br><span class="line">    <span class="keyword">private</span> Order order;</span><br><span class="line">    <span class="keyword">private</span> Product product;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNumber</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNumber</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.order = order;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">getProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProduct</span><span class="params">(Product product)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.product = product;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.pojo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">     </span><br><span class="line">    List&lt;OrderItem&gt; orderItems;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;OrderItem&gt; <span class="title function_">getOrderItems</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orderItems;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrderItems</span><span class="params">(List&lt;OrderItem&gt; orderItems)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderItems = orderItems;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>映射文件Order.xml</strong></p>
<p>后续会解释</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.how2java.pojo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Order&quot;</span> <span class="attr">id</span>=<span class="string">&quot;orderBean&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;oid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;code&quot;</span> <span class="attr">property</span>=<span class="string">&quot;code&quot;</span> /&gt;</span></span><br><span class="line">             </span><br><span class="line">            <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;orderItems&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;OrderItem&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;oiid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;number&quot;</span> <span class="attr">property</span>=<span class="string">&quot;number&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;product&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Product&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;pid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;price&quot;</span> <span class="attr">property</span>=<span class="string">&quot;price&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">association</span>&gt;</span>               </span><br><span class="line">            <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listOrder&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;orderBean&quot;</span>&gt;</span></span><br><span class="line">            select o.*,p.*,oi.*, o.id &#x27;oid&#x27;, p.id &#x27;pid&#x27;, oi.id &#x27;oiid&#x27;, p.name &#x27;pname&#x27;</span><br><span class="line">                from order_ o</span><br><span class="line">                left join order_item_ oi    on o.id =oi.oid</span><br><span class="line">                left join product_ p on p.id = oi.pid</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">             </span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getOrder&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;orderBean&quot;</span>&gt;</span></span><br><span class="line">            select o.*,p.*,oi.*, o.id &#x27;oid&#x27;, p.id &#x27;pid&#x27;, oi.id &#x27;oiid&#x27;, p.name &#x27;pname&#x27;</span><br><span class="line">                from order_ o</span><br><span class="line">                left join order_item_ oi on o.id =oi.oid</span><br><span class="line">                left join product_ p on p.id = oi.pid</span><br><span class="line">            where o.id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>映射文件Product.xml</strong></p>
<p>后续会解释</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.how2java.pojo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Product&quot;</span> <span class="attr">id</span>=<span class="string">&quot;productBean&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;pid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;price&quot;</span> <span class="attr">property</span>=<span class="string">&quot;price&quot;</span> /&gt;</span></span><br><span class="line">     </span><br><span class="line">            <span class="comment">&lt;!-- 多对一的关系 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- property: 指的是属性名称, javaType：指的是属性的类型 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;category&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Category&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listProduct&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;productBean&quot;</span>&gt;</span></span><br><span class="line">            select c.*, p.*, c.id &#x27;cid&#x27;, p.id &#x27;pid&#x27;, c.name &#x27;cname&#x27;, p.name &#x27;pname&#x27;</span><br><span class="line">                from category_ c</span><br><span class="line">                left join product_ p on c.id = p.cid</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getProduct&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;productBean&quot;</span>&gt;</span></span><br><span class="line">            select c.*, p.*, c.id &#x27;cid&#x27;, p.id &#x27;pid&#x27;, c.name &#x27;cname&#x27;, p.name &#x27;pname&#x27;</span><br><span class="line">                from category_ c</span><br><span class="line">                left join product_ p on c.id = p.cid</span><br><span class="line">            where p.id = #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>映射文件OrderItem.xml</strong></p>
<p>后续会解释</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.how2java.pojo&quot;</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">        <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addOrderItem&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;OrderItem&quot;</span>&gt;</span></span><br><span class="line">            insert into order_item_</span><br><span class="line">                values(null,#&#123;order.id&#125;,#&#123;product.id&#125;,#&#123;number&#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">insert</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;deleteOrderItem&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;OrderItem&quot;</span>&gt;</span></span><br><span class="line">            delete from order_item_</span><br><span class="line">                where oid = #&#123;order.id&#125; and pid = #&#123;product.id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">insert</span>&gt;</span>   </span><br><span class="line">     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>修改mybatis-config.xml</strong></p>
<p>添加对于Order.xml和OrderItem的映射</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/how2java/pojo/Category.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/how2java/pojo/Product.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/how2java/pojo/Order.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/how2java/pojo/OrderItem.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>查询操作</strong></p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Mybatis%E5%AE%9E%E9%AA%8C.assets/image-20220418095310028.png" alt="image-20220418095310028" style="zoom:50%;" />

<p>如图所示，查询出所有的订单，然后遍历每个订单下的多条订单项，以及订单项对应的产品名称，价格，购买数量</p>
<p>通过Order.xml的listOrder对应的sql语句进行查询：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;listOrder&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;orderBean&quot;</span>&gt;</span></span><br><span class="line">        select o.*,p.*,oi.*, o.id &#x27;oid&#x27;, p.id &#x27;pid&#x27;, oi.id &#x27;oiid&#x27;, p.name &#x27;pname&#x27;</span><br><span class="line">            from order_ o</span><br><span class="line">            left join order_item_ oi    on o.id =oi.oid</span><br><span class="line">            left join product_ p on p.id = oi.pid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>联合order_ , order_item_, product_ 三张表进行查询</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Order&quot;</span> <span class="attr">id</span>=<span class="string">&quot;orderBean&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;oid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;code&quot;</span> <span class="attr">property</span>=<span class="string">&quot;code&quot;</span> /&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;orderItems&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;OrderItem&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;oiid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;number&quot;</span> <span class="attr">property</span>=<span class="string">&quot;number&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;product&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Product&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;pid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;price&quot;</span> <span class="attr">property</span>=<span class="string">&quot;price&quot;</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">association</span>&gt;</span>				</span><br><span class="line">	<span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>建立关系</strong></p>
<p>如图所示，建立了让订单000A和产品z建立了关系<br>首先通过id分别获取Order对象和Product对象，然后创建一个新的OrderItem对象，接着设置Order，设置Product，设置数量，最后调用”addOrderItem” 对应的sql语句插入数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Order</span> <span class="variable">o1</span> <span class="operator">=</span> session.selectOne(<span class="string">&quot;getOrder&quot;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="type">Product</span> <span class="variable">p6</span> <span class="operator">=</span> session.selectOne(<span class="string">&quot;getProduct&quot;</span>, <span class="number">6</span>);</span><br><span class="line"><span class="type">OrderItem</span> <span class="variable">oi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderItem</span>();</span><br><span class="line">oi.setProduct(p6);</span><br><span class="line">oi.setOrder(o1);</span><br><span class="line">oi.setNumber(<span class="number">200</span>);</span><br><span class="line">session.insert(<span class="string">&quot;addOrderItem&quot;</span>, oi);</span><br></pre></td></tr></table></figure>

<p>addOrderItem调用insert into 语句插入一条OrderItem记录</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addOrderItem&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;OrderItem&quot;</span>&gt;</span></span><br><span class="line">	insert into order_item_ </span><br><span class="line">		values(null,#&#123;order.id&#125;,#&#123;product.id&#125;,#&#123;number&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Mybatis%E5%AE%9E%E9%AA%8C.assets/image-20220418100026482.png" alt="image-20220418100026482" style="zoom:50%;" />

<p><strong>删除关系</strong></p>
<p>如图所示，删除了订单00A和产品z的关系，再次查询，就看不到产品z了。<br>删除关系的时候，通过订单id(1)和产品id(6)进行删除。<br>其实所谓的删除关系，就是删除掉OrderItem记录。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Order</span> <span class="variable">o1</span> <span class="operator">=</span> session.selectOne(<span class="string">&quot;getOrder&quot;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="type">Product</span> <span class="variable">p6</span> <span class="operator">=</span> session.selectOne(<span class="string">&quot;getProduct&quot;</span>,<span class="number">6</span>);</span><br><span class="line"><span class="type">OrderItem</span> <span class="variable">oi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderItem</span>();</span><br><span class="line">oi.setProduct(p6);</span><br><span class="line">oi.setOrder(o1);</span><br><span class="line">session.delete(<span class="string">&quot;deleteOrderItem&quot;</span>, oi);</span><br></pre></td></tr></table></figure>

<p><strong>修改关系</strong></p>
<p>多对多不存在修改关系的做法，就是删除旧的，然后新增一条即达到修改的效果。</p>
<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><p><strong>Mapper接口</strong></p>
<p>新增加接口CategoryMapper ，并在接口中声明的方法上，加上注解<br>对比<a href="https://how2j.cn/k/mybatis/mybatis-crud/1088.html#step4213">配置文件Category.xml</a>，其实就是把SQL语句从XML挪到了注解上来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.how2java.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Delete;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Update;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.how2java.pojo.Category;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot; insert into category_ ( name ) values (#&#123;name&#125;) &quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(Category category)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot; delete from category_ where id= #&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from category_ where id= #&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Category <span class="title function_">get</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update category_ set name=#&#123;name&#125; where id=#&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Category category)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot; select * from category_ &quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Category&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>mybatis-config.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.how2java.mapper.CategoryMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>测试类</strong></p>
<p>进行CRUD的经典操作，来测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMybatis</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">CategoryMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(CategoryMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        add(mapper);</span></span><br><span class="line"><span class="comment">//        delete(mapper);</span></span><br><span class="line"><span class="comment">//        get(mapper);</span></span><br><span class="line"><span class="comment">//        update(mapper);</span></span><br><span class="line">        listAll(mapper);</span><br><span class="line"></span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(CategoryMapper mapper)</span> &#123;</span><br><span class="line">        Category c= mapper.get(<span class="number">8</span>);</span><br><span class="line">        c.setName(<span class="string">&quot;修改了的Category名称&quot;</span>);</span><br><span class="line">        mapper.update(c);</span><br><span class="line">        listAll(mapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(CategoryMapper mapper)</span> &#123;</span><br><span class="line">        Category c= mapper.get(<span class="number">8</span>);</span><br><span class="line">        System.out.println(c.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(CategoryMapper mapper)</span> &#123;</span><br><span class="line">        mapper.delete(<span class="number">2</span>);</span><br><span class="line">        listAll(mapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(CategoryMapper mapper)</span> &#123;</span><br><span class="line">        <span class="type">Category</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Category</span>();</span><br><span class="line">        c.setName(<span class="string">&quot;新增加的Category&quot;</span>);</span><br><span class="line">        mapper.add(c);</span><br><span class="line">        listAll(mapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">listAll</span><span class="params">(CategoryMapper mapper)</span> &#123;</span><br><span class="line">        List&lt;Category&gt; cs = mapper.list();</span><br><span class="line">        <span class="keyword">for</span> (Category c : cs) &#123;</span><br><span class="line">            System.out.println(c.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="一对多-2"><a href="#一对多-2" class="headerlink" title="一对多"></a>一对多</h2><p><strong>CategoryMapper</strong></p>
<p>新增加CategoryMapper接口，查询所有Category<br>@Select注解获取Category类本身</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@Select(&quot; select * from category_ &quot;)</span><br></pre></td></tr></table></figure>

<p>@Results 通过@Result和@Many中调用ProductMapper.listByCategory()方法相结合，来获取一对多关系</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">@Results(&#123;@Result(property = &quot;products&quot;, javaType = List.class, column = &quot;id&quot;,  </span><br><span class="line">          many = @Many(select = &quot;com.how2java.mapper.ProductMapper.listByCategory&quot;))&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryMapper</span> &#123;</span><br><span class="line">    <span class="comment">/*首先，默认情况下，一个column（数据库字段）只映射到 “自身”JavaBean的一个property，即属性。</span></span><br><span class="line"><span class="comment">    在一对多的时候，</span></span><br><span class="line"><span class="comment">    @Result(property=&quot;products&quot;, javaType=List.class, column=&quot;id&quot;,</span></span><br><span class="line"><span class="comment">            many=@Many(select=&quot;com.how2java.mapper.ProductMapper.listByCategory&quot;)),</span></span><br><span class="line"><span class="comment">    这个语句已经通过listByCategory方法把 category表的id字段映射到了products属性，就不会再自动映射到自身的id属性了，所以查询出来自身的id为0；</span></span><br><span class="line"><span class="comment">    所以需要加@Result(property=&quot;id&quot;, column=&quot;id&quot;) 来将id字段映射到id属性</span></span><br><span class="line"><span class="comment">    而在多对一的时候，</span></span><br><span class="line"><span class="comment">    @Result(property=&quot;category&quot;, column=&quot;cid&quot;, one=@One(select=&quot;com.how2java.mapper.CategoryMapper.get&quot;))</span></span><br><span class="line"><span class="comment">    注意：这里引用的字段是cid，不是id！而cid本来就是用于映射到category属性的。所以不存在单字段多属性映射的情况。*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// @Select注解获取Category类本身</span></span><br><span class="line">    <span class="meta">@Select(&quot; select * from category_ &quot;)</span></span><br><span class="line">    <span class="comment">// @Results 通过@Result和@Many中调用ProductMapper.listByCategory()方法相结合，来获取一对多关系</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;id&quot;, column = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">            // property：指定将关联查询的结果封装到Category对象的List&lt;Product&gt; products属性上</span></span><br><span class="line"><span class="meta">            // javaType返回值类型是一个List</span></span><br><span class="line"><span class="meta">            // column：指定在执行@Many注解中定义的select语句时，把category表的id字段当做参数传入</span></span><br><span class="line"><span class="meta">            // many：指定通过@Many注解定义关联查询的语句是ProductMapper中的listByCategory方法</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;products&quot;, javaType = List.class, column = &quot;id&quot;, many = @Many(select = &quot;com.how2java.mapper.ProductMapper.listByCategory&quot;) )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Category&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ProductMapper</strong></p>
<p>新增接口ProductMapper<br>注解@Select用于根据分类id获取产品集合<br>@Select(“ select * from product_ where cid &#x3D; #{cid}”)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot; select * from product_ where cid = #&#123;cid&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">listByCategory</span><span class="params">(<span class="type">int</span> cid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>mybatis-config.xml</strong></p>
<p>添加ProductMapper和CategoryMapper的映射</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.how2java.mapper.CategoryMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.how2java.mapper.ProductMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMybatis</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">        <span class="type">CategoryMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(CategoryMapper.class);</span><br><span class="line"></span><br><span class="line">        listAll(mapper);</span><br><span class="line"></span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">listAll</span><span class="params">(CategoryMapper mapper)</span> &#123;</span><br><span class="line">        List&lt;Category&gt; cs = mapper.list();</span><br><span class="line">        <span class="keyword">for</span> (Category c : cs) &#123;</span><br><span class="line">            System.out.println(c.getName());</span><br><span class="line">            List&lt;Product&gt; ps = c.getProducts();</span><br><span class="line">            <span class="keyword">for</span> (Product p : ps) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;\t&quot;</span>+p.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h2><p><strong>CategoryMapper</strong></p>
<p>新增CategoryMapper接口，提供get方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot; select * from category_ where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Category <span class="title function_">get</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ProductMapper</strong></p>
<p>新增ProductMapper接口，提供list方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot; select * from product_ &quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(property=&quot;category&quot;,column=&quot;cid&quot;,one=@One(select=&quot;com.how2java.mapper.CategoryMapper.get&quot;))</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Product&gt; ps= mapper.list();</span><br><span class="line"><span class="keyword">for</span> (Product p : ps) &#123;</span><br><span class="line">    System.out.println(p + <span class="string">&quot;\t对应的分类是:\t&quot;</span> + p.getCategory().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多对多-1"><a href="#多对多-1" class="headerlink" title="多对多"></a>多对多</h2><p><strong>ProductMapper</strong></p>
<p>新增一个ProductMapper接口，提供 get方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from product_ where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">get</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>OrderItemMapper</strong></p>
<p>新增OrderItemMapper，提供listByOrder方法。<br>这里会与Product建立多对一关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderItemMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot; select * from order_item_ where oid = #&#123;oid&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(property=&quot;product&quot;,column=&quot;pid&quot;,one=@One(select=&quot;com.how2java.mapper.ProductMapper.get&quot;))</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;OrderItem&gt; <span class="title function_">listByOrder</span><span class="params">(<span class="type">int</span> oid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>OrderMapper</strong></p>
<p>新增OrderMapper，提供list方法，这里会与OrderItem建立一对多关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from order_&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;id&quot;, column = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;orderItems&quot;, javaType = List.class, column = &quot;id&quot;,</span></span><br><span class="line"><span class="meta">                    many = @Many(select = &quot;com.how2java.mapper.OrderItemMapper.listByOrder&quot;))</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Order&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>修改mybatis-config.xml</strong></p>
<p>新增Mapper类的映射</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/how2java/pojo/OrderItem.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.how2java.mapper.OrderItemMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.how2java.mapper.OrderMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.how2java.mapper.ProductMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>查询测试</strong></p>
<p>如图所示，运行测试遍历所有的订单，再通过一对多和多对一，间接地多对多遍历出产品。</p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Mybatis%E5%AE%9E%E9%AA%8C.assets/image-20220418104934353.png" alt="image-20220418104934353" style="zoom:50%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">listOrder</span><span class="params">(SqlSession session)</span> &#123;</span><br><span class="line">    <span class="type">OrderMapper</span> <span class="variable">mapper</span> <span class="operator">=</span>session.getMapper(OrderMapper.class);</span><br><span class="line">    List&lt;Order&gt; os = mapper.list();</span><br><span class="line">    <span class="keyword">for</span> (Order o : os) &#123;</span><br><span class="line">        System.out.println(o.getCode());</span><br><span class="line">        List&lt;OrderItem&gt; ois= o.getOrderItems();</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span>!=ois)&#123;</span><br><span class="line">            <span class="keyword">for</span> (OrderItem oi : ois) &#123;</span><br><span class="line">                System.out.format(<span class="string">&quot;\t%s\t%f\t%d%n&quot;</span>, oi.getProduct().getName(),oi.getProduct().getPrice(),oi.getNumber());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Java</title>
    <url>/2022/04/23/Java/</url>
    <content><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="基本变量类型"><a href="#基本变量类型" class="headerlink" title="基本变量类型"></a>基本变量类型</h2><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220420180944588.png" alt="image-20220420180944588"></p>
<span id="more"></span>

<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220420172046919.png" alt="image-20220420172046919"></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果试图给byte类型的变量赋予超出其范围的值，就会产生编译错误</span></span><br><span class="line">        <span class="type">byte</span> b = <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>浮点型</strong></p>
<p>浮点数类型有两种 float 长度为32位 double 长度为64位 <strong>注意： 默认的小数值是double类型的</strong> 所以 float f &#x3D; 54.321会出现编译错误，因为54.321的默认类型是 double，其类型 长度为64，超过了float的长度32 在数字后面<strong>加一个字母f</strong>，直接把该数字声明成float类型 float f2 &#x3D; 54.321<strong>f</strong>, 这样就不会出错了</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220420172350714.png" alt="image-20220420172350714"></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> d = <span class="number">123.45</span>;</span><br><span class="line">        <span class="comment">// 该行会出现编译错误，因为54.321是double型的</span></span><br><span class="line">        <span class="type">float</span> f = <span class="number">54.321</span>;</span><br><span class="line">        <span class="type">float</span> f2 = <span class="number">54.321f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>整数字面值</strong></p>
<p>当以l或者L结尾的时候，一个整数字面值是long类型，否则就是int类型。 建议使用<strong>大写的L</strong>而非小写的l，因为容易和1混淆。 byte,short,int和long的值都可以通过int类型的字面值来创建。整数的字面值可以用如下四种进制来表示： 十进制: 基 10, 包含从0-9的数字，<strong>平常用的就是这种</strong> 十六进制: 基 16, 包含从0-9的数字，和从A-F的字母。 八进制: 基 8, 包含从0-7的数字 二进制: 基 2, 包含0和1。（从 JAVA7开始就可以创建 二进制的字面值了）</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">1e4</span>; <span class="comment">// 整数不能用科学计数法</span></span><br><span class="line">        <span class="type">long</span> val = <span class="number">26L</span>; <span class="comment">//以L结尾的字面值表示long型</span></span><br><span class="line">        <span class="type">int</span> decVal = <span class="number">26</span>; <span class="comment">//默认就是int型</span></span><br><span class="line">        <span class="type">int</span> hexVal = <span class="number">0x1a</span>; <span class="comment">//16进制</span></span><br><span class="line">        <span class="type">int</span> oxVal = <span class="number">032</span>; <span class="comment">//8进制</span></span><br><span class="line">        <span class="type">int</span> binVal = <span class="number">0b11010</span>; <span class="comment">//2进制</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(oxVal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 报错，爆int了</span></span><br><span class="line">        <span class="comment">// long val = 3000000000;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> val = <span class="number">3000000000L</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>浮点数字面值</strong></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="type">float</span> f1 = <span class="number">3.13F</span>;</span><br><span class="line">        <span class="type">double</span> d1 = <span class="number">123.3</span>;</span><br><span class="line">        <span class="type">double</span> d2 = <span class="number">12.2e5</span>; <span class="comment">// 可以科学计数法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>转义字符</strong></p>
<p>需要注意的是，\表示转义，比如需要表示制表符，回车换行，双引号等就需要用 \t \r \n “ 的方式进行</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//以下是转义字符</span></span><br><span class="line">        <span class="type">char</span> tab = <span class="string">&#x27;\t&#x27;</span>; <span class="comment">//制表符</span></span><br><span class="line">        <span class="type">char</span> carriageReturn = <span class="string">&#x27;\r&#x27;</span>; <span class="comment">//回车</span></span><br><span class="line">        <span class="type">char</span> newLine = <span class="string">&#x27;\n&#x27;</span>; <span class="comment">//换行</span></span><br><span class="line">        <span class="type">char</span> doubleQuote = <span class="string">&#x27;\&quot;&#x27;</span>; <span class="comment">//双引号</span></span><br><span class="line">        <span class="type">char</span> singleQuote = <span class="string">&#x27;\&#x27;&#x27;</span>; <span class="comment">//单引号</span></span><br><span class="line">        <span class="type">char</span> backslash = <span class="string">&#x27;\\&#x27;</span>; <span class="comment">//反斜杠</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p><strong>转换规则</strong></p>
<p>转换规则如图所示 <strong>精度高</strong>的数据类型就像<strong>容量大</strong>的杯子，可以<strong>放更大</strong>的数据 <strong>精度低</strong>的数据类型就像<strong>容量小</strong>的杯子，只能<strong>放更小</strong>的数据 小杯子往大杯子里倒东西，大杯子<strong>怎么都放得下</strong> 大杯子往小杯子里倒东西，<strong>有的时候放的下</strong>，<strong>有的时候就会有溢出</strong> 需要注意的一点是 虽然short和char都是16位的，长度是一样的 但是彼此之间，依然需要进行强制转换</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220420174220863.png" alt="image-20220420174220863"></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="type">char</span> c = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="type">short</span> s = <span class="number">80</span>;</span><br><span class="line">        <span class="comment">// 虽然short和char都是16位的，长度是一样的</span></span><br><span class="line">        <span class="comment">// 但是彼此之间，依然需要进行强制转换</span></span><br><span class="line">        c = (<span class="type">char</span>)s;</span><br><span class="line">        System.out.<span class="built_in">println</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>低精度向高精度转换</strong></p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">// 自动类型转换</span><br><span class="line">long l <span class="operator">=</span> <span class="number">50</span><span class="comment">;</span></span><br><span class="line">int i <span class="operator">=</span> <span class="number">50</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p><strong>高精度向低精度转换(强转)</strong></p>
<p>把int类型的数据转成为byte类型的数据，<strong>是有风险的</strong> <strong>有的时候是可以转换的</strong>，比如 b &#x3D; i1 (i1&#x3D;10); <strong>有的时候不可以转换</strong> 比如 b&#x3D; i2 (i2&#x3D;300) 因为放不下了 编译器就会提示错误 这个时候就只能采用<strong>强制转换</strong>，强制转换的意思就是，转是可以转的，但是不对转换之后的值负责。 风险自担，后果自负</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220420175035658.png" alt="image-20220420175035658"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hero</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">byte</span> b;</span><br><span class="line">        <span class="built_in">int</span> i1 = <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">int</span> i2 = <span class="number">300</span>;</span><br><span class="line">        b = (<span class="built_in">byte</span>) i1;</span><br><span class="line">        System.<span class="keyword">out</span>.println(b);</span><br><span class="line">        <span class="comment">// 丢失精度</span></span><br><span class="line">        b = (<span class="built_in">byte</span>) i2;</span><br><span class="line">        System.<span class="keyword">out</span>.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>关键字列表</strong></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220420175316652.png" alt="image-20220420175316652"></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220420175330218.png" alt="image-20220420175330218"></p>
<h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>当一个变量被final修饰的时候，该变量<strong>只有一次赋值的机会</strong></p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">// 报错</span><br><span class="line">final int i <span class="operator">=</span> <span class="number">5</span><span class="comment">;</span></span><br><span class="line"><span class="attribute">i</span> <span class="operator">=</span> <span class="number">19</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>final 修饰的变量在方法中，可以先初始化再赋值</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">// 正确</span><br><span class="line">final int i<span class="comment">;</span></span><br><span class="line"><span class="attribute">i</span> <span class="operator">=</span> <span class="number">19</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>但是如果是成员变量，必须在初始化的时赋值，不然会报错</p>
<p><strong>经过测试静态方法不能调用成员变量</strong></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> i; <span class="comment">// 报错</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>final修饰的类不能被继承 </p>
<p>final定义的方法不能被重写 </p>
<p>final定义的常量不能被重写赋值</p>
<h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><p><strong>异或^：</strong></p>
<p>不同，返回真 相同，返回假</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="type">boolean</span> b = !(i++ == <span class="number">3</span>) ^ (i++ ==<span class="number">2</span>) &amp;&amp; (i++ == <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(b);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    <span class="keyword">false</span></span><br><span class="line">	<span class="number">3</span></span><br></pre></td></tr></table></figure>

<p><strong>一个整数的二进制表达：</strong></p>
<p>通过Integer.toBinaryString() 方法，将一个十进制整数转换为一个二进制字符串</p>
<p><strong>位或：</strong></p>
<p>5的二进制是101</p>
<p>6的二进制是110</p>
<p>所以 5|6 对每一位进行或运算，得到 111-&gt;7</p>
<p><strong>位与：</strong></p>
<p>5的二进制是101</p>
<p>6的二进制是110</p>
<p>所以 5&amp;6 对每一位进行与运算，得到 100-&gt;4</p>
<p><strong>异或：</strong></p>
<p>5的二进制是101 6的二进制是110 所以 5^6 对每一位进行异或运算，得到 011-&gt;3</p>
<p>一些特别情况： 任何数和自己进行异或 都等于 0 任何数和0 进行异或 都等于自己</p>
<p><strong>取非~：</strong></p>
<p>5 的二进制是 00000101 所以取反即为 11111010 这个二进制换算成十进制即为-6</p>
<p><strong>左移 右移：</strong></p>
<p>左移：根据一个整数的二进制表达，将其每一位都向左移动，最右边一位补0 右移：根据一个整数的二进制表达，将其每一位都向右移动</p>
<p><strong>使用Scanner读取整数：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> s.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;第一个整数：&quot;</span>+a);</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> s.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;第二个整数：&quot;</span>+b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用Scanner读取浮点数：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">float</span> <span class="variable">a</span> <span class="operator">=</span> s.nextFloat();</span><br><span class="line">        System.out.println(<span class="string">&quot;读取的浮点数的值是：&quot;</span>+a);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用Scanner读取字符串：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> s.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;读取的字符串是：&quot;</span>+a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>读取了整数后，接着读取字符串：</strong></p>
<p>需要注意的是，如果在通过nextInt()读取了整数后，再接着读取字符串，读出来的是回车换行:”\r\n”,因为nextInt仅仅读取数字信息，而不会<strong>读取</strong>回车换行”\r\n”.</p>
<p>所以，如果在业务上需要读取了整数后，接着读取字符串，那么就应该连续执行两次nextLine()，第一次是取走回车换行，第二次才是读取真正的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;读取的整数是&quot;</span>+ i);</span><br><span class="line">        <span class="type">String</span> <span class="variable">rn</span> <span class="operator">=</span> s.nextLine();</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> s.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;读取的字符串是：&quot;</span>+a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h1><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>switch可以使用byte,short,int,char,String,enum</p>
<p><strong>注:</strong> 每个表达式结束，都应该有一个break; <strong>注:</strong> String在Java1.7之前是不支持的, Java从1.7开始支持switch用String的，编译后是把String转化为hash值，其实还是整数 <strong>注:</strong> enum是枚举类型，在<a href="https://how2j.cn/k/class-object/class-object-enum/678.html">枚举</a>章节有详细讲解</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> day = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.<span class="keyword">out</span>.println(<span class="string">&quot;星期一&quot;</span>);</span><br><span class="line">                System.<span class="keyword">out</span>.println(<span class="string">&quot;星期111&quot;</span>);</span><br><span class="line">                <span class="comment">//break;</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.<span class="keyword">out</span>.println(<span class="string">&quot;星期二&quot;</span>);</span><br><span class="line">                <span class="comment">//break;</span></span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                System.<span class="keyword">out</span>.println(<span class="string">&quot;都不是&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    星期一</span><br><span class="line">    星期<span class="number">111</span></span><br><span class="line">    星期二</span><br><span class="line">    都不是</span><br></pre></td></tr></table></figure>

<h2 id="使用boolean变量结束外部循环"><a href="#使用boolean变量结束外部循环" class="headerlink" title="使用boolean变量结束外部循环"></a>使用boolean变量结束外部循环</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="type">boolean</span> breakout = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(i + <span class="string">&quot;:&quot;</span> + j);</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">0</span> == j % <span class="number">2</span>) &#123;</span><br><span class="line">                    breakout = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (breakout) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用标签结束外部循环："><a href="#使用标签结束外部循环：" class="headerlink" title="使用标签结束外部循环："></a>使用标签结束外部循环：</h2><p>在外部循环的前一行，加上标签 在break的时候使用该标签 即能达到结束外部循环的效果</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//打印单数    </span></span><br><span class="line">        outloop: <span class="comment">//outloop这个标示是可以自定义的比如outloop1,ol2,out5</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(i+<span class="string">&quot;:&quot;</span>+j);</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">0</span>==j%<span class="number">2</span>) </span><br><span class="line">                    <span class="keyword">break</span> outloop; <span class="comment">//如果是双数，结束外部循环</span></span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="选择法排序"><a href="#选择法排序" class="headerlink" title="选择法排序"></a>选择法排序</h2><p>选择法排序的思路： <strong>把第一位</strong>和其他所有的进行比较，只要比第一位小的，就换到第一个位置来 比较完后，<strong>第一位就是最小的</strong> 然后再从<strong>第二位</strong>和剩余的其他所有进行比较，只要比第二位小，就换到第二个位置来 比较完后，<strong>第二位就是第二小的</strong> 以此类推</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220107180612236.png" alt="image-20220107180612236"></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.print(a[i] + &quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;&quot;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; a.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] &gt; a[j]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="keyword">temp</span> = a[i];</span><br><span class="line">                    a[i] = a[j];</span><br><span class="line">                    a[j] = <span class="keyword">temp</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.print(a[i] + &quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="冒泡法排序"><a href="#冒泡法排序" class="headerlink" title="冒泡法排序"></a>冒泡法排序</h2><p>冒泡法排序的思路： 第一步：从第一位开始，把相邻两位进行比较 如果发现前面的比后面的大，就把大的数据交换在后面，循环比较完毕后，<strong>最后一位就是最大的</strong> 第二步： 再来一次，只不过不用比较最后一位 以此类推</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220107182324590.png" alt="image-20220107182324590"></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.print(a[i] + &quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;&quot;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; a.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="keyword">temp</span> = a[j];</span><br><span class="line">                    a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">                    a[j + <span class="number">1</span>] = <span class="keyword">temp</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.print(a[i] + &quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="复制数组"><a href="#复制数组" class="headerlink" title="复制数组"></a>复制数组</h2><p>把一个数组的值，复制到另一个数组中</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">System.arraycopy(src, srcP<span class="keyword">os</span>, dest, destP<span class="keyword">os</span>, length)</span><br></pre></td></tr></table></figure>

<p>src: 源数组 srcPos: 从源数组复制数据的起始位置 dest: 目标数组 destPos: 复制到目标数组的起始位置 length: 复制的长度</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] b = <span class="built_in">new</span> <span class="type">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">System</span>.arraycopy(a, <span class="number">0</span>, b, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> b1 : b) &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.print(b1 + &quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Arrays-工具类"><a href="#Arrays-工具类" class="headerlink" title="Arrays 工具类"></a>Arrays 工具类</h2><p>与使用System.arraycopy进行数组复制类似的， Arrays提供了一个copyOfRange方法进行数组复制。 不同的是System.arraycopy，需要事先准备好目标数组，并分配长度。 copyOfRange 只需要源数组就就可以了，通过返回值，就能够得到目标数组了。 除此之外，需要注意的是 copyOfRange 的<strong>第3个参数</strong>，表示源数组的结束位置，是<strong>取不到的</strong>。</p>
<h3 id="数组复制"><a href="#数组复制" class="headerlink" title="数组复制"></a>数组复制</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        // copyOfRange(<span class="type">int</span>[] original, <span class="type">int</span> <span class="keyword">from</span>, <span class="type">int</span> <span class="keyword">to</span>)</span><br><span class="line">        // 第一个参数表示源数组</span><br><span class="line">        // 第二个参数表示开始位置(取得到)</span><br><span class="line">        // 第三个参数表示结束位置(取不到)</span><br><span class="line">        <span class="type">int</span>[] b = Arrays.copyOfRange(a, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> b1 : b) &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.print(b1 + &quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="转换为字符串"><a href="#转换为字符串" class="headerlink" title="转换为字符串"></a>转换为字符串</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> Arrays.toString(a);</span><br><span class="line">        System.out.println(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> Test &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        <span class="built_in">int</span><span class="literal">[]</span> a = &#123;<span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">a</span>)</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>sort(a);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">a</span>)</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>查询元素出现的位置 需要注意的是，使用binarySearch进行查找之前，必须使用sort进行排序 如果数组中有多个相同的元素，查找结果是不确定的</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> Test &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        <span class="built_in">int</span><span class="literal">[]</span> a = &#123;<span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>sort(a);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">a</span>)</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;数字62出现的位置：&quot;</span> + <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>binary<span class="constructor">Search(<span class="params">a</span>, 62)</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="判断是否相同"><a href="#判断是否相同" class="headerlink" title="判断是否相同"></a>判断是否相同</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] b = &#123;<span class="number">18</span>, <span class="number">62</span>, <span class="number">68</span>, <span class="number">82</span>, <span class="number">65</span>, <span class="number">8</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.equals(a, b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h3><p>使用同一个值，填充整个数组</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];</span><br><span class="line">        Arrays.<span class="built_in">fill</span>(a, <span class="number">5</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.<span class="built_in">println</span>(Arrays.<span class="built_in">toString</span>(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="练习-二维数组排序"><a href="#练习-二维数组排序" class="headerlink" title="练习-二维数组排序"></a>练习-二维数组排序</h3><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220107191917080.png" alt="image-20220107191917080"></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> Test &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        <span class="built_in">int</span><span class="literal">[]</span><span class="literal">[]</span> a = <span class="keyword">new</span> <span class="built_in">int</span><span class="literal">[<span class="number">5</span>]</span><span class="literal">[<span class="number">8</span>]</span>;</span><br><span class="line">        <span class="built_in">int</span><span class="literal">[]</span> temp = <span class="keyword">new</span> <span class="built_in">int</span><span class="literal">[<span class="number">40</span>]</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">                a<span class="literal">[<span class="identifier">i</span>]</span><span class="literal">[<span class="identifier">j</span>]</span> = (<span class="built_in">int</span>)(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>random<span class="literal">()</span><span class="operator"> * </span><span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">a</span>[<span class="params">i</span>])</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println<span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>arraycopy(a<span class="literal">[<span class="identifier">i</span>]</span>, <span class="number">0</span>, temp, i<span class="operator"> * </span><span class="number">8</span>, <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">temp</span>)</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>sort(temp);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">temp</span>)</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>arraycopy(temp, i<span class="operator"> * </span><span class="number">8</span>, a<span class="literal">[<span class="identifier">i</span>]</span>, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">a</span>[<span class="params">i</span>])</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><h2 id="重载（可变数量的参数）"><a href="#重载（可变数量的参数）" class="headerlink" title="重载（可变数量的参数）"></a>重载（可变数量的参数）</h2><p>如果要攻击更多的英雄，就需要设计更多的方法，这样类会显得很累赘，像这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">(Hero h1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">(Hero h1,Hero h2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">(Hero h1,Hero h2,Hero h3)</span></span><br></pre></td></tr></table></figure>

<p> 这时，可以采用可变数量的参数 <strong>只需要设计一个方法</strong> public void attack(Hero **…**heros) 即可代表上述所有的方法了 在方法里，使用操作数组的方式处理参数heros即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ADHero</span> <span class="keyword">extends</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; 进行了一次攻击 ，但是不确定打中谁了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可变数量的参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">(Hero... heros)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; heros.length; i++) &#123;</span><br><span class="line">            System.out.println(name + <span class="string">&quot; 攻击了 &quot;</span> + heros[i].name);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ADHero</span> <span class="variable">bh</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ADHero</span>();</span><br><span class="line">        bh.name = <span class="string">&quot;赏金猎人&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Hero</span> <span class="variable">h1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        h1.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        <span class="type">Hero</span> <span class="variable">h2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        h2.name = <span class="string">&quot;提莫&quot;</span>;</span><br><span class="line"></span><br><span class="line">        bh.attack(h1);</span><br><span class="line">        bh.attack(h1, h2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><h3 id="this代表当前对象-打印对象地址"><a href="#this代表当前对象-打印对象地址" class="headerlink" title="this代表当前对象(打印对象地址)"></a>this代表当前对象(打印对象地址)</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hero</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="built_in">float</span> hp;</span><br><span class="line">    <span class="built_in">float</span> armor;</span><br><span class="line">    <span class="built_in">int</span> moveSpeed;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;调用Hero的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span>(<span class="params">String name</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAddressInMemory</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;打印this看到的虚拟地址：&quot;</span>+<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        Hero garen =  <span class="keyword">new</span> Hero(<span class="string">&quot;盖伦&quot;</span>);</span><br><span class="line">        garen.hp = <span class="number">616.28f</span>;</span><br><span class="line">        garen.armor = <span class="number">27.536f</span>;</span><br><span class="line">        garen.moveSpeed = <span class="number">350</span>;</span><br><span class="line">        garen.showAddressInMemory();</span><br><span class="line"></span><br><span class="line">        Hero teemo =  <span class="keyword">new</span> Hero(<span class="string">&quot;提莫&quot;</span>);</span><br><span class="line">        teemo.hp = <span class="number">383f</span>;</span><br><span class="line">        teemo.armor = <span class="number">14f</span>;</span><br><span class="line">        teemo.moveSpeed = <span class="number">330</span>;</span><br><span class="line">        teemo.showAddressInMemory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通过this访问属性"><a href="#通过this访问属性" class="headerlink" title="通过this访问属性"></a>通过this访问属性</h3><p>直接this.属性即可</p>
<h3 id="通过this调用其他的构造方法"><a href="#通过this调用其他的构造方法" class="headerlink" title="通过this调用其他的构造方法"></a>通过this调用其他的构造方法</h3><p>如果要在一个构造方法中，调用另一个构造方法，可以使用this()</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hero</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="built_in">float</span> hp;</span><br><span class="line">    <span class="built_in">float</span> armor;</span><br><span class="line">    <span class="built_in">int</span> moveSpeed;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;调用Hero的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span>(<span class="params">String name</span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;一个参数的构造方法&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span>(<span class="params">String name, <span class="built_in">float</span> hp</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>(name);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;两个参数的构造方法&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.hp = hp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAddressInMemory</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;打印this看到的虚拟地址：&quot;</span>+<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        Hero garen =  <span class="keyword">new</span> Hero(<span class="string">&quot;盖伦&quot;</span>);</span><br><span class="line">        garen.hp = <span class="number">616.28f</span>;</span><br><span class="line">        garen.armor = <span class="number">27.536f</span>;</span><br><span class="line">        garen.moveSpeed = <span class="number">350</span>;</span><br><span class="line">        garen.showAddressInMemory();</span><br><span class="line">        System.<span class="keyword">out</span>.println(garen.name);</span><br><span class="line"></span><br><span class="line">        Hero teemo =  <span class="keyword">new</span> Hero(<span class="string">&quot;提莫&quot;</span>);</span><br><span class="line">        teemo.hp = <span class="number">383f</span>;</span><br><span class="line">        teemo.armor = <span class="number">14f</span>;</span><br><span class="line">        teemo.moveSpeed = <span class="number">330</span>;</span><br><span class="line">        teemo.showAddressInMemory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><p>类和类之间的关系有如下几种: 以Hero为例 <strong>自身：</strong>指的是Hero自己 <strong>同包子类：</strong>ADHero这个类是Hero的子类，并且和Hero处于<strong>同一个包下</strong> <strong>不同包子类：</strong>Support这个类是Hero的子类，但是在<strong>另一个包下</strong> <strong>同包类：</strong> GiantDragon 这个类和Hero是<strong>同一个包</strong>，但是彼此<strong>没有继承关系</strong> <strong>其他类：</strong>Item这个类，<strong>在不同包</strong>，也没有继承关系的类</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220108130736058.png" alt="image-20220108130736058"></p>
<h2 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h2><p><strong>类属性：</strong> 又叫做静态属性 <strong>对象属性：</strong> 又叫实例属性，非静态属性 如果一个属性声明成类属性，那么所有的对象，都共享这么一个值 给英雄设置一个类属性叫做“版权” (copyright), 无论有多少个具体的英雄，所有的英雄的版权都属于 Riot Games公司。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Hero &#123;</span><br><span class="line">    <span class="built_in">public</span> String <span class="type">name</span>;//实例属性，对象属性，非静态属性</span><br><span class="line">    protected <span class="type">float</span> hp;</span><br><span class="line">    static String copyright;//类属性,静态属性</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        Hero garen =  <span class="built_in">new</span> Hero();</span><br><span class="line">        garen.name = &quot;盖伦&quot;;</span><br><span class="line"></span><br><span class="line">        Hero.copyright = &quot;版权由Riot Games公司所有&quot;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(garen.name);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(garen.copyright);</span><br><span class="line"></span><br><span class="line">        Hero teemo =  <span class="built_in">new</span> Hero();</span><br><span class="line">        teemo.name = &quot;提莫&quot;;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(teemo.name);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(teemo.copyright);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>访问类属性有两种方式</strong></p>
<ul>
<li>对象.类属性</li>
</ul>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">teemo.<span class="keyword">copyright</span></span><br></pre></td></tr></table></figure>

<ul>
<li>类.类属性</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Hero</span>.</span></span>copyright</span><br></pre></td></tr></table></figure>

<p>这两种方式都可以访问类属性，访问即修改和获取，但是建议使用第二种 <strong>类.类属性</strong> 的方式进行，这样更符合语义上的理解</p>
<p><strong>什么时候使用对象属性，什么时候使用类属性?</strong></p>
<p>如果一个属性，每个英雄都不一样，比如name，这样的属性就应该设计为对象属性，因为它是<strong>跟着对象走的</strong>，每个对象的name都是不同的</p>
<p>如果一个属性，<strong>所有的英雄都共享</strong>，都是一样的，那么就应该设计为类属性。比如血量上限，所有的英雄的血量上限都是 9999，不会因为英雄不同，而取不同的值。 这样的属性，就适合设计为类属性</p>
<h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><p><strong>类方法：</strong> 又叫做静态方法</p>
<p><strong>对象方法：</strong> 又叫实例方法，非静态方法</p>
<p>访问一个对象方法，必须<strong>建立在有一个对象</strong>的前提的基础上 访问类方法，<strong>不需要对象</strong>的存在，直接就访问</p>
<h3 id="类方法-1"><a href="#类方法-1" class="headerlink" title="类方法"></a>类方法</h3><p><strong>类方法：</strong> 又叫做静态方法</p>
<p><strong>对象方法：</strong> 又叫实例方法，非静态方法</p>
<p>访问一个对象方法，必须<strong>建立在有一个对象</strong>的前提的基础上 访问类方法，<strong>不需要对象</strong>的存在，直接就访问</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;<span class="comment">//实例属性，对象属性，非静态属性</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">float</span> hp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例方法,对象方法，非静态方法</span></span><br><span class="line">    <span class="comment">//必须有对象才能够调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">die</span>()</span> &#123;</span><br><span class="line">        hp = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//类方法，静态方法</span></span><br><span class="line">    <span class="comment">//通过类就可以直接调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">battleWin</span>()</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;battle win&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        Hero garen =  <span class="keyword">new</span> Hero();</span><br><span class="line">        garen.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        System.<span class="keyword">out</span>.println(garen.name);</span><br><span class="line">        garen.die();</span><br><span class="line">        Hero.battleWin();</span><br><span class="line"></span><br><span class="line">        Hero teemo =  <span class="keyword">new</span> Hero();</span><br><span class="line">        teemo.name = <span class="string">&quot;提莫&quot;</span>;</span><br><span class="line">        System.<span class="keyword">out</span>.println(teemo.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="调用类方法"><a href="#调用类方法" class="headerlink" title="调用类方法"></a>调用类方法</h3><p>和<a href="https://how2j.cn/k/class-object/class-object-class-attribute/296.html#step2259">访问类属性</a>一样，调用类方法也有两种方式</p>
<ol>
<li><p>对象.类方法</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">garen.battleWin()<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>类.类方法</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Hero</span>.</span></span>battle<span class="constructor">Win()</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>这两种方式都可以调用类方法，但是建议使用第二种 类.类方法 的方式进行，这样更符合语义上的理解。 并且在很多时候，并没有实例，比如在前面练习的时候用到的<a href="https://how2j.cn/k/array/array-create/280.html#step2182">随机数的获取办法</a></p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">Math.random()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>random()就是一个类方法，直接通过类Math进行调用，并没有一个Math的实例存在。</p>
<h3 id="什么时候设计对象方法，什么时候设计类方法"><a href="#什么时候设计对象方法，什么时候设计类方法" class="headerlink" title="什么时候设计对象方法，什么时候设计类方法"></a>什么时候设计对象方法，什么时候设计类方法</h3><p>如果在某一个方法里，调用了对象属性，比如</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>name属性是对象属性，只有存在一个具体对象的时候，name才有意义。 如果方法里访问了对象属性，那么这个方法，就必须设计为对象方法</p>
<p>如果一个方法，没有调用任何对象属性，那么就可以考虑设计为类方法，比如</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printGameDuration</span>()</span>&#123;</span><br><span class="line">	System.<span class="keyword">out</span>.println(<span class="string">&quot;已经玩了10分50秒&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>printGameDuration 打印当前玩了多长时间了，不和某一个具体的英雄关联起来，所有的英雄都是一样的。 这样的方法，更带有<strong>功能性</strong>色彩 就像取随机数一样，random()是一个功能用途的方法</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">Math.random()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="属性初始化"><a href="#属性初始化" class="headerlink" title="属性初始化"></a>属性初始化</h2><h3 id="对象属性初始化"><a href="#对象属性初始化" class="headerlink" title="对象属性初始化"></a>对象属性初始化</h3><p>对象属性初始化有3种 \1. 声明该属性的时候初始化 \2. 构造方法中初始化 \3. 初始化块</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> name = <span class="string">&quot;some hero&quot;</span>; <span class="comment">//声明该属性的时候初始化</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">float</span> hp;</span><br><span class="line">    <span class="type">float</span> maxHP;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        maxHP = <span class="number">200</span>; <span class="comment">//初始化块</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">()</span></span>&#123;</span><br><span class="line">        hp = <span class="number">100</span>; <span class="comment">//构造方法中初始化</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类属性初始化"><a href="#类属性初始化" class="headerlink" title="类属性初始化"></a>类属性初始化</h3><p>类属性初始化有2种 \1. 声明该属性的时候初始化 \2. 静态初始化块</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">float</span> hp;</span><br><span class="line">    <span class="type">float</span> maxHP;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//物品栏的容量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">static</span> <span class="type">int</span> itemCapcity = <span class="number">8</span>;<span class="comment">//声明的时候 初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> &#123;</span><br><span class="line">        itemCapcity = <span class="number">6</span>;<span class="comment">//静态初始化块 初始化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(Hero.itemCapcity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    <span class="number">6</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> name = <span class="string">&quot;some hero&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">()</span></span>&#123;</span><br><span class="line">        name = <span class="string">&quot;one hero&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        name = <span class="string">&quot;the hero&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        Hero h = <span class="keyword">new</span> <span class="built_in">Hero</span>();</span><br><span class="line">        System.out.<span class="built_in">println</span>(h.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出:</span><br><span class="line">	one hero</span><br></pre></td></tr></table></figure>

<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式又叫做 Singleton模式，指的是一个类，在一个JVM里，只有一个实例存在。</p>
<h3 id="饿汉式单例模式"><a href="#饿汉式单例模式" class="headerlink" title="饿汉式单例模式"></a>饿汉式单例模式</h3><p>GiantDragon 应该只有一只，通过私有化其构造方法，使得外部无法通过new 得到新的实例。 GiantDragon 提供了一个public static的getInstance方法，外部调用者通过该方法获取12行定义的对象，而且每一次都是获取同一个对象。 从而达到单例的目的。 这种单例模式又叫做<strong>饿汉式</strong>单例模式，无论如何都会创建一个实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GiantDragon</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//私有化构造方法使得该类无法在外部通过new 进行实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">GiantDragon</span><span class="params">()</span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//准备一个类属性，指向一个实例化对象。 因为是类属性，所以只有一个</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">GiantDragon</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GiantDragon</span>();</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//public static 方法，提供给调用者获取12行定义的对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GiantDragon <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGiantDragon</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//通过new实例化会报错</span></span><br><span class="line"><span class="comment">//      GiantDragon g = new GiantDragon();</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//只能通过getInstance得到对象</span></span><br><span class="line">         </span><br><span class="line">        <span class="type">GiantDragon</span> <span class="variable">g1</span> <span class="operator">=</span> GiantDragon.getInstance();</span><br><span class="line">        <span class="type">GiantDragon</span> <span class="variable">g2</span> <span class="operator">=</span> GiantDragon.getInstance();</span><br><span class="line">        <span class="type">GiantDragon</span> <span class="variable">g3</span> <span class="operator">=</span> GiantDragon.getInstance();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//都是同一个对象</span></span><br><span class="line">        System.out.println(g1==g2);</span><br><span class="line">        System.out.println(g1==g3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="懒汉式单例模式"><a href="#懒汉式单例模式" class="headerlink" title="懒汉式单例模式"></a>懒汉式单例模式</h3><p><strong>懒汉式</strong>单例模式与<strong>饿汉式</strong>单例模式不同，只有在调用getInstance的时候，才会创建实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GiantDragon</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//私有化构造方法使得该类无法在外部通过new 进行实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">GiantDragon</span><span class="params">()</span>&#123;       </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//准备一个类属性，用于指向一个实例化对象，但是暂时指向null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> GiantDragon instance;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">//public static 方法，返回实例对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GiantDragon <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//第一次访问的时候，发现instance没有指向任何对象，这时实例化一个对象</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span>==instance)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">GiantDragon</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回 instance指向的对象</span></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGiantDragon</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//通过new实例化会报错</span></span><br><span class="line"><span class="comment">//      GiantDragon g = new GiantDragon();</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//只能通过getInstance得到对象</span></span><br><span class="line">         </span><br><span class="line">        <span class="type">GiantDragon</span> <span class="variable">g1</span> <span class="operator">=</span> GiantDragon.getInstance();</span><br><span class="line">        <span class="type">GiantDragon</span> <span class="variable">g2</span> <span class="operator">=</span> GiantDragon.getInstance();</span><br><span class="line">        <span class="type">GiantDragon</span> <span class="variable">g3</span> <span class="operator">=</span> GiantDragon.getInstance();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//都是同一个对象</span></span><br><span class="line">        System.out.println(g1==g2);</span><br><span class="line">        System.out.println(g1==g3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="什么时候使用饿汉式，什么时候使用懒汉式"><a href="#什么时候使用饿汉式，什么时候使用懒汉式" class="headerlink" title="什么时候使用饿汉式，什么时候使用懒汉式"></a>什么时候使用饿汉式，什么时候使用懒汉式</h3><p><strong>饿汉式</strong>是立即加载的方式，无论是否会用到这个对象，都会加载。 如果在构造方法里写了性能消耗较大，占时较久的代码，比如建立与数据库的连接，那么就会在启动的时候感觉稍微有些卡顿。</p>
<p><strong>懒汉式</strong>，是延迟加载的方式，只有使用的时候才会加载。 并且有<a href="https://how2j.cn/k/thread/thread-synchronized/355.html#step793">线程安全</a>的考量(鉴于同学们学习的进度，暂时不对线程的章节做展开)。 使用懒汉式，在启动的时候，会感觉到比饿汉式略快，因为并没有做对象的实例化。 但是在第一次调用的时候，会进行实例化操作，感觉上就略慢。</p>
<p>看业务需求，如果业务上允许有比较充分的启动和初始化时间，就使用饿汉式，否则就使用懒汉式</p>
<h3 id="单例模式三元素"><a href="#单例模式三元素" class="headerlink" title="单例模式三元素"></a>单例模式三元素</h3><p>这个是面试的时候经常会考的点，面试题通常的问法是: 什么是单例模式？</p>
<p>回答的时候，要答到三元素</p>
<ol>
<li>构造方法私有化</li>
<li>静态属性指向实例</li>
<li>public static的 getInstance方法，返回第二步的静态属性</li>
</ol>
<h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><h3 id="预先定义常量"><a href="#预先定义常量" class="headerlink" title="预先定义常量"></a>预先定义常量</h3><p>枚举enum是一种特殊的类(还是类)，使用枚举可以很方便的定义常量 比如设计一个枚举类型 季节，里面有4种常量</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Season &#123;</span><br><span class="line">	SPRING,SUMMER,AUTUMN,WINTER</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个常用的场合就是switch语句中，使用枚举来进行判断</p>
<p><strong>注：</strong>因为是常量，所以一般都是全大写</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HelloWorld</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        Season season = Season.SPRING;</span><br><span class="line">        <span class="keyword">switch</span> (season) &#123;</span><br><span class="line">        <span class="keyword">case</span> SPRING:</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;春天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SUMMER:</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;夏天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> AUTUMN:</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;秋天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> WINTER:</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;冬天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Season &#123;</span><br><span class="line">    SPRING,SUMMER,AUTUMN,WINTER</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用枚举的好处"><a href="#使用枚举的好处" class="headerlink" title="使用枚举的好处"></a>使用枚举的好处</h3><p>假设在使用<a href="https://how2j.cn/k/control-flow/control-flow-switch/272.html">switch</a>的时候，不是使用枚举，而是使用int，而int的取值范围就不只是1-4，有可能取一个超出1-4之间的值，这样判断结果就似是而非了。（因为只有4个季节）</p>
<p>但是使用枚举，就能把范围死死的限定在这四个当中</p>
<p>而不会出现奇怪的 <strong>第5季</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HelloWorld</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> season = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">switch</span> (season) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;春天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;夏天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;秋天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;冬天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="遍历枚举"><a href="#遍历枚举" class="headerlink" title="遍历枚举"></a>遍历枚举</h3><p>借助<a href="https://how2j.cn/k/array/array-foreach/330.html#step707">增强型for循环</a>，可以很方便的遍历一个枚举都有哪些常量</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="title class_">Season</span> s : <span class="title class_">Season</span>.<span class="title function_">values</span>()) &#123;</span><br><span class="line">            <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="接口与继承"><a href="#接口与继承" class="headerlink" title="接口与继承"></a>接口与继承</h1><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>在设计LOL的时候，进攻类英雄有两种，一种是进行物理系攻击，一种是进行魔法系攻击</p>
<p>这时候，就可以使用<strong>接口</strong>来实现这个效果。</p>
<p><strong>接口就像是一种约定</strong>，我们约定某些英雄是物理系英雄，那么他们就一定能够进行物理攻击。</p>
<h3 id="物理攻击接口"><a href="#物理攻击接口" class="headerlink" title="物理攻击接口"></a>物理攻击接口</h3><p>创建一个接口 AD ，声明一个方法 physicAttack 物理攻击，但是没有方法体，是一个“<strong>空</strong>”方法</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AD</span> </span>&#123;</span><br><span class="line">        <span class="comment">//物理伤害</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">physicAttack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="设计一类英雄，能够使用物理攻击"><a href="#设计一类英雄，能够使用物理攻击" class="headerlink" title="设计一类英雄，能够使用物理攻击"></a>设计一类英雄，能够使用物理攻击</h3><p>设计一类英雄，能够使用物理攻击，这类英雄在LOL中被叫做AD 类：ADHero 继承了Hero 类，所以继承了name,hp,armor等属性</p>
<p><strong>实现某个接口，就相当于承诺了某种约定</strong></p>
<p>所以，<strong>实现</strong>了<strong>AD</strong>这个接口，就<strong>必须</strong>提供AD接口中声明的方法<strong>physicAttack()</strong> <strong>实现</strong>在语法上使用关键字 <strong>implements</strong></p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ADHero</span> <span class="keyword">extends</span> <span class="title">Hero</span> <span class="title">implements</span> <span class="title">AD</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void physicAttack() &#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">&quot;进行物理攻击&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="魔法攻击接口"><a href="#魔法攻击接口" class="headerlink" title="魔法攻击接口"></a>魔法攻击接口</h3><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AP</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">magicAttack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="设计一类英雄，只能使用魔法攻击"><a href="#设计一类英雄，只能使用魔法攻击" class="headerlink" title="设计一类英雄，只能使用魔法攻击"></a>设计一类英雄，只能使用魔法攻击</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">APHero</span> <span class="keyword">extends</span> <span class="title">Hero</span> <span class="title">implements</span> <span class="title">AP</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void magicAttack() &#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">&quot;进行魔法攻击&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="设计一类英雄，既能进行物理攻击，又能进行魔法攻击"><a href="#设计一类英雄，既能进行物理攻击，又能进行魔法攻击" class="headerlink" title="设计一类英雄，既能进行物理攻击，又能进行魔法攻击"></a>设计一类英雄，既能进行物理攻击，又能进行魔法攻击</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//同时能进行物理和魔法伤害的英雄</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ADAPHero</span> <span class="keyword">extends</span> <span class="title">Hero</span> <span class="title">implements</span> <span class="title">AD</span>,<span class="title">AP</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void magicAttack() &#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">&quot;进行魔法攻击&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void physicAttack() &#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">&quot;进行物理攻击&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="什么样的情况下该使用接口"><a href="#什么样的情况下该使用接口" class="headerlink" title="什么样的情况下该使用接口?"></a>什么样的情况下该使用接口?</h3><p>如上的例子，似乎要接口，不要接口，都一样的，那么接口的意义是什么呢</p>
<p>学习一个知识点，是由浅入深得进行的。 这里呢，只是引入了接口的概念，要真正理解接口的好处，需要更多的实践，以及在较为复杂的系统中进行大量运用之后，才能够真正理解，比如在学习了<a href="https://how2j.cn/k/interface-inheritance/interface-inheritance-polymorphic/315.html">多态</a>之后就能进一步加深理解。</p>
<p>刚刚接触一个概念，就希望达到炉火纯青的学习效果，这样的学习目标是不科学的。</p>
<h2 id="对象转型"><a href="#对象转型" class="headerlink" title="对象转型"></a>对象转型</h2><h3 id="明确引用类型与对象类型的概念"><a href="#明确引用类型与对象类型的概念" class="headerlink" title="明确引用类型与对象类型的概念"></a>明确引用类型与对象类型的概念</h3><p>首先，明确引用类型与对象类型的概念 在这个例子里，有一个对象 new ADHero(), 同时也有一个引用ad 对象是有类型的， 是ADHero 引用也是有类型的，是ADHero 通常情况下，引用类型和对象类型是一样的 接下来要讨论的类型转换的问题，指的是<strong>引用类型和对象类型</strong>不一致的情况下的转换问题</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">float</span> hp;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        ADHero ad = <span class="keyword">new</span> <span class="built_in">ADHero</span>();</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="子类转父类-向上转型"><a href="#子类转父类-向上转型" class="headerlink" title="子类转父类(向上转型)"></a>子类转父类(向上转型)</h3><p>所谓的转型，是指当<strong>引用类型</strong>和<strong>对象类型</strong>不一致的时候，才需要进行类型转换 类型转换有时候会成功，有时候会失败(参考<a href="https://how2j.cn/k/variable/variable-transfer/264.html">基本类型的类型转换</a>)</p>
<p>到底能否转换成功？ 教大家一个很简单的判别办法 <strong>把右边的当做左边来用</strong>，看说得通不</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">Hero h <span class="operator">=</span> new Hero()<span class="comment">;</span></span><br><span class="line">ADHero ad <span class="operator">=</span> new ADHero()<span class="comment">;</span></span><br><span class="line"><span class="attribute">h</span> <span class="operator">=</span> ad<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>右边ad<strong>引用所指向的对象的类型</strong>是 物理攻击英雄 左边h<strong>引用的类型</strong>是 普通英雄 把物理攻击英雄 当做 普通英雄，说不说得通？ 说得通，就可以转</p>
<p>所有的<strong>子类转换为父类</strong>，都是说得通的。比如你身边的例子</p>
<p>苹果手机 继承了 手机，把苹果手机当做普通手机使用 怡宝纯净水 继承了 饮品， 把怡宝纯净水 当做饮品来使用</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">float</span> hp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        Hero h = <span class="keyword">new</span> <span class="built_in">Hero</span>();</span><br><span class="line">        ADHero ad = <span class="keyword">new</span> <span class="built_in">ADHero</span>();</span><br><span class="line">        <span class="comment">//类型转换指的是把一个引用所指向的对象的类型，转换为另一个引用的类型</span></span><br><span class="line">        <span class="comment">//把ad引用所指向的对象的类型是ADHero</span></span><br><span class="line">        <span class="comment">//h引用的类型是Hero</span></span><br><span class="line">        <span class="comment">//把ADHero当做Hero使用，一定可以</span></span><br><span class="line">        h = ad;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="父类转子类-向下转型"><a href="#父类转子类-向下转型" class="headerlink" title="父类转子类(向下转型)"></a>父类转子类(向下转型)</h3><p>父类转子类，有的时候行，有的时候不行，所以必须进行强制转换。 强制转换的意思就是 转换有风险，风险自担。</p>
<p><strong>什么时候行呢？</strong></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">float</span> hp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        Hero h = <span class="keyword">new</span> <span class="built_in">Hero</span>();</span><br><span class="line">        ADHero ad = <span class="keyword">new</span> <span class="built_in">ADHero</span>();</span><br><span class="line">        h = ad;</span><br><span class="line">        ad = (ADHero)h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第3行，是子类转父类，一定可以的 第4行，就是父类转子类，所以要进行强转。 h这个引用，所指向的对象是ADHero, 所以第4行，就会把ADHero转换为ADHero，就能转换成功。</p>
<p><strong>什么时候转换不行呢？</strong></p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> name;</span><br><span class="line">    protected float hp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        Hero h = <span class="keyword">new</span> <span class="type">Hero</span>();</span><br><span class="line">        ADHero ad = <span class="keyword">new</span> <span class="type">ADHero</span>();</span><br><span class="line">        Support s = <span class="keyword">new</span> <span class="type">Support</span>();</span><br><span class="line">        h = s;</span><br><span class="line">        ad = (ADHero)h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Support</span> <span class="keyword"><span class="keyword">extends</span> <span class="type">Hero</span></span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第4行，是子类转父类，是可以转换成功的 第5行，是把h引用所指向的对象 Support，转换为ad引用的类型ADHero。 从语义上讲，把物理攻击英雄，当成辅助英雄来用，说不通，所以会强制转换失败，并且抛出<a href="https://how2j.cn/k/exception/exception-tutorial/332.html">异常</a></p>
<p><strong>以下是对完整的代码的关键行分析</strong> 14行： 把ad当做Hero使用，一定可以 转换之后，h引用指向一个ad对象 15行： h引用有可能指向一个ad对象，也有可能指向一个support对象 所以把h引用转换成AD类型的时候，就有可能成功，有可能失败 因此要进行强制转换，换句话说转换后果自负 到底能不能转换成功，要看引用<strong>h到底指向的是哪种对象</strong> 在这个例子里，h指向的是一个ad对象，所以转换成ADHero类型，是可以的 16行：把一个support对象当做Hero使用，一定可以 转换之后，h引用指向一个support对象 17行：这个时候，h指向的是一个support对象，所以转换成ADHero类型，会失败。 失败的表现形式是抛出异常 ClassCastException 类型转换异常</p>
<h3 id="没有继承关系的两个类，互相转换"><a href="#没有继承关系的两个类，互相转换" class="headerlink" title="没有继承关系的两个类，互相转换"></a>没有继承关系的两个类，互相转换</h3><p>没有继承关系的两个类，互相转换，一定会失败 虽然ADHero和APHero都继承了Hero，但是彼此没有互相继承关系 “<strong>把魔法英雄当做物理英雄来用</strong>“,在语义上也是说不通的</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">float</span> hp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        ADHero ad = <span class="keyword">new</span> <span class="built_in">ADHero</span>();</span><br><span class="line">        APHero ap = <span class="keyword">new</span> <span class="built_in">APHero</span>();</span><br><span class="line">        <span class="comment">// 没有继承关系的类型进行互相转换一定会失败，所以会出现编译错误</span></span><br><span class="line">        ad = (ADHero)ap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现类转换成接口-向上转型"><a href="#实现类转换成接口-向上转型" class="headerlink" title="实现类转换成接口(向上转型)"></a>实现类转换成接口(向上转型)</h3><p>引用ad指向的对象是ADHero类型，这个类型实现了AD接口 10行： 把一个ADHero类型转换为AD接口 从语义上来讲，把一个ADHero当做AD来使用，而AD接口只有一个physicAttack方法，这就意味着转换后就有可能要调用physicAttack方法，而ADHero一定是有physicAttack方法的，所以转换是能成功的。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">float</span> hp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        ADHero ad = <span class="keyword">new</span> <span class="built_in">ADHero</span>();</span><br><span class="line">        AD adi = ad;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接口转换成实现类-向下转型"><a href="#接口转换成实现类-向下转型" class="headerlink" title="接口转换成实现类(向下转型)"></a>接口转换成实现类(向下转型)</h3><p>10行： ad引用指向ADHero， 而adi引用是接口类型：AD，实现类转换为接口，是向上转型，所以无需强制转换，并且一定能成功 12行: adi实际上是指向一个ADHero的，所以能够转换成功 14行： adi引用所指向的对象是一个ADHero，要转换为ADAPHero就会失败。</p>
<p><strong>假设能够转换成功</strong>，那么就可以使用<strong>magicAttack</strong>方法，而adi引用所指向的对象*<em>ADHero*<em><strong>是</strong></em></em>没有magicAttack**方法的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">float</span> hp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ADHero</span> <span class="variable">ad</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ADHero</span>();</span><br><span class="line">        <span class="type">AD</span> <span class="variable">adi</span> <span class="operator">=</span> ad;</span><br><span class="line">        <span class="type">ADHero</span> <span class="variable">adHero</span> <span class="operator">=</span> (ADHero)adi;</span><br><span class="line">        <span class="comment">//ADAPHero adapHero = (ADHero)adi;报错</span></span><br><span class="line">        <span class="comment">//adapHero.magicAttack();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>子类可以继承父类的对象方法</p>
<p>在继承后，重复提供该方法，就叫做方法的重写</p>
<p>又叫覆盖 override</p>
<h3 id="父类Item"><a href="#父类Item" class="headerlink" title="父类Item"></a>父类Item</h3><p>父类Item有一个方法，叫做effect</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Item</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="built_in">int</span> price;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;购买&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">effect</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;物品使用后，可以有效果&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="子类LifePotion"><a href="#子类LifePotion" class="headerlink" title="子类LifePotion"></a>子类LifePotion</h3><p>子类LifePotion继承Item,同时也提供了方法effect</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LifePotion</span> <span class="keyword">extends</span> <span class="title">Item</span></span>&#123;</span><br><span class="line">    public void effect() &#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">&quot;血瓶使用后，可以回血&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="调用重写的方法"><a href="#调用重写的方法" class="headerlink" title="调用重写的方法"></a>调用重写的方法</h3><p>调用重写的方法 调用就会执行重写的方法，而不是从父类的方法 所以LifePotion的effect会打印： “血瓶使用后，可以回血”</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Item</span> &#123;</span><br><span class="line">    <span class="title class_">String</span> name;</span><br><span class="line">    int price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">effect</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;物品使用后，可以有效果&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        <span class="title class_">Item</span> i = <span class="keyword">new</span> <span class="title class_">Item</span>();</span><br><span class="line">        i.<span class="title function_">effect</span>();</span><br><span class="line"></span><br><span class="line">        <span class="title class_">LifePotion</span> lp = <span class="keyword">new</span> <span class="title class_">LifePotion</span>();</span><br><span class="line">        lp.<span class="title function_">effect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出:</span><br><span class="line">	物品使用后，可以有效果</span><br><span class="line">血瓶使用后，可以回血</span><br></pre></td></tr></table></figure>

<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>操作符的多态 + 可以作为算数运算，也可以作为字符串连接</p>
<p>类的多态 父类引用指向子类对象</p>
<h3 id="操作符的多态"><a href="#操作符的多态" class="headerlink" title="操作符的多态"></a>操作符的多态</h3><p>同一个操作符在不同情境下，具备不同的作用 如果+号两侧都是整型，那么**+代表 数字相加** 如果+号两侧，任意一个是字符串，那么**+代表字符串连接**</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package charactor;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">float</span> hp;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="type">int</span> i = <span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">6</span>;</span><br><span class="line">        <span class="type">int</span> k = i+j; <span class="comment">//如果+号两侧都是整型，那么+代表 数字相加</span></span><br><span class="line">         </span><br><span class="line">        System.out.<span class="built_in">println</span>(k);</span><br><span class="line">         </span><br><span class="line">        <span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line">        <span class="type">String</span> b = <span class="string">&quot;5&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="type">String</span> c = a+b; <span class="comment">//如果+号两侧，任意一个是字符串，那么+代表字符串连接</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(c);</span><br><span class="line">         </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="观察类的多态现象"><a href="#观察类的多态现象" class="headerlink" title="观察类的多态现象"></a>观察类的多态现象</h3><p>观察类的多态现象： \1. i1和i2都是Item类型 \2. 都调用effect方法 \3. 输出不同的结果</p>
<p>多态: 都是同一个类型，调用同一个方法，却能呈现不同的状态</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Item</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="built_in">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">effect</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;物品使用后，可以有效果&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        Item i1 = <span class="keyword">new</span> LifePotion();</span><br><span class="line">        Item i2 = <span class="keyword">new</span> MagicPotion();</span><br><span class="line">        i1.effect();</span><br><span class="line">        i2.effect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MagicPotion</span> <span class="title">extends</span> <span class="title">Item</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">effect</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;蓝瓶使用后，可以回魔法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LifePotion</span> <span class="title">extends</span> <span class="title">Item</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">effect</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;血瓶使用后，可以回血&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类的多态条件"><a href="#类的多态条件" class="headerlink" title="类的多态条件"></a>类的多态条件</h3><p>要实现类的多态，需要如下条件 \1. 父类（接口）引用指向子类对象 \2. 调用的方法有<a href="https://how2j.cn/k/interface-inheritance/interface-inheritance-override/309.html">重写</a> 那么多态有什么作用呢？ 通过比较<a href="https://how2j.cn/k/interface-inheritance/interface-inheritance-polymorphic/315.html#step643">不使用多态</a>与<a href="https://how2j.cn/k/interface-inheritance/interface-inheritance-polymorphic/315.html#step645">使用多态</a>来进一步了解</p>
<p><strong>如果不使用多态</strong>， 假设英雄要使用血瓶和魔瓶，就需要为Hero设计两个方法 useLifePotion useMagicPotion</p>
<p>除了血瓶和魔瓶还有很多种物品，那么就需要设计很多很多个方法，比如 usePurityPotion 净化药水 useGuard 守卫 useInvisiblePotion 使用隐形药水 等等等等</p>
<p>如果物品的种类特别多，那么就需要设计很多的方法 比如useArmor,useWeapon等等</p>
<p><strong>这个时候采用多态来解决这个问题</strong> 设计一个方法叫做useItem，其参数类型是Item 如果是使用血瓶，调用该方法 如果是使用魔瓶，还是调用该方法 无论英雄要使用什么样的物品，<strong>只需要一个方法</strong>即可</p>
<h2 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h2><p>与重写类似，方法的<strong>重写是</strong>子类覆盖父类的<strong>对象方法</strong></p>
<p><strong>隐藏</strong>，就是子类覆盖父类的<strong>类方法</strong></p>
<h3 id="父类"><a href="#父类" class="headerlink" title="父类"></a>父类</h3><p>父类有一个类方法 ：battleWin</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">float</span> hp;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//类方法，静态方法</span></span><br><span class="line">    <span class="comment">//通过类就可以直接调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">battleWin</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;hero battle win&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="子类隐藏父类的类方法"><a href="#子类隐藏父类的类方法" class="headerlink" title="子类隐藏父类的类方法"></a>子类隐藏父类的类方法</h3><p>子类隐藏父类的类方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ADHero</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Hero</span> <span class="keyword">implements</span> <span class="variable constant_">AD</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">physicAttack</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;进行物理攻击&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//隐藏父类的battleWin方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">battleWin</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;ad hero battle win&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        <span class="title class_">Hero</span>.<span class="title function_">battleWin</span>();</span><br><span class="line">        <span class="title class_">ADHero</span>.<span class="title function_">battleWin</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><h3 id="准备一个显式提供无参构造方法的父类"><a href="#准备一个显式提供无参构造方法的父类" class="headerlink" title="准备一个显式提供无参构造方法的父类"></a>准备一个显式提供无参构造方法的父类</h3><p>准备显式提供无参构造方法的父类 在实例化Hero对象的时候，其构造方法会打印 “Hero的构造方法 “</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hero</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="built_in">float</span> hp;</span><br><span class="line">    <span class="built_in">float</span> armor;</span><br><span class="line">    <span class="built_in">int</span> moveSpeed;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useItem</span>(<span class="params">Item i</span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;hero use item&quot;</span>);</span><br><span class="line">        i.effect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;Hero的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> Hero();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实例化子类，父类的构造方法一定会被调用"><a href="#实例化子类，父类的构造方法一定会被调用" class="headerlink" title="实例化子类，父类的构造方法一定会被调用"></a>实例化子类，父类的构造方法一定会被调用</h3><p>实例化一个ADHero(), 其构造方法会被调用 其<strong>父类的构造方法也会被调用</strong> 并且是父类构造方法<strong>先调用</strong> 子类构造方法会默认调用父类的 无参的构造方法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ADHero</span> <span class="title">extends</span> <span class="title">Hero</span> <span class="title">implements</span> <span class="title">AD</span>&#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">physicAttack</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;进行物理攻击&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ADHero</span>()</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;AD Hero的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> ADHero();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="父类显式提供两个构造方法"><a href="#父类显式提供两个构造方法" class="headerlink" title="父类显式提供两个构造方法"></a>父类显式提供两个构造方法</h3><p>分别是无参的构造方法和带一个参数的构造方法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hero</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="built_in">float</span> hp;</span><br><span class="line">    <span class="built_in">float</span> armor;</span><br><span class="line">    <span class="built_in">int</span> moveSpeed;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useItem</span>(<span class="params">Item i</span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;hero use item&quot;</span>);</span><br><span class="line">        i.effect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;Hero的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span>(<span class="params">String name</span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;Hero的有一个参数的构造方法&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> Hero();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="子类显式调用父类带参构造方法"><a href="#子类显式调用父类带参构造方法" class="headerlink" title="子类显式调用父类带参构造方法"></a>子类显式调用父类带参构造方法</h3><p>使用关键字<strong>super</strong> 显式调用父类带参的构造方法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ADHero</span> <span class="title">extends</span> <span class="title">Hero</span> <span class="title">implements</span> <span class="title">AD</span>&#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">physicAttack</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;进行物理攻击&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ADHero</span>()</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;AD Hero的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ADHero</span>(<span class="params">String name</span>)</span> &#123;</span><br><span class="line">        super(name);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;AD Hero的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> ADHero(<span class="string">&quot;德莱文&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="调用父类属性"><a href="#调用父类属性" class="headerlink" title="调用父类属性"></a>调用父类属性</h3><p>通过super调用父类的moveSpeed属性 ADHero也提供了属性moveSpeed</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ADHero</span> <span class="title">extends</span> <span class="title">Hero</span> <span class="title">implements</span> <span class="title">AD</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> moveSpeed = <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">physicAttack</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;进行物理攻击&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">getMoveSpeed</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.moveSpeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">getMoveSpeed2</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> super.moveSpeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        ADHero h = <span class="keyword">new</span> ADHero();</span><br><span class="line">        System.<span class="keyword">out</span>.println(h.getMoveSpeed());</span><br><span class="line">        System.<span class="keyword">out</span>.println(h.getMoveSpeed2());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出:</span><br><span class="line">	Hero的构造方法</span><br><span class="line">    <span class="number">400</span></span><br><span class="line">    <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="调用父类方法"><a href="#调用父类方法" class="headerlink" title="调用父类方法"></a>调用父类方法</h3><p>ADHero重写了useItem方法，并且在useItem中<strong>通过super调用父类的useItem方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ADHero</span> <span class="keyword">extends</span> <span class="title class_">Hero</span> <span class="keyword">implements</span> <span class="title class_">AD</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">moveSpeed</span> <span class="operator">=</span> <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">physicAttack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进行物理攻击&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMoveSpeed</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.moveSpeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMoveSpeed2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.moveSpeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写useItem，并在其中调用父类的userItem方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">useItem</span><span class="params">(Item i)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;adhero use item&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.useItem(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ADHero</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ADHero</span>();</span><br><span class="line">        <span class="type">LifePotion</span> <span class="variable">lp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LifePotion</span>();</span><br><span class="line">        h.useItem(lp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出:</span><br><span class="line">	Hero的构造方法</span><br><span class="line">    adhero use item</span><br><span class="line">    hero use item</span><br><span class="line">    血瓶使用后，可以回血</span><br></pre></td></tr></table></figure>

<h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><p>Object类是所有类的父类</p>
<h3 id="Object类是所有类的父类"><a href="#Object类是所有类的父类" class="headerlink" title="Object类是所有类的父类"></a>Object类是所有类的父类</h3><p>声明一个类的时候，默认是继承了Object public class Hero <strong>extends Object</strong></p>
<h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p>Object类提供一个toString方法，所以所有的类都有toString方法 toString()的意思是返回当前对象的<strong>字符串表达</strong> 通过 System.out.println 打印对象就是打印该对象的toString()返回值</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Hero &#123;</span><br><span class="line">    String <span class="type">name</span>;</span><br><span class="line">    <span class="type">float</span> hp;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> String toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        Hero h = <span class="built_in">new</span> Hero();</span><br><span class="line">        h.name = &quot;盖伦&quot;;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(h.toString());</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(h);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    盖伦</span><br><span class="line">    盖伦</span><br></pre></td></tr></table></figure>

<h3 id="finalize"><a href="#finalize" class="headerlink" title="finalize()"></a>finalize()</h3><p>当一个对象没有任何引用指向的时候，它就满足垃圾回收的条件</p>
<p>当它被垃圾回收的时候，它的finalize() 方法就会被调用。</p>
<p>finalize() 不是开发人员主动调用的方法，而是由虚拟机JVM调用的。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="type">String</span> name;</span><br><span class="line">    <span class="type">float</span> hp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">finalize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;这个英雄正在被回收&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//只有一引用</span></span><br><span class="line">        Hero h;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//不断生成新的对象</span></span><br><span class="line">            <span class="comment">//每创建一个对象，前一个对象，就没有引用指向了</span></span><br><span class="line">            <span class="comment">//那些对象，就满足垃圾回收的条件</span></span><br><span class="line">            <span class="comment">//当，垃圾堆积的比较多的时候，就会触发垃圾回收</span></span><br><span class="line">            <span class="comment">//一旦这个对象被回收，它的finalize()方法就会被调用</span></span><br><span class="line">            h = <span class="keyword">new</span> <span class="built_in">Hero</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    这个英雄正在被回收</span><br><span class="line">    这个英雄正在被回收</span><br><span class="line">    这个英雄正在被回收</span><br><span class="line">    这个英雄正在被回收</span><br><span class="line">    这个英雄正在被回收</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<h3 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h3><p>equals() 用于判断两个对象的内容是否相同</p>
<p>假设，当两个英雄的hp相同的时候，我们就认为这两个英雄相同</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">public class Hero &#123;</span><br><span class="line">    String name<span class="comment">;</span></span><br><span class="line">    float hp<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    public boolean equals(Object o) &#123;</span><br><span class="line">        if (o instanceof Hero) &#123;</span><br><span class="line">            Hero h <span class="operator">=</span> (Hero)o<span class="comment">;</span></span><br><span class="line">            return this.hp <span class="operator">=</span><span class="operator">=</span> h.hp<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        return false<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Hero h1 <span class="operator">=</span> new Hero()<span class="comment">;</span></span><br><span class="line">        h1.hp <span class="operator">=</span> <span class="number">300</span><span class="comment">;</span></span><br><span class="line">        Hero h2 <span class="operator">=</span> new Hero()<span class="comment">;</span></span><br><span class="line">        h2.hp <span class="operator">=</span> <span class="number">400</span><span class="comment">;</span></span><br><span class="line">        Hero h3 <span class="operator">=</span> new Hero()<span class="comment">;</span></span><br><span class="line">        h3.hp <span class="operator">=</span> <span class="number">500</span><span class="comment">;</span></span><br><span class="line">        System.out.println(h1.equals(h2))<span class="comment">;</span></span><br><span class="line">        System.out.println(h1.equals(h3))<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="x3D-x3D"><a href="#x3D-x3D" class="headerlink" title="&#x3D;&#x3D;"></a>&#x3D;&#x3D;</h3><p>这不是Object的方法，但是用于判断两个对象是否相同 <strong>更准确的讲</strong>，用于判断两个引用，是否指向了同一个对象</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">public class Hero &#123;</span><br><span class="line">    String name<span class="comment">;</span></span><br><span class="line">    float hp<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    public boolean equals(Object o) &#123;</span><br><span class="line">        if (o instanceof Hero) &#123;</span><br><span class="line">            Hero h <span class="operator">=</span> (Hero)o<span class="comment">;</span></span><br><span class="line">            return this.hp <span class="operator">=</span><span class="operator">=</span> h.hp<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        return false<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Hero h1 <span class="operator">=</span> new Hero()<span class="comment">;</span></span><br><span class="line">        h1.hp <span class="operator">=</span> <span class="number">300</span><span class="comment">;</span></span><br><span class="line">        Hero h2 <span class="operator">=</span> new Hero()<span class="comment">;</span></span><br><span class="line">        h2.hp <span class="operator">=</span> <span class="number">400</span><span class="comment">;</span></span><br><span class="line">        Hero h3 <span class="operator">=</span> new Hero()<span class="comment">;</span></span><br><span class="line">        h3.hp <span class="operator">=</span> <span class="number">500</span><span class="comment">;</span></span><br><span class="line">        System.out.println(h1 <span class="operator">=</span><span class="operator">=</span> h2)<span class="comment">;</span></span><br><span class="line">        System.out.println(h1 <span class="operator">=</span><span class="operator">=</span> h3)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a>hashCode()</h3><p>hashCode方法返回一个对象的哈希值，但是在了解哈希值的意义之前，讲解这个方法没有意义。</p>
<p>hashCode的意义，将放在<a href="https://how2j.cn/k/collection/collection-hashcode/371.html">hashcode 原理</a>章节讲解</p>
<h3 id="线程同步相关方法"><a href="#线程同步相关方法" class="headerlink" title="线程同步相关方法"></a>线程同步相关方法</h3><p>Object还提供线程同步相关方法 wait() notify() notifyAll() 这部分内容的理解需要建立在对线程安全有足够的理解的基础之上，所以会放在<a href="https://how2j.cn/k/thread/thread-wait-notify/358.html">线程交互</a> 的章节讲解</p>
<h3 id="getClass"><a href="#getClass" class="headerlink" title="getClass()"></a>getClass()</h3><p>getClass()会返回一个对象的<a href="https://how2j.cn/k/reflection/reflection-class/108.html">类对象</a>，属于高级内容，不适合初学者过早接触，关于类对象的详细内容请参考<a href="https://how2j.cn/k/reflection/reflection-reflection/107.html">反射机制</a></p>
<h2 id="final-1"><a href="#final-1" class="headerlink" title="final"></a>final</h2><p>final修饰类，方法，基本类型变量，引用的时候分别有不同的意思。</p>
<h3 id="final修饰类"><a href="#final修饰类" class="headerlink" title="final修饰类"></a>final修饰类</h3><p>当Hero被修饰成final的时候，表示Hero不能够被继承 其子类会出现编译错误</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line">public <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    <span class="type">String</span> name; <span class="comment">//姓名</span></span><br><span class="line">        </span><br><span class="line">    float hp; <span class="comment">//血量</span></span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="final修饰方法"><a href="#final修饰方法" class="headerlink" title="final修饰方法"></a>final修饰方法</h3><p>Hero的useItem方法被修饰成final,那么该方法在ADHero中，不能够被重写</p>
<h3 id="final修饰基本类型变量"><a href="#final修饰基本类型变量" class="headerlink" title="final修饰基本类型变量"></a>final修饰基本类型变量</h3><p>final修饰基本类型变量，表示该变量只有一次赋值机会 16行进行了赋值，17行就不可以再进行赋值了</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> extends Object &#123;</span><br><span class="line">    <span class="type">String</span> name; <span class="comment">//姓名</span></span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> hp; <span class="comment">//血量</span></span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> hp;</span><br><span class="line">        hp = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">//hp = 6;报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="final修饰引用"><a href="#final修饰引用" class="headerlink" title="final修饰引用"></a>final修饰引用</h3><p>final修饰引用 h引用被修饰成final，表示该引用只有<strong>1</strong>次指向对象的机会 所以17行会出现编译错误 但是，依然通过h引用修改对象的属性值hp，因为hp并没有final修饰</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</span><br><span class="line">    public static void main(<span class="type">String</span>[] args) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Hero</span> h;</span><br><span class="line">        h = <span class="keyword">new</span> <span class="type">Hero</span>();</span><br><span class="line">        <span class="comment">//h = new Hero();报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量指的是可以公开，直接访问，不会变化的值 比如 itemTotalNumber 物品栏的数量是6个</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public static <span class="keyword">final</span> int <span class="type">ITEMTOTALNUMBER</span> = <span class="number">6</span>;</span><br><span class="line">    float hp;</span><br><span class="line"></span><br><span class="line">    public static void main(<span class="type">String</span>[] args) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Hero</span> h;</span><br><span class="line">        h = <span class="keyword">new</span> <span class="type">Hero</span>();</span><br><span class="line">        h.hp = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>在类中声明一个方法，这个方法没有实现体，是一个“空”方法</p>
<p>这样的方法就叫抽象方法，使用修饰符“abstract”</p>
<p>当一个类有抽象方法的时候，该类必须被声明为抽象类</p>
<h3 id="抽象类-1"><a href="#抽象类-1" class="headerlink" title="抽象类"></a>抽象类</h3><p>为Hero增加一个<strong>抽象方法 attack</strong>，并且把Hero声明为abstract的。 APHero,ADHero,ADAPHero是Hero的子类，继承了Hero的属性和方法。 但是各自的攻击手段是不一样的，所以继承Hero类后，这些<strong>子类就必须提供</strong>不一样的attack方法实现。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="title class_">String</span> name;</span><br><span class="line"></span><br><span class="line">    float hp;</span><br><span class="line"></span><br><span class="line">    float armor;</span><br><span class="line"></span><br><span class="line">    int moveSpeed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法attack</span></span><br><span class="line">    <span class="comment">// Hero的子类会被要求实现attack方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">void</span> <span class="title function_">attack</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ADHero</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Hero</span> <span class="keyword">implements</span> <span class="variable constant_">AD</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">physicAttack</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;进行物理攻击&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">attack</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">physicAttack</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">APHero</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Hero</span> <span class="keyword">implements</span> <span class="variable constant_">AP</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">magicAttack</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;进行魔法攻击&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">attack</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">magicAttack</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ADAPHero</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Hero</span> <span class="keyword">implements</span> <span class="variable constant_">AD</span>, <span class="variable constant_">AP</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">attack</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;既可以进行物理攻击，也可以进行魔法攻击&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">physicAttack</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;进行物理攻击&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">magicAttack</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;进行魔法攻击&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="抽象类可以没有抽象方法"><a href="#抽象类可以没有抽象方法" class="headerlink" title="抽象类可以没有抽象方法"></a>抽象类可以没有抽象方法</h3><p>Hero类可以在不提供抽象方法的前提下，声明为抽象类 一旦一个类被声明为抽象类，就不能够被直接实例化</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        <span class="comment">//Hero h = new Hero();报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h3><p><strong>区别1：</strong></p>
<ul>
<li>子类只能继承一个抽象类，不能继承多个</li>
<li>子类可以实现<strong>多个</strong>接口</li>
</ul>
<p><strong>区别2：</strong></p>
<ul>
<li>抽象类可以定义 public,protected,package,private</li>
<li>静态和非静态属性 final和非final属性</li>
<li>但是接口中声明的属性，只能是 public 静态 final的</li>
<li>即便没有显式的声明</li>
</ul>
<p>注: 抽象类和接口都可以有实体方法。 接口中的实体方法，叫做<a href="https://how2j.cn/k/interface-inheritance/interface-inheritance-default-method/676.html">默认方法</a></p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AP</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> resistPhysic = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//resistMagic即便没有显式的声明为 public static final</span></span><br><span class="line">    <span class="comment">//但依然默认为public static final</span></span><br><span class="line">    <span class="keyword">int</span> resistMagic = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">magicAttack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h3 id="非静态内部类"><a href="#非静态内部类" class="headerlink" title="非静态内部类"></a>非静态内部类</h3><p>非静态内部类 BattleScore “战斗成绩” 非静态内部类可以直接在一个类里面定义</p>
<p>比如： 战斗成绩只有在一个英雄对象存在的时候才有意义 所以实例化BattleScore 的时候，必须建立在一个存在的英雄的基础上 语法: <strong>new 外部类().new 内部类()</strong> 作为Hero的非静态内部类，是可以直接访问外部类的<strong>private</strong>实例属性name的</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hero</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="built_in">float</span> hp;</span><br><span class="line">    <span class="built_in">float</span> armor;</span><br><span class="line">    <span class="built_in">int</span> moveSpeed;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非静态内部类，只有一个外部类对象存在的时候，才有意义</span></span><br><span class="line">    <span class="comment">// 战斗成绩只有在一个英雄对象存在的时候才有意义</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">BattleScore</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> kill;</span><br><span class="line">        <span class="built_in">int</span> die;</span><br><span class="line">        <span class="built_in">int</span> assit;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">legendary</span>()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (kill &gt;= <span class="number">8</span>) &#123;</span><br><span class="line">                System.<span class="keyword">out</span>.println(name + <span class="string">&quot;超神！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.<span class="keyword">out</span>.println(name + <span class="string">&quot;尚未超神！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        Hero garen = <span class="keyword">new</span> Hero();</span><br><span class="line">        garen.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        <span class="comment">// 实例化内部类</span></span><br><span class="line">        <span class="comment">// BattleScore对象只有在一个英雄对象存在的时候才有意义</span></span><br><span class="line">        <span class="comment">// 所以其实例化必须建立在一个外部类对象的基础之上</span></span><br><span class="line">        BattleScore score = garen.<span class="function"><span class="keyword">new</span> <span class="title">BattleScore</span>()</span>;</span><br><span class="line">        score.kill = <span class="number">9</span>;</span><br><span class="line">        score.legendary();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    盖伦超神！</span><br></pre></td></tr></table></figure>

<h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>在一个类里面声明一个静态内部类 比如敌方水晶，当敌方水晶没有血的时候，己方所有英雄都取得胜利，而不只是某一个具体的英雄取得胜利。 与非静态内部类不同，<strong>静态内部类</strong>水晶类的实例化 <strong>不需要一个外部类的实例为基础</strong>，可以直接实例化 语法：<strong>new 外部类.静态内部类();</strong> 因为没有一个外部类的实例，所以在静态内部类里面<strong>不可以访问外部类的实例属性和方法</strong> 除了可以访问外部类的<strong>私有静态成员外</strong>，静态内部类和普通类没什么大的区别</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">float</span> hp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">battleWin</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;battle win&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//敌方的水晶</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">EnemyCrystal</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> hp = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果水晶的血量为0，则宣布胜利</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkIfVictory</span>()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (hp == <span class="number">0</span>) &#123;</span><br><span class="line">                Hero.battleWin();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//静态内部类不能直接访问外部类的对象属性</span></span><br><span class="line">                <span class="comment">//可以访问外部类的私有静态成员</span></span><br><span class="line">                <span class="comment">//静态方法 不能访问这个类中的普通属性 ，因为那些属性属于一个对象，但可以访问静态属性</span></span><br><span class="line">                <span class="comment">//System.out.println(name + &quot; win this game&quot;);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//实例化静态内部类</span></span><br><span class="line">        Hero.EnemyCrystal crystal = <span class="keyword">new</span> Hero.EnemyCrystal();</span><br><span class="line">        crystal.checkIfVictory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="匿名类"><a href="#匿名类" class="headerlink" title="匿名类"></a>匿名类</h3><p>匿名类指的是在<strong>声明一个类的同时实例化它</strong>，使代码更加简洁精练 通常情况下，要使用一个接口或者抽象类，都必须创建一个子类</p>
<p>有的时候，为了快速使用，直接实例化一个抽象类，并“<strong>当场</strong>”实现其抽象方法。 既然实现了抽象方法，那么就是一个新的类，只是这个类，没有命名。 这样的类，叫做匿名类</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Hero</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="built_in">float</span> hp;</span><br><span class="line">    <span class="built_in">float</span> armor;</span><br><span class="line">    <span class="built_in">int</span> moveSpeed;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">attack</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        ADHero adh = <span class="keyword">new</span> ADHero();</span><br><span class="line">        adh.attack();<span class="comment">//进行物理攻击</span></span><br><span class="line">        <span class="comment">//通过打印adh，可以看到adh这个对象属于ADHero类</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(adh);<span class="comment">//ADHero@1b6d3586</span></span><br><span class="line"></span><br><span class="line">        Hero h = <span class="keyword">new</span> Hero() &#123;</span><br><span class="line">            <span class="comment">//当场实现attack方法</span></span><br><span class="line">            @Override</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span>()</span> &#123;</span><br><span class="line">                System.<span class="keyword">out</span>.println(<span class="string">&quot;新的进攻手段&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        h.attack();<span class="comment">//新的进攻手段</span></span><br><span class="line">        <span class="comment">//通过打印h，可以看到h这个对象属于Hero$1这么一个系统自动分配的类名</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(h);<span class="comment">//Hero$1@4554617c</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="本地类"><a href="#本地类" class="headerlink" title="本地类"></a>本地类</h3><p>本地类可以理解为有名字的匿名类 内部类与匿名类不一样的是，内部类必须声明在成员的位置，即与属性和方法平等的位置。 本地类和匿名类一样，直接声明在代码块里面，可以是主方法，for循环里等等地方</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Hero</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="built_in">float</span> hp;</span><br><span class="line">    <span class="built_in">float</span> armor;</span><br><span class="line">    <span class="built_in">int</span> moveSpeed;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">attack</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//与匿名类的区别在于，本地类有了自定义的类名</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title">SomeHero</span> <span class="title">extends</span> <span class="title">Hero</span> &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span>()</span> &#123;</span><br><span class="line">                System.<span class="keyword">out</span>.println(name+ <span class="string">&quot; 新的进攻手段&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SomeHero h = <span class="keyword">new</span> SomeHero();</span><br><span class="line">        h.name = <span class="string">&quot;地卜师&quot;</span>;</span><br><span class="line">        h.attack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    地卜师 新的进攻手段</span><br></pre></td></tr></table></figure>

<h3 id="在匿名类中使用外部的局部变量"><a href="#在匿名类中使用外部的局部变量" class="headerlink" title="在匿名类中使用外部的局部变量"></a>在匿名类中使用外部的局部变量</h3><p>在匿名类中使用外部的局部变量，外部的局部变量必须修饰为final</p>
<p>为什么要声明为final，其机制比较复杂，请参考第二个Hero代码中的解释</p>
<p><strong>注：</strong>在jdk8中，已经不需要强制修饰成final了，如果没有写final，不会报错，因为编译器<strong>偷偷的</strong>帮你加上了看不见的final</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Hero</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">attack</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//在匿名类中使用外部的局部变量，外部的局部变量必须修饰为final</span></span><br><span class="line">        final <span class="built_in">int</span> damage = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        Hero h = <span class="keyword">new</span> Hero() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span>()</span> &#123;</span><br><span class="line">                System.<span class="keyword">out</span>.printf(<span class="string">&quot;新的进攻手段，造成%d点伤害&quot;</span>, damage);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        h.attack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    新的进攻手段，造成<span class="number">5</span>点伤害</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Hero</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">attack</span>()</span>;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//在匿名类中使用外部的局部变量damage 必须修饰为final</span></span><br><span class="line">        <span class="built_in">int</span> damage = <span class="number">5</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//这里使用本地类AnonymousHero来模拟匿名类的隐藏属性机制</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//事实上的匿名类，会在匿名类里声明一个damage属性，并且使用构造方法初始化该属性的值</span></span><br><span class="line">        <span class="comment">//在attack中使用的damage，真正使用的是这个内部damage，而非外部damage</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//假设外部属性不需要声明为final</span></span><br><span class="line">        <span class="comment">//那么在attack中修改damage的值，就会被暗示为修改了外部变量damage的值</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//但是他们俩是不同的变量，是不可能修改外部变量damage的</span></span><br><span class="line">        <span class="comment">//所以为了避免产生误导，外部的damage必须声明为final,&quot;看上去&quot;就不能修改了</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title">AnonymousHero</span> <span class="title">extends</span> <span class="title">Hero</span>&#123;</span><br><span class="line">            <span class="built_in">int</span> damage;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">AnonymousHero</span>(<span class="params"><span class="built_in">int</span> damage</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.damage = damage;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span>()</span> &#123;</span><br><span class="line">                damage = <span class="number">10</span>;</span><br><span class="line">                System.<span class="keyword">out</span>.printf(<span class="string">&quot;新的进攻手段，造成%d点伤害&quot;</span>,<span class="keyword">this</span>.damage );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        Hero h = <span class="keyword">new</span> AnonymousHero(damage);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h2><h3 id="什么是默认方法"><a href="#什么是默认方法" class="headerlink" title="什么是默认方法"></a>什么是默认方法</h3><p>默认方法是JDK8新特性，指的是接口也可以提供具体方法了，而不像以前，只能提供抽象方法</p>
<p>Mortal 这个接口，增加了一个<strong>默认方法</strong> revive，这个方法有实现体，并且被声明为了<strong>default</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Mortal</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">die</span>()</span>;</span><br><span class="line">    <span class="function"><span class="literal">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">revive</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;本英雄复活了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="为什么会有默认方法"><a href="#为什么会有默认方法" class="headerlink" title="为什么会有默认方法"></a>为什么会有默认方法</h3><p><strong>default的中文意思就是“默认”</strong></p>
<p>假设没有默认方法这种机制，那么如果要为Mortal增加一个新的方法revive,那么所有实现了Mortal接口的类，都需要做改动。</p>
<p>但是引入了默认方法后，原来的类，不需要做任何改动，并且还能<strong>得到</strong>这个默认方法</p>
<p>通过这种手段，就能够很好的扩展新的类，并且做到不影响原来的类</p>
<h1 id="数字与字符串"><a href="#数字与字符串" class="headerlink" title="数字与字符串"></a>数字与字符串</h1><h2 id="装箱拆箱"><a href="#装箱拆箱" class="headerlink" title="装箱拆箱"></a>装箱拆箱</h2><h3 id="封装类"><a href="#封装类" class="headerlink" title="封装类"></a>封装类</h3><p>所有的<strong>基本类型</strong>，都有对应的<strong>类类型</strong> 比如int对应的类是Integer 这种类就叫做封装类</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNumber</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">//把一个基本类型的变量,转换为Integer对象</span></span><br><span class="line">        Integer it = <span class="keyword">new</span> <span class="built_in">Integer</span>(i);</span><br><span class="line">        <span class="comment">//把一个Integer对象，转换为一个基本类型的int</span></span><br><span class="line">        <span class="type">int</span> i2 = it.<span class="built_in">intValue</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Number类"><a href="#Number类" class="headerlink" title="Number类"></a>Number类</h3><p>数字封装类有 Byte,Short,Integer,Long,Float,Double 这些类都是抽象类Number的子类</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220109230821025.png" alt="image-20220109230821025"></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestNumber &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">5</span>;</span><br><span class="line">        <span class="type">Integer</span> it = <span class="built_in">new</span> <span class="type">Integer</span>(i);</span><br><span class="line">        //<span class="type">Integer</span>是Number的子类，所以打印<span class="keyword">true</span></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(it instanceof Number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自动装箱-x2F-拆箱"><a href="#自动装箱-x2F-拆箱" class="headerlink" title="自动装箱&#x2F;拆箱"></a>自动装箱&#x2F;拆箱</h3><p>不需要调用构造方法，<strong>通过&#x3D;符号自动</strong>把 基本类型 转换为 类类型 就叫装箱</p>
<p>不需要调用Integer的intValue方法，通过&#x3D;就自动转换成int类型，就叫拆箱</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNumber</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">5</span>;</span><br><span class="line">        Integer it = i;</span><br><span class="line">        <span class="type">int</span> i2 = it;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="int的最大值，最小值"><a href="#int的最大值，最小值" class="headerlink" title="int的最大值，最小值"></a>int的最大值，最小值</h3><p>int的最大值可以通过其对应的封装类Integer.MAX_VALUE获取</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestNumber &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        //<span class="type">int</span>的最大值</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="type">Integer</span>.MAX_VALUE);</span><br><span class="line">        //<span class="type">int</span>的最小值</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="type">Integer</span>.MIN_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    <span class="number">2147483647</span></span><br><span class="line">	<span class="number">-2147483648</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串转换"><a href="#字符串转换" class="headerlink" title="字符串转换"></a>字符串转换</h2><h3 id="数字转字符串"><a href="#数字转字符串" class="headerlink" title="数字转字符串"></a>数字转字符串</h3><p>方法1： 使用String类的静态方法valueOf 方法2： 先把基本类型装箱为对象，然后调用对象的toString</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNumber</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">//方法1</span></span><br><span class="line">        <span class="type">String</span> str = <span class="type">String</span>.<span class="built_in">valueOf</span>(i);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法2</span></span><br><span class="line">        Integer it = i;</span><br><span class="line">        <span class="type">String</span> str2 = it.<span class="built_in">toString</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符串转数字"><a href="#字符串转数字" class="headerlink" title="字符串转数字"></a>字符串转数字</h3><p>调用Integer的静态方法parseInt</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNumber</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span>(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        <span class="built_in">String</span> <span class="built_in">str</span> = <span class="string">&quot;999&quot;</span>;</span><br><span class="line">        <span class="type">int</span> i = Integer.<span class="property">parseInt</span>(<span class="built_in">str</span>);</span><br><span class="line">        System.<span class="property">out</span>.<span class="property">println</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数学方法"><a href="#数学方法" class="headerlink" title="数学方法"></a>数学方法</h2><p>java.lang.Math提供了一些常用的数学运算方法，并且都是以静态方法的形式存在</p>
<h3 id="四舍五入-随机数，开方，次方，π，自然常数"><a href="#四舍五入-随机数，开方，次方，π，自然常数" class="headerlink" title="四舍五入, 随机数，开方，次方，π，自然常数"></a>四舍五入, 随机数，开方，次方，π，自然常数</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestNumber &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="type">float</span> f1 = <span class="number">5.4</span>f;</span><br><span class="line">        <span class="type">float</span> f2 = <span class="number">5.5</span>f;</span><br><span class="line">        //<span class="number">5.4</span>四舍五入即<span class="number">5</span></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(Math.round(f1));</span><br><span class="line">        //<span class="number">5.5</span>四舍五入即<span class="number">6</span></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(Math.round(f2));</span><br><span class="line">         </span><br><span class="line">        //得到一个<span class="number">0</span><span class="number">-1</span>之间的随机浮点数（取不到<span class="number">1</span>）</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(Math.random());</span><br><span class="line">         </span><br><span class="line">        //得到一个<span class="number">0</span><span class="number">-10</span>之间的随机整数 （取不到<span class="number">10</span>）</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println((<span class="type">int</span>)( Math.random()*<span class="number">10</span>));</span><br><span class="line">        //开方</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(Math.sqrt(<span class="number">9</span>));</span><br><span class="line">        //次方（<span class="number">2</span>的<span class="number">4</span>次方）</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(Math.pow(<span class="number">2</span>,<span class="number">4</span>));</span><br><span class="line">         </span><br><span class="line">        //π</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(Math.PI);</span><br><span class="line">         </span><br><span class="line">        //自然常数</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(Math.E);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><p>如果不使用格式化输出，就需要进行字符串连接，如果变量比较多，拼接就会显得繁琐 使用格式化输出，就可以简洁明了</p>
<p>%s 表示字符串 %d 表示数字 %n 表示换行</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNumber</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">String</span> name =<span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        <span class="type">int</span> kill = <span class="number">8</span>;</span><br><span class="line">        <span class="type">String</span> title=<span class="string">&quot;超神&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//直接使用+进行字符串连接，编码感觉会比较繁琐，并且维护性差,易读性差</span></span><br><span class="line">        <span class="type">String</span> sentence = name+ <span class="string">&quot; 在进行了连续 &quot;</span> + kill + <span class="string">&quot; 次击杀后，获得了 &quot;</span> + title +<span class="string">&quot; 的称号&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.<span class="built_in">println</span>(sentence);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//使用格式化输出</span></span><br><span class="line">        <span class="comment">//%s表示字符串，%d表示数字,%n表示换行</span></span><br><span class="line">        <span class="type">String</span> sentenceFormat =<span class="string">&quot;%s 在进行了连续 %d 次击杀后，获得了 %s 的称号%n&quot;</span>;</span><br><span class="line">        System.out.<span class="built_in">printf</span>(sentenceFormat,name,kill,title);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="printf和format"><a href="#printf和format" class="headerlink" title="printf和format"></a>printf和format</h3><p>printf和format能够达到一模一样的效果，<a href="https://how2j.cn/k/helloworld/helloworld-eclipse-tips/300.html#step706">如何通过eclipse查看java源代码</a> 可以看到，在printf中直接调用了format</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNumber</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">String</span> name =<span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        <span class="type">int</span> kill = <span class="number">8</span>;</span><br><span class="line">        <span class="type">String</span> title=<span class="string">&quot;超神&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="type">String</span> sentenceFormat =<span class="string">&quot;%s 在进行了连续 %d 次击杀后，获得了 %s 的称号%n&quot;</span>;</span><br><span class="line">        <span class="comment">//使用printf格式化输出</span></span><br><span class="line">        System.out.<span class="built_in">printf</span>(sentenceFormat,name,kill,title);</span><br><span class="line">        <span class="comment">//使用format格式化输出</span></span><br><span class="line">        System.out.format(sentenceFormat,name,kill,title);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h3><p><strong>换行符</strong>就是另起一行 — ‘\n’ 换行（newline） <strong>回车符</strong>就是回到一行的开头 — ‘\r’ 回车（return） 在eclipse里敲一个回车，实际上是<strong>回车换行符</strong> Java是跨平台的编程语言，同样的代码，可以在不同的平台使用，比如Windows,Linux,Mac 然而在不同的操作系统，换行符是不一样的 （1）在DOS和Windows中，每行结尾是 “\r\n”； （2）Linux系统里，每行结尾只有 “\n”； （3）Mac系统里，每行结尾是只有 “\r”。 为了使得同一个java程序的换行符在所有的操作系统中都有一样的表现，使用%n，就可以做到平台无关的换行</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestNumber</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">printf</span>(<span class="string">&quot;这是换行符%n&quot;</span>);</span><br><span class="line">        System.out.<span class="built_in">printf</span>(<span class="string">&quot;这是换行符%n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总长度，左对齐，补0，千位分隔符，小数点位数，本地化表达"><a href="#总长度，左对齐，补0，千位分隔符，小数点位数，本地化表达" class="headerlink" title="总长度，左对齐，补0，千位分隔符，小数点位数，本地化表达"></a>总长度，左对齐，补0，千位分隔符，小数点位数，本地化表达</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line">   </span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestNumber &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="type">int</span> year = <span class="number">2020</span>;</span><br><span class="line">        //总长度，左对齐，补<span class="number">0</span>，千位分隔符，小数点位数，本地化表达</span><br><span class="line">          </span><br><span class="line">        //直接打印数字</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.format(&quot;%d%n&quot;,year);</span><br><span class="line">        //总长度是<span class="number">8</span>,默认右对齐</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.format(&quot;%8d%n&quot;,year);</span><br><span class="line">        //总长度是<span class="number">8</span>,左对齐</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.format(&quot;%-8d%n&quot;,year);</span><br><span class="line">        //总长度是<span class="number">8</span>,不够补<span class="number">0</span></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.format(&quot;%08d%n&quot;,year);</span><br><span class="line">        //千位分隔符</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.format(&quot;%,8d%n&quot;,year*<span class="number">10000</span>);</span><br><span class="line">  </span><br><span class="line">        //小数点位数</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.format(&quot;%.2f%n&quot;,Math.PI);</span><br><span class="line">          </span><br><span class="line">        //不同国家的千位分隔符</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.format(Locale.FRANCE,&quot;%,.2f%n&quot;,Math.PI*<span class="number">10000</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.format(Locale.US,&quot;%,.2f%n&quot;,Math.PI*<span class="number">10000</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.format(Locale.UK,&quot;%,.2f%n&quot;,Math.PI*<span class="number">10000</span>);</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="保存一个字符的时候使用char"><a href="#保存一个字符的时候使用char" class="headerlink" title="保存一个字符的时候使用char"></a>保存一个字符的时候使用char</h3><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestChar</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c1 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">char</span> c2 = <span class="string">&#x27;1&#x27;</span>;<span class="comment">//字符1,而非数字1</span></span><br><span class="line">        <span class="keyword">char</span> c3 = <span class="string">&#x27;中&#x27;</span>;<span class="comment">//汉字字符</span></span><br><span class="line">        <span class="keyword">char</span> c4 = <span class="string">&#x27;ab&#x27;</span>; <span class="comment">//只能放一个字符</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="char对应的封装类"><a href="#char对应的封装类" class="headerlink" title="char对应的封装类"></a>char对应的封装类</h3><p>char对应的封装类是Character 装箱拆箱概念，参考 <a href="https://how2j.cn/k/number-string/number-string-wrap/22.html">拆箱装箱</a></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestChar</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="type">char</span> c1 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        Character c = c1; <span class="comment">//自动装箱</span></span><br><span class="line">        c1 = c;<span class="comment">//自动拆箱</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Character常见方法"><a href="#Character常见方法" class="headerlink" title="Character常见方法"></a>Character常见方法</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> TestChar &#123;</span><br><span class="line"> </span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">         </span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Character</span>.</span></span>is<span class="constructor">Letter(&#x27;<span class="params">a</span>&#x27;)</span>);<span class="comment">//判断是否为字母</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Character</span>.</span></span>is<span class="constructor">Digit(&#x27;<span class="params">a</span>&#x27;)</span>); <span class="comment">//判断是否为数字</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Character</span>.</span></span>is<span class="constructor">Whitespace(&#x27; &#x27;)</span>); <span class="comment">//是否是空白</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Character</span>.</span></span>is<span class="constructor">UpperCase(&#x27;<span class="params">a</span>&#x27;)</span>); <span class="comment">//是否是大写</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Character</span>.</span></span>is<span class="constructor">LowerCase(&#x27;<span class="params">a</span>&#x27;)</span>); <span class="comment">//是否是小写</span></span><br><span class="line">         </span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Character</span>.</span></span><span class="keyword">to</span><span class="constructor">UpperCase(&#x27;<span class="params">a</span>&#x27;)</span>); <span class="comment">//转换为大写</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Character</span>.</span></span><span class="keyword">to</span><span class="constructor">LowerCase(&#x27;A&#x27;)</span>); <span class="comment">//转换为小写</span></span><br><span class="line"> </span><br><span class="line">        String a = <span class="character">&#x27;a&#x27;</span>; <span class="comment">//不能够直接把一个字符转换成字符串</span></span><br><span class="line">        String a2 = <span class="module-access"><span class="module"><span class="identifier">Character</span>.</span></span><span class="keyword">to</span><span class="constructor">String(&#x27;<span class="params">a</span>&#x27;)</span>; <span class="comment">//转换为字符串</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="常见转义"><a href="#常见转义" class="headerlink" title="常见转义"></a>常见转义</h3><figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">public class TestChar &#123;</span><br><span class="line">  </span><br><span class="line">    public static void mai<span class="meta">n</span>(String[] args) &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.printl<span class="meta">n</span>(<span class="string">&quot;使用空格无法达到对齐的效果&quot;</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.printl<span class="meta">n</span>(<span class="string">&quot;abc def&quot;</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.printl<span class="meta">n</span>(<span class="string">&quot;ab def&quot;</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.printl<span class="meta">n</span>(<span class="string">&quot;a def&quot;</span>);</span><br><span class="line">          </span><br><span class="line">        System.<span class="keyword">out</span>.printl<span class="meta">n</span>(<span class="string">&quot;使用\\t制表符可以达到对齐的效果&quot;</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.printl<span class="meta">n</span>(<span class="string">&quot;abc\tdef&quot;</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.printl<span class="meta">n</span>(<span class="string">&quot;ab\tdef&quot;</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.printl<span class="meta">n</span>(<span class="string">&quot;a\tdef&quot;</span>);</span><br><span class="line">         </span><br><span class="line">        System.<span class="keyword">out</span>.printl<span class="meta">n</span>(<span class="string">&quot;一个\\t制表符长度是8&quot;</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.printl<span class="meta">n</span>(<span class="string">&quot;12345678def&quot;</span>);</span><br><span class="line">          </span><br><span class="line">        System.<span class="keyword">out</span>.printl<span class="meta">n</span>(<span class="string">&quot;换行符 \\n&quot;</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.printl<span class="meta">n</span>(<span class="string">&quot;abc\ndef&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        System.<span class="keyword">out</span>.printl<span class="meta">n</span>(<span class="string">&quot;单引号 \\&#x27;&quot;</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.printl<span class="meta">n</span>(<span class="string">&quot;abc\&#x27;def&quot;</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.printl<span class="meta">n</span>(<span class="string">&quot;双引号 \\\&quot;&quot;</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.printl<span class="meta">n</span>(<span class="string">&quot;abc\&quot;def&quot;</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.printl<span class="meta">n</span>(<span class="string">&quot;反斜杠本身 \\&quot;</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.printl<span class="meta">n</span>(<span class="string">&quot;abc\\def&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h2><h3 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h3><p>字符串即字符的组合，在Java中，字符串是一个类，所以我们见到的字符串都是对象 常见创建字符串手段： \1. 每当有一个<strong>字面值</strong>出现的时候，虚拟机就会创建一个字符串 \2. 调用String的构造方法创建一个字符串对象 \3. 通过+加号进行字符串拼接也会创建新的字符串对象</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestString</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        <span class="title class_">String</span> garen =<span class="string">&quot;盖伦&quot;</span>; <span class="comment">//字面值,虚拟机碰到字面值就会创建一个字符串对象</span></span><br><span class="line">         </span><br><span class="line">        <span class="title class_">String</span> teemo = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;提莫&quot;</span>); <span class="comment">//创建了两个字符串对象</span></span><br><span class="line">         </span><br><span class="line">        char[] cs = <span class="keyword">new</span> char[]&#123;<span class="string">&#x27;崔&#x27;</span>,<span class="string">&#x27;斯&#x27;</span>,<span class="string">&#x27;特&#x27;</span>&#125;;</span><br><span class="line">         </span><br><span class="line">        <span class="title class_">String</span> hero = <span class="keyword">new</span> <span class="title class_">String</span>(cs);<span class="comment">//  通过字符数组创建一个字符串对象</span></span><br><span class="line">         </span><br><span class="line">        <span class="title class_">String</span> hero3 = garen + teemo;<span class="comment">//  通过+加号进行字符串拼接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="final-2"><a href="#final-2" class="headerlink" title="final"></a>final</h3><p>String 被修饰为final,所以是不能被继承的</p>
<h3 id="immutable"><a href="#immutable" class="headerlink" title="immutable"></a>immutable</h3><p>immutable 是指不可改变的 比如创建了一个字符串对象 String garen &#x3D;”盖伦”; <strong>不可改变</strong>的具体含义是指： 不能增加长度 不能减少长度 不能插入字符 不能删除字符 不能修改字符 一旦创建好这个字符串，里面的内容 <strong>永远</strong> 不能改变</p>
<p>String 的表现就像是一个<strong>常量</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">TestString</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        <span class="title class_">String</span> garen =<span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><p>如果不使用字符串格式化，就需要进行字符串连接，如果变量比较多，拼接就会显得繁琐 使用<strong>字符串格式化</strong>，就可以<strong>简洁明了</strong> 更多的格式化规则，参考<a href="https://how2j.cn/k/number-string/number-string-foramt/320.html">格式化输出</a></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestString</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">        <span class="type">String</span> name =<span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        <span class="type">int</span> kill = <span class="number">8</span>;</span><br><span class="line">        <span class="type">String</span> title=<span class="string">&quot;超神&quot;</span>;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//直接使用+进行字符串连接，编码感觉会比较繁琐，并且维护性差,易读性差</span></span><br><span class="line">        <span class="type">String</span> sentence = name+ <span class="string">&quot; 在进行了连续 &quot;</span> + kill + <span class="string">&quot; 次击杀后，获得了 &quot;</span> + title +<span class="string">&quot; 的称号&quot;</span>;</span><br><span class="line">          </span><br><span class="line">        System.out.<span class="built_in">println</span>(sentence);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//格式化字符串</span></span><br><span class="line">        <span class="comment">//%s表示字符串，%d表示数字,%n表示换行</span></span><br><span class="line">        <span class="type">String</span> sentenceFormat =<span class="string">&quot;%s 在进行了连续 %d 次击杀后，获得了 %s 的称号%n&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="type">String</span> sentence2 = <span class="type">String</span>.format(sentenceFormat, name,kill,title);</span><br><span class="line">         </span><br><span class="line">        System.out.<span class="built_in">println</span>(sentence2);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><p>length方法返回当前字符串的长度 可以有长度为0的字符串,即空字符串</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestString &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">  </span><br><span class="line">        String <span class="type">name</span> =&quot;盖伦&quot;;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="type">name</span>.length());</span><br><span class="line">         </span><br><span class="line">        String unknowHero = &quot;&quot;;</span><br><span class="line">         </span><br><span class="line">        //可以有长度为<span class="number">0</span>的字符串,即空字符串</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(unknowHero.length());</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="操纵字符串"><a href="#操纵字符串" class="headerlink" title="操纵字符串"></a>操纵字符串</h2><h3 id="获取字符"><a href="#获取字符" class="headerlink" title="获取字符"></a>获取字符</h3><p>charAt(int index)获取指定位置的字符</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestString</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">        <span class="type">String</span> sentence = <span class="string">&quot;盖伦,在进行了连续8次击杀后,获得了 超神 的称号&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="type">char</span> c = sentence.<span class="built_in">charAt</span>(<span class="number">0</span>);</span><br><span class="line">         </span><br><span class="line">        System.out.<span class="built_in">println</span>(c);</span><br><span class="line">           </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取对应的字符数组"><a href="#获取对应的字符数组" class="headerlink" title="获取对应的字符数组"></a>获取对应的字符数组</h3><p>toCharArray() 获取对应的字符数组</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestString</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">        <span class="type">String</span> sentence = <span class="string">&quot;盖伦,在进行了连续8次击杀后,获得了超神 的称号&quot;</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="type">char</span>[] cs = sentence.<span class="built_in">toCharArray</span>(); <span class="comment">//获取对应的字符数组</span></span><br><span class="line">         </span><br><span class="line">        System.out.<span class="built_in">println</span>(sentence.<span class="built_in">length</span>() == cs.length);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="截取子字符串"><a href="#截取子字符串" class="headerlink" title="截取子字符串"></a>截取子字符串</h3><p>subString 截取子字符串</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestString</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="title class_">String</span> sentence = <span class="string">&quot;盖伦,在进行了连续8次击杀后,获得了 超神 的称号&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//截取从第3个开始的字符串 （基0）</span></span><br><span class="line">        <span class="title class_">String</span> subString1 = sentence.<span class="title function_">substring</span>(<span class="number">3</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(subString1);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//截取从第3个开始的字符串 （基0）</span></span><br><span class="line">        <span class="comment">//到5-1的位置的字符串</span></span><br><span class="line">        <span class="comment">//左闭右开</span></span><br><span class="line">        <span class="title class_">String</span> subString2 = sentence.<span class="title function_">substring</span>(<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(subString2);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分隔"><a href="#分隔" class="headerlink" title="分隔"></a>分隔</h3><p>split 根据分隔符进行分隔</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">public class TestString &#123;</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">   </span><br><span class="line">        String sentence = <span class="string">&quot;盖伦,在进行了连续8次击杀后,获得了 超神 的称号&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="regexp">//</span>根据,进行分割，得到<span class="number">3</span>个子字符串</span><br><span class="line">        String subSentences[] = sentence.<span class="keyword">split</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String <span class="function"><span class="keyword">sub</span> : <span class="title">subSentences</span>) </span>&#123;</span><br><span class="line">            System.out.println(<span class="function"><span class="keyword">sub</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">           </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="去掉首尾空格"><a href="#去掉首尾空格" class="headerlink" title="去掉首尾空格"></a>去掉首尾空格</h3><p>trim 去掉首尾空格</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestString</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="title class_">String</span> sentence = <span class="string">&quot;        盖伦,在进行了连续8次击杀后,获得了 超神 的称号      &quot;</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(sentence);</span><br><span class="line">        <span class="comment">//去掉首尾空格</span></span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(sentence.<span class="title function_">trim</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="大小写"><a href="#大小写" class="headerlink" title="大小写"></a>大小写</h3><p>toLowerCase 全部变成小写 toUpperCase 全部变成大写</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestString</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="title class_">String</span> sentence = <span class="string">&quot;Garen&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//全部变成小写</span></span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(sentence.<span class="title function_">toLowerCase</span>());</span><br><span class="line">        <span class="comment">//全部变成大写</span></span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(sentence.<span class="title function_">toUpperCase</span>());</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><p>indexOf 判断字符或者子字符串出现的位置 contains 是否包含子字符串</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestString</span> &#123;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        String sentence = <span class="string">&quot;盖伦,在进行了连续8次击杀后,获得了超神 的称号&quot;</span>;</span><br><span class="line">  </span><br><span class="line">        System.<span class="keyword">out</span>.println(sentence.indexOf(<span class="string">&#x27;8&#x27;</span>)); <span class="comment">//字符第一次出现的位置</span></span><br><span class="line">          </span><br><span class="line">        System.<span class="keyword">out</span>.println(sentence.indexOf(<span class="string">&quot;超神&quot;</span>)); <span class="comment">//字符串第一次出现的位置</span></span><br><span class="line">          </span><br><span class="line">        System.<span class="keyword">out</span>.println(sentence.lastIndexOf(<span class="string">&quot;了&quot;</span>)); <span class="comment">//字符串最后出现的位置</span></span><br><span class="line">          </span><br><span class="line">        System.<span class="keyword">out</span>.println(sentence.indexOf(<span class="string">&#x27;,&#x27;</span>,<span class="number">5</span>)); <span class="comment">//从位置5开始，出现的第一次,的位置</span></span><br><span class="line">          </span><br><span class="line">        System.<span class="keyword">out</span>.println(sentence.contains(<span class="string">&quot;击杀&quot;</span>)); <span class="comment">//是否包含字符串&quot;击杀&quot;</span></span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><p>replaceAll 替换所有的 replaceFirst 只替换第一个</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestString &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">   </span><br><span class="line">        String sentence = &quot;盖伦,在进行了连续8次击杀后,获得了超神 的称号&quot;;</span><br><span class="line"> </span><br><span class="line">        String <span class="keyword">temp</span> = sentence.replaceAll(&quot;击杀&quot;, &quot;被击杀&quot;); //替换所有的</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">temp</span> = <span class="keyword">temp</span>.replaceAll(&quot;超神&quot;, &quot;超鬼&quot;);</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">temp</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">temp</span> = sentence.replaceFirst(&quot;,&quot;,&quot;&quot;);//只替换第一个</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">temp</span>);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h2><h3 id="是否是同一个对象"><a href="#是否是同一个对象" class="headerlink" title="是否是同一个对象"></a>是否是同一个对象</h3><p>str1和str2的内容一定是一样的！ 但是，并不是同一个字符串对象</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestString</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="title class_">String</span> str1 = <span class="string">&quot;the light&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="title class_">String</span> str2 = <span class="keyword">new</span> <span class="title class_">String</span>(str1);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//==用于判断是否是同一个字符串对象</span></span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>( str1  ==  str2);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="是否是同一个对象-特例"><a href="#是否是同一个对象-特例" class="headerlink" title="是否是同一个对象-特例"></a>是否是同一个对象-特例</h3><p><strong>字符串常量池的存在</strong></p>
<p>一般说来，编译器每碰到一个字符串的字面值，就会创建一个新的对象 所以在第6行会创建了一个新的字符串”the light” 但是在第7行，编译器发现已经存在现成的”the light”，那么就直接拿来使用，而没有进行重复创建</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestString</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        <span class="title class_">String</span> str1 = <span class="string">&quot;the light&quot;</span>;</span><br><span class="line">        <span class="title class_">String</span> str3 = <span class="string">&quot;the light&quot;</span>;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>( str1  ==  str3);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="内容是否相同"><a href="#内容是否相同" class="headerlink" title="内容是否相同"></a>内容是否相同</h3><p>使用equals进行字符串内容的比较，必须大小写一致 equalsIgnoreCase，忽略大小写判断内容是否一致</p>
<figure class="highlight wren"><table><tr><td class="code"><pre><span class="line"><span class="variable">public</span> <span class="keyword">class</span> <span class="title class_">TestString</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="variable">public</span> <span class="keyword">static</span> <span class="variable">void</span> <span class="title function_">main</span>(<span class="params">String</span>[] <span class="params">args</span>) &#123;</span><br><span class="line">  </span><br><span class="line">        <span class="title class_">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;the light&quot;</span>;</span><br><span class="line">          </span><br><span class="line">        <span class="title class_">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="variable">new</span> <span class="title class_">String</span>(<span class="variable">str1</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="title class_">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="variable">str1</span>.<span class="property">toUpperCase</span>();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//==用于判断是否是同一个字符串对象</span></span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="property">println</span>( <span class="variable">str1</span>  <span class="operator">==</span>  <span class="variable">str2</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="property">println</span>(<span class="variable">str1</span>.<span class="property">equals</span>(<span class="variable">str2</span>));<span class="comment">//完全一样返回true</span></span><br><span class="line">         </span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="property">println</span>(<span class="variable">str1</span>.<span class="property">equals</span>(<span class="variable">str3</span>));<span class="comment">//大小写不一样，返回false</span></span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="property">println</span>(<span class="variable">str1</span>.<span class="property">equalsIgnoreCase</span>(<span class="variable">str3</span>));<span class="comment">//忽略大小写的比较，返回true</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="是否以子字符串开始或者结束"><a href="#是否以子字符串开始或者结束" class="headerlink" title="是否以子字符串开始或者结束"></a>是否以子字符串开始或者结束</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestString</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="type">String</span> str1 = <span class="string">&quot;the light&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="type">String</span> start = <span class="string">&quot;the&quot;</span>;</span><br><span class="line">        <span class="type">String</span> end = <span class="string">&quot;Ight&quot;</span>;</span><br><span class="line">         </span><br><span class="line">        System.out.<span class="built_in">println</span>(str1.<span class="built_in">startsWith</span>(start));<span class="comment">//以...开始</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(str1.<span class="built_in">endsWith</span>(end));<span class="comment">//以...结束</span></span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><p>StringBuffer是可变长的字符串</p>
<h3 id="追加-删除-插入-反转"><a href="#追加-删除-插入-反转" class="headerlink" title="追加 删除 插入 反转"></a>追加 删除 插入 反转</h3><p>append追加 delete 删除 insert 插入 reverse 反转</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> TestString &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        String str1 = <span class="string">&quot;let there &quot;</span>;</span><br><span class="line"> </span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer(str1); <span class="comment">//根据str1创建一个StringBuffer对象</span></span><br><span class="line">        sb.<span class="keyword">append</span>(<span class="string">&quot;be light&quot;</span>); <span class="comment">//在最后追加</span></span><br><span class="line">         </span><br><span class="line">        System.out.<span class="keyword">println</span>(sb);</span><br><span class="line">         </span><br><span class="line">        sb.<span class="keyword">delete</span>(<span class="number">4</span>, <span class="number">10</span>);<span class="comment">//删除4-10之间的字符</span></span><br><span class="line">         </span><br><span class="line">        System.out.<span class="keyword">println</span>(sb);</span><br><span class="line">         </span><br><span class="line">        sb.insert(<span class="number">4</span>, <span class="string">&quot;there &quot;</span>);<span class="comment">//在4这个位置插入 there</span></span><br><span class="line">         </span><br><span class="line">        System.out.<span class="keyword">println</span>(sb);</span><br><span class="line">         </span><br><span class="line">        sb.<span class="keyword">reverse</span>(); <span class="comment">//反转</span></span><br><span class="line">         </span><br><span class="line">        System.out.<span class="keyword">println</span>(sb);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="长度-容量"><a href="#长度-容量" class="headerlink" title="长度 容量"></a>长度 容量</h3><p>为什么StringBuffer可以变长？ 和String<strong>内部是一个字符数组</strong>一样，StringBuffer也维护了一个字符数组。 但是，这个字符数组，<strong>留有冗余长度</strong> 比如说new StringBuffer(“the”)，其内部的字符数组的长度，是19，而不是3，这样调用插入和追加，在现成的数组的基础上就可以完成了。 如果追加的长度超过了19，就会分配一个新的数组，长度比原来多一些，把原来的数据复制到新的数组中，<strong>看上去</strong> 数组长度就变长了 参考<a href="https://how2j.cn/k/number-string/number-string-mystringbuilder/331.html">MyStringBuffer</a> length: “the”的长度 3 capacity: 分配的总空间 19</p>
<p><strong>注：</strong> 19这个数量，不同的JDK数量是不一样的</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestString</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        <span class="title class_">String</span> str1 = <span class="string">&quot;the&quot;</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="title class_">StringBuffer</span> sb = <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(str1);</span><br><span class="line">         </span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(sb.<span class="title function_">length</span>()); <span class="comment">//内容长度</span></span><br><span class="line">         </span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(sb.<span class="title function_">capacity</span>());<span class="comment">//总空间</span></span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MyStringBuffer"><a href="#MyStringBuffer" class="headerlink" title="MyStringBuffer"></a>MyStringBuffer</h2><h3 id="IStringBuffer接口"><a href="#IStringBuffer接口" class="headerlink" title="IStringBuffer接口"></a>IStringBuffer接口</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> interface IStringBuffer &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">append</span><span class="params">(<span class="type">String</span> str)</span></span>; <span class="comment">//追加字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">append</span><span class="params">(<span class="type">char</span> c)</span></span>;  <span class="comment">//追加字符</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> pos,<span class="type">char</span> b)</span></span>; <span class="comment">//指定位置插入字符</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> pos,<span class="type">String</span> b)</span></span>; <span class="comment">//指定位置插入字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">delete</span><span class="params">(<span class="type">int</span> start)</span></span>; <span class="comment">//从开始位置删除剩下的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">delete</span><span class="params">(<span class="type">int</span> start,<span class="type">int</span> end)</span></span>; <span class="comment">//从开始位置删除结束位置-1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">reverse</span><span class="params">()</span></span>; <span class="comment">//反转</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">int</span> <span class="title">length</span><span class="params">()</span></span>; <span class="comment">//返回长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="value和capacity"><a href="#value和capacity" class="headerlink" title="value和capacity"></a>value和capacity</h3><p>value：用于存放字符数组 capacity： 容量 无参构造方法： 根据容量初始化value</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStringBuffer</span> <span class="keyword">implements</span> <span class="title">IStringBuffer</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> capacity = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>[] value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStringBuffer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        value = <span class="keyword">new</span> <span class="keyword">char</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">append</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">char</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="带参构造方法"><a href="#带参构造方法" class="headerlink" title="带参构造方法"></a>带参构造方法</h3><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStringBuffer</span> <span class="keyword">implements</span> <span class="title">IStringBuffer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> capacity = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>[] value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStringBuffer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        value = <span class="keyword">new</span> <span class="keyword">char</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStringBuffer</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != str) &#123;</span><br><span class="line">            value = str.toCharArray();</span><br><span class="line">        &#125;</span><br><span class="line">        length = value.length;</span><br><span class="line">        <span class="keyword">if</span>(capacity &lt; value.length) &#123;</span><br><span class="line">            capacity = value.length * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">append</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">append</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> pos, String b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="反转-reverse"><a href="#反转-reverse" class="headerlink" title="反转 reverse"></a>反转 reverse</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStringBuffer</span> <span class="keyword">implements</span> <span class="title class_">IStringBuffer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>[] value;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStringBuffer</span><span class="params">()</span> &#123;</span><br><span class="line">        value = <span class="keyword">new</span> <span class="title class_">char</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStringBuffer</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> != str) &#123;</span><br><span class="line">            value = str.toCharArray();</span><br><span class="line">        &#125;</span><br><span class="line">        length = value.length;</span><br><span class="line">        <span class="keyword">if</span>(capacity &lt; value.length) &#123;</span><br><span class="line">            capacity = value.length * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">append</span><span class="params">(String str)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">append</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> pos, <span class="type">char</span> c)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> pos, String b)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> start)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> value[i];</span><br><span class="line">            value[i] = value[length - i - <span class="number">1</span>];</span><br><span class="line">            value[length - i - <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] realValue = <span class="keyword">new</span> <span class="title class_">char</span>[length];</span><br><span class="line">        System.arraycopy(value, <span class="number">0</span>, realValue, <span class="number">0</span>, length);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(realValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyStringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyStringBuffer</span>(<span class="string">&quot;the light&quot;</span>);</span><br><span class="line">        sb.reverse();</span><br><span class="line">        System.out.println(sb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插入insert-和-append"><a href="#插入insert-和-append" class="headerlink" title="插入insert 和 append"></a>插入insert 和 append</h3><p><strong>边界条件判断</strong> 插入之前，首先要判断的是一些边界条件。 比如插入位置是否合法，插入的字符串是否为空</p>
<p><strong>扩容</strong> \1. 要判断是否需要<strong>扩容</strong>。 如果插入的字符串加上已经存在的内容的总长度超过了容量，那么就需要扩容。 \2. 数组的长度是固定的，不能改变的，数组本身不支持<strong>扩容</strong>。 我们使用变通的方式来解决这个问题。 \3. 根据需要插入的字符串的长度和已经存在的内容的长度，计算出一个新的容量。 然后根据这个容量，创建一个新的数组，接着把原来的数组的内容，复制到这个新的数组中来。并且让value这个引用，指向新的数组，从而达到<strong>扩容</strong>的效果。</p>
<p><strong>插入字符串</strong> \1. 找到要插入字符串的位置，从这个位置开始，把原数据<strong>看成两段</strong>，把后半段向后挪动一个距离，这个距离刚好是插入字符串的长度 \2. 然后把要插入的数据，插入这个挪出来的，刚刚好的位置里。</p>
<p><strong>修改length的值</strong> 最后修改length的值，是原来的值加上插入字符串的长度</p>
<p><strong>insert(int, char)</strong> 参数是字符的insert方法，通过调用insert(int, String) 也就实现了。</p>
<p><strong>append</strong> 追加，就是在最后位置插入。 所以不需要单独开发方法，直接调用insert方法，就能达到最后位置插入的效果</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> MyStringBuffer implements IStringBuffer &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> capacity = <span class="number">16</span>;</span><br><span class="line">    <span class="type">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>[] <span class="keyword">value</span>;</span><br><span class="line">    <span class="built_in">public</span> MyStringBuffer() &#123;</span><br><span class="line">        <span class="keyword">value</span> = <span class="built_in">new</span> <span class="type">char</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> MyStringBuffer(String str) &#123;</span><br><span class="line">        this();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == str) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (capacity &lt; str.length()) &#123;</span><br><span class="line">            capacity = <span class="keyword">value</span>.length * <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">value</span> = <span class="built_in">new</span> <span class="type">char</span>[capacity];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (capacity &gt;= str.length()) &#123;</span><br><span class="line">            <span class="keyword">System</span>.arraycopy(str.toCharArray(), <span class="number">0</span>, <span class="keyword">value</span>, <span class="number">0</span>, str.length());</span><br><span class="line">        &#125;</span><br><span class="line">        length = str.length();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> append(String str) &#123;</span><br><span class="line">        <span class="keyword">insert</span>(length, str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> append(<span class="type">char</span> c) &#123;</span><br><span class="line">        append(String.valueOf(c));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">insert</span>(<span class="type">int</span> pos, <span class="type">char</span> c) &#123;</span><br><span class="line">        //String.valueOf(c)将c转换为字符串</span><br><span class="line">        <span class="keyword">insert</span>(pos, String.valueOf(c));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">insert</span>(<span class="type">int</span> pos, String b) &#123;</span><br><span class="line">        //边界条件判断</span><br><span class="line">        <span class="keyword">if</span> (pos &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pos &gt; length) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == b) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //扩容</span><br><span class="line">        <span class="keyword">while</span> (length + b.length() &gt; capacity) &#123;</span><br><span class="line">            capacity = (<span class="type">int</span>)((length + b.length()) * <span class="number">1.5</span>f);</span><br><span class="line">            <span class="type">char</span>[] newValue = <span class="built_in">new</span> <span class="type">char</span>[capacity];</span><br><span class="line">            <span class="keyword">System</span>.arraycopy(<span class="keyword">value</span>, <span class="number">0</span>, newValue, <span class="number">0</span>, length);</span><br><span class="line">            <span class="keyword">value</span> = newValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] cs = b.toCharArray();</span><br><span class="line"></span><br><span class="line">        //先把已经存在的数据往后移</span><br><span class="line">        <span class="keyword">System</span>.arraycopy(<span class="keyword">value</span>, pos, <span class="keyword">value</span>, pos + cs.length, length - pos);</span><br><span class="line">        //把要插入的数据插入到指定位置</span><br><span class="line">        <span class="keyword">System</span>.arraycopy(cs, <span class="number">0</span>, <span class="keyword">value</span>, pos, cs.length);</span><br><span class="line"></span><br><span class="line">        length = length + cs.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">delete</span>(<span class="type">int</span> <span class="keyword">start</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">delete</span>(<span class="type">int</span> <span class="keyword">start</span>, <span class="type">int</span> <span class="keyword">end</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> reverse() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="keyword">temp</span> = <span class="keyword">value</span>[i];</span><br><span class="line">            <span class="keyword">value</span>[i] = <span class="keyword">value</span>[length - i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">value</span>[length - i - <span class="number">1</span>] = <span class="keyword">temp</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">int</span> length() &#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> String toString() &#123;</span><br><span class="line">        <span class="type">char</span>[] realValue = <span class="built_in">new</span> <span class="type">char</span>[length];</span><br><span class="line">        <span class="keyword">System</span>.arraycopy(<span class="keyword">value</span>, <span class="number">0</span>, realValue, <span class="number">0</span>, length);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span> String(realValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        MyStringBuffer sb = <span class="built_in">new</span> MyStringBuffer(&quot;there light&quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(sb);</span><br><span class="line">        sb.<span class="keyword">insert</span>(<span class="number">0</span>, &quot;let &quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(sb);</span><br><span class="line"></span><br><span class="line">        sb.<span class="keyword">insert</span>(<span class="number">10</span>, &quot;be &quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(sb);</span><br><span class="line">        sb.<span class="keyword">insert</span>(<span class="number">0</span>, &quot;God Say:&quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(sb);</span><br><span class="line">        sb.append(&quot;!&quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(sb);</span><br><span class="line">        sb.append(<span class="string">&#x27;?&#x27;</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(sb);</span><br><span class="line">        sb.reverse();</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(sb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除-delete"><a href="#删除-delete" class="headerlink" title="删除 delete"></a>删除 delete</h3><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220110100035409.png" alt="image-20220110100035409"></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> MyStringBuffer implements IStringBuffer &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> capacity = <span class="number">16</span>;</span><br><span class="line">    <span class="type">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>[] <span class="keyword">value</span>;</span><br><span class="line">    <span class="built_in">public</span> MyStringBuffer() &#123;</span><br><span class="line">        <span class="keyword">value</span> = <span class="built_in">new</span> <span class="type">char</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> MyStringBuffer(String str) &#123;</span><br><span class="line">        this();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == str) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (capacity &lt; str.length()) &#123;</span><br><span class="line">            capacity = <span class="keyword">value</span>.length * <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">value</span> = <span class="built_in">new</span> <span class="type">char</span>[capacity];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (capacity &gt;= str.length()) &#123;</span><br><span class="line">            <span class="keyword">System</span>.arraycopy(str.toCharArray(), <span class="number">0</span>, <span class="keyword">value</span>, <span class="number">0</span>, str.length());</span><br><span class="line">        &#125;</span><br><span class="line">        length = str.length();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> append(String str) &#123;</span><br><span class="line">        <span class="keyword">insert</span>(length, str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> append(<span class="type">char</span> c) &#123;</span><br><span class="line">        append(String.valueOf(c));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">insert</span>(<span class="type">int</span> pos, <span class="type">char</span> c) &#123;</span><br><span class="line">        //String.valueOf(c)将c转换为字符串</span><br><span class="line">        <span class="keyword">insert</span>(pos, String.valueOf(c));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">insert</span>(<span class="type">int</span> pos, String b) &#123;</span><br><span class="line">        //边界条件判断</span><br><span class="line">        <span class="keyword">if</span> (pos &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pos &gt; length) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == b) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //扩容</span><br><span class="line">        <span class="keyword">while</span> (length + b.length() &gt; capacity) &#123;</span><br><span class="line">            capacity = (<span class="type">int</span>)((length + b.length()) * <span class="number">1.5</span>f);</span><br><span class="line">            <span class="type">char</span>[] newValue = <span class="built_in">new</span> <span class="type">char</span>[capacity];</span><br><span class="line">            <span class="keyword">System</span>.arraycopy(<span class="keyword">value</span>, <span class="number">0</span>, newValue, <span class="number">0</span>, length);</span><br><span class="line">            <span class="keyword">value</span> = newValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] cs = b.toCharArray();</span><br><span class="line"></span><br><span class="line">        //先把已经存在的数据往后移</span><br><span class="line">        <span class="keyword">System</span>.arraycopy(<span class="keyword">value</span>, pos, <span class="keyword">value</span>, pos + cs.length, length - pos);</span><br><span class="line">        //把要插入的数据插入到指定位置</span><br><span class="line">        <span class="keyword">System</span>.arraycopy(cs, <span class="number">0</span>, <span class="keyword">value</span>, pos, cs.length);</span><br><span class="line"></span><br><span class="line">        length = length + cs.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">delete</span>(<span class="type">int</span> <span class="keyword">start</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span>(<span class="keyword">start</span>, length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">delete</span>(<span class="type">int</span> <span class="keyword">start</span>, <span class="type">int</span> <span class="keyword">end</span>) &#123;</span><br><span class="line">        //边界条件判断</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">start</span> &lt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">start</span> &gt; length) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">end</span> &lt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">end</span> &gt; length) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">start</span> &gt;= <span class="keyword">end</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.arraycopy(<span class="keyword">value</span>, <span class="keyword">end</span>, <span class="keyword">value</span>, <span class="keyword">start</span>, length - <span class="keyword">end</span>);</span><br><span class="line">        length -= <span class="keyword">end</span> - <span class="keyword">start</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> reverse() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="keyword">temp</span> = <span class="keyword">value</span>[i];</span><br><span class="line">            <span class="keyword">value</span>[i] = <span class="keyword">value</span>[length - i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">value</span>[length - i - <span class="number">1</span>] = <span class="keyword">temp</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">int</span> length() &#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> String toString() &#123;</span><br><span class="line">        <span class="type">char</span>[] realValue = <span class="built_in">new</span> <span class="type">char</span>[length];</span><br><span class="line">        <span class="keyword">System</span>.arraycopy(<span class="keyword">value</span>, <span class="number">0</span>, realValue, <span class="number">0</span>, length);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span> String(realValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        MyStringBuffer sb = <span class="built_in">new</span> MyStringBuffer(&quot;there light&quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(sb);</span><br><span class="line">        sb.<span class="keyword">insert</span>(<span class="number">0</span>, &quot;let &quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(sb);</span><br><span class="line"></span><br><span class="line">        sb.<span class="keyword">insert</span>(<span class="number">10</span>, &quot;be &quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(sb);</span><br><span class="line">        sb.<span class="keyword">insert</span>(<span class="number">0</span>, &quot;God Say:&quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(sb);</span><br><span class="line">        sb.append(&quot;!&quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(sb);</span><br><span class="line">        sb.append(<span class="string">&#x27;?&#x27;</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(sb);</span><br><span class="line">        sb.reverse();</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(sb);</span><br><span class="line"></span><br><span class="line">        sb.reverse();</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(sb);</span><br><span class="line"></span><br><span class="line">        sb.<span class="keyword">delete</span>(<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(sb);</span><br><span class="line">        sb.<span class="keyword">delete</span>(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(sb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h1><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>Date类 注意：是<strong>java.util.Date;</strong> 而非 java.sql.Date，此类是给数据库访问的时候使用的</p>
<h3 id="时间原点概念"><a href="#时间原点概念" class="headerlink" title="时间原点概念"></a>时间原点概念</h3><p>所有的数据类型，无论是整数，布尔，浮点数还是字符串，最后都需要以数字的形式表现出来。</p>
<p>日期类型也不例外，换句话说，一个日期，比如2020年10月1日，在计算机里，会用一个数字来代替。</p>
<p>那么最特殊的一个数字，就是零. 零这个数字，就代表Java中的时间原点，其对应的日期是1970年1月1日 8点0分0秒 。 (为什么是8点，因为中国的太平洋时区是UTC-8，刚好和格林威治时间差8个小时)</p>
<p>为什么对应1970年呢？ 因为1969年发布了第一个 UNIX 版本：AT&amp;T，综合考虑，当时就把1970年当做了时间原点。</p>
<p>所有的日期，都是以为这个0点为基准，每过一毫秒，就+1。</p>
<h3 id="创建日期对象"><a href="#创建日期对象" class="headerlink" title="创建日期对象"></a>创建日期对象</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package <span class="type">date</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestDate &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        // 当前时间</span><br><span class="line">        <span class="type">Date</span> d1 = <span class="built_in">new</span> <span class="type">Date</span>();</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;当前时间:&quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(d1);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line"></span><br><span class="line">        // 从<span class="number">1970</span>年<span class="number">1</span>月<span class="number">1</span>日 早上<span class="number">8</span>点<span class="number">0</span>分<span class="number">0</span>秒 开始经历的毫秒数</span><br><span class="line">        <span class="type">Date</span> d2 = <span class="built_in">new</span> <span class="type">Date</span>(<span class="number">5000</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;从1970年1月1日 早上8点0分0秒 开始经历了5秒的时间&quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(d2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="getTime"><a href="#getTime" class="headerlink" title="getTime"></a>getTime</h3><p>getTime() 得到一个long型的整数 这个整数代表 从<strong>1970.1.1 08:00:00:000</strong> 开始 每经历一毫秒，增加1 直接打印对象，会看到 “Tue Jan 05 09:51:48 CST 2016” 这样的格式，可读性比较差，为了获得“2016&#x2F;1&#x2F;5 09:51:48”这样的格式 请参考<a href="https://how2j.cn/k/date/date-format/348.html">日期格式化</a></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package <span class="type">date</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestDate &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="type">Date</span> now= <span class="built_in">new</span> <span class="type">Date</span>();</span><br><span class="line">        //打印当前时间</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;当前时间:&quot;+now.toString());</span><br><span class="line">        //getTime() 得到一个long型的整数</span><br><span class="line">        //这个整数代表 <span class="number">1970.1</span><span class="number">.1</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">000</span>，每经历一毫秒，增加<span class="number">1</span></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;当前时间getTime()返回的值是：&quot;+now.getTime());</span><br><span class="line"></span><br><span class="line">        <span class="type">Date</span> zero = <span class="built_in">new</span> <span class="type">Date</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;用0作为构造方法，得到的日期是:&quot;+zero);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="System-currentTimeMillis"><a href="#System-currentTimeMillis" class="headerlink" title="System.currentTimeMillis()"></a>System.currentTimeMillis()</h3><p>当前日期的毫秒数 new Date().getTime() 和 System.currentTimeMillis() 是一样的 不过由于机器性能的原因，可能会相差几十毫秒，毕竟每执行一行代码，都是需要时间的</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package <span class="type">date</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestDate &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="type">Date</span> now= <span class="built_in">new</span> <span class="type">Date</span>();</span><br><span class="line">        //当前日期的毫秒数</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;Date.getTime() \t\t\t返回值: &quot;+now.getTime());</span><br><span class="line">        //通过<span class="keyword">System</span>.currentTimeMillis()获取当前日期的毫秒数</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;System.currentTimeMillis() \t返回值: &quot;+<span class="keyword">System</span>.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h2><p>SimpleDateFormat 日期格式化类</p>
<h3 id="日期转字符串"><a href="#日期转字符串" class="headerlink" title="日期转字符串"></a>日期转字符串</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//y 代表年</span></span><br><span class="line">        <span class="comment">//M 代表月</span></span><br><span class="line">        <span class="comment">//d 代表日</span></span><br><span class="line">        <span class="comment">//H 代表24进制的小时</span></span><br><span class="line">        <span class="comment">//h 代表12进制的小时</span></span><br><span class="line">        <span class="comment">//m 代表分钟</span></span><br><span class="line">        <span class="comment">//s 代表秒</span></span><br><span class="line">        <span class="comment">//S 代表毫秒</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sdf.format(d);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间通过 yyyy-MM-dd HH:mm:ss SSS 格式化后的输出: &quot;</span>+str);</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf1</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span> );</span><br><span class="line">        Date d1= <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> sdf1.format(d1);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间通过 yyyy-MM-dd 格式化后的输出: &quot;</span>+str1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>模式（yyyy&#x2F;MM&#x2F;dd HH:mm:ss）需要和字符串格式保持一致，如果不一样就会抛出解析异常ParseException</p>
<p>关于异常的详细讲解在<a href="https://how2j.cn/k/exception/exception-tutorial/332.html">Java 异常 Exception</a> 章节展开</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>);</span><br><span class="line">         <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;2016/1/5 12:12:12&quot;</span>;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> sdf.parse(str);</span><br><span class="line">             System.out.printf(<span class="string">&quot;字符串 %s 通过格式  yyyy/MM/dd HH:mm:ss %n转换为日期对象: %s&quot;</span>,str,d.toString());</span><br><span class="line">         &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h2><p>Calendar类即日历类，常用于进行“翻日历”，比如<strong>下个月的今天是多久</strong></p>
<h3 id="Calendar与Date进行转换"><a href="#Calendar与Date进行转换" class="headerlink" title="Calendar与Date进行转换"></a>Calendar与Date进行转换</h3><p>采用<a href="https://how2j.cn/k/class-object/class-object-singleton/349.html">单例模式</a>获取日历对象Calendar.getInstance();</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//采用单例模式获取日历对象Calendar.getInstance();</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="comment">//通过日历对象得到日期对象</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> c.getTime();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">0</span>);</span><br><span class="line">        c.setTime(d2);<span class="comment">//把这个日历，调成日期 : 1970.1.1 08:00:00</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="翻日历"><a href="#翻日历" class="headerlink" title="翻日历"></a>翻日历</h3><p>add方法，在原日期上增加年&#x2F;月&#x2F;日 set方法，直接设置年&#x2F;月&#x2F;日</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package <span class="type">date</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestDate &#123;</span><br><span class="line">    private static SimpleDateFormat sdf = <span class="built_in">new</span> SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        //采用单例模式获取日历对象Calendar.getInstance();</span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        //通过日历对象得到日期对象</span><br><span class="line">        <span class="type">Date</span> now = c.getTime();</span><br><span class="line">        // 当前日期</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;当前日期：\t&quot; + format(c.getTime()));</span><br><span class="line"></span><br><span class="line">        // 下个月的今天</span><br><span class="line">        c.setTime(now);</span><br><span class="line">        c.<span class="keyword">add</span>(Calendar.MONTH, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;下个月的今天:\t&quot; +format(c.getTime()));</span><br><span class="line"></span><br><span class="line">        // 去年的今天</span><br><span class="line">        c.setTime(now);</span><br><span class="line">        c.<span class="keyword">add</span>(Calendar.YEAR, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;去年的今天:\t&quot; +format(c.getTime()));</span><br><span class="line"></span><br><span class="line">        // 上个月的第三天</span><br><span class="line">        c.setTime(now);</span><br><span class="line">        c.<span class="keyword">add</span>(Calendar.MONTH, <span class="number">-1</span>);</span><br><span class="line">        c.<span class="keyword">set</span>(Calendar.DATE, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;上个月的第三天:\t&quot; +format(c.getTime()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static String format(<span class="type">Date</span> <span class="type">time</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> sdf.format(<span class="type">time</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h2><p>异常定义： 导致程序的正常流程被中断的事件，叫做异常</p>
<h3 id="文件不存在异常"><a href="#文件不存在异常" class="headerlink" title="文件不存在异常"></a>文件不存在异常</h3><p>比如要打开d盘的LOL.exe文件，这个文件是有可能不存在的 Java中通过 new FileInputStream(f) 试图打开某文件，就有可能抛出<strong>文件不存在异常FileNotFoundException</strong> 如果不处理该异常，就会有编译错误 处理办法参见 <a href="https://how2j.cn/k/exception/exception-trycatch/336.html">异常处理</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line">        <span class="comment">//试图打开文件LOL.exe，会抛出FileNotFoundException，如果不处理该异常，就会有编译错误</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><p>异常处理常见手段： try catch finally throws</p>
<h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h3><p>3.如果文件不存在，try 里的代码会立即终止，程序流程会运行到对应的catch块中</p>
<p>4.e.printStackTrace(); 会打印出方法的调用痕迹，如此例，会打印出异常开始于TestException的第16行，这样就便于定位和分析到底哪里出了异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;试图打开 d:/LOL.exe&quot;</span>);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功打开&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;d:/LOL.exe不存在&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用异常的父类进行catch"><a href="#使用异常的父类进行catch" class="headerlink" title="使用异常的父类进行catch"></a>使用异常的父类进行catch</h3><p>FileNotFoundException是Exception的子类，使用Exception也可以catch住FileNotFoundException</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;试图打开 d:/LOL.exe&quot;</span>);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功打开&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;d:/LOL.exe不存在&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多异常捕捉办法1"><a href="#多异常捕捉办法1" class="headerlink" title="多异常捕捉办法1"></a>多异常捕捉办法1</h3><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">new FileInputStream(f)<span class="comment">;</span></span><br><span class="line">Date d <span class="operator">=</span> sdf.parse(<span class="string">&quot;2016-06-03&quot;</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>这段代码，会抛出 文件不存在异常 FileNotFoundException 和 解析异常ParseException 解决办法之一是分别进行catch</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;d:/LOL.exe不存在&quot;</span>);</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;日期格式解析错误&quot;</span>);</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;试图打开 d:/LOL.exe&quot;</span>);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功打开&quot;</span>);</span><br><span class="line">            <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">            <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> sdf.parse(<span class="string">&quot;2016-06-03&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;d:/LOL.exe不存在&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;日期格式解析错误&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多异常捕捉办法2"><a href="#多异常捕捉办法2" class="headerlink" title="多异常捕捉办法2"></a>多异常捕捉办法2</h3><p>另一个种办法是把多个异常，放在一个catch里统一捕捉</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;试图打开 d:/LOL.exe&quot;</span>);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功打开&quot;</span>);</span><br><span class="line">            <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">            <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> sdf.parse(<span class="string">&quot;2016-06-03&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException | ParseException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FileNotFoundException) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;d:/LOL.exe不存在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ParseException) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;日期格式解析错误&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><p>无论是否出现异常，finally中的代码都会被执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;试图打开 d:/LOL.exe&quot;</span>);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功打开&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;d:/LOL.exe不存在&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无论文件是否存在， 都会执行的代码&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h3><p>考虑如下情况： 主方法调用method1 method1调用method2 method2中打开文件</p>
<p>method2中需要进行异常处理 但是method2<strong>不打算处理</strong>，而是把这个异常通过<em>*throws*<em><strong>抛出去</strong> 那么method1就会</em>*接到该异常</em>*。 处理办法也是两种，要么是try catch处理掉，要么也是<strong>抛出去</strong>。 method1选择本地try catch住 一旦try catch住了，就相当于把这个异常消化掉了，主方法在调用method1的时候，就不需要进行异常处理了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        method1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method2();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;试图打开 d:/LOL.exe&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">        <span class="comment">//碰见异常方法就结束了，下面就不会执行了</span></span><br><span class="line">        System.out.println(<span class="string">&quot;成功打开&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="throw和throws的区别"><a href="#throw和throws的区别" class="headerlink" title="throw和throws的区别"></a>throw和throws的区别</h3><p>throws与throw这两个关键字接近，不过意义不一样，有如下区别： \1. throws 出现在方法声明上，而throw通常都出现在方法体内。 \2. throws 表示出现异常的一种可能性，并不一定会发生这些异常；throw则是抛出了异常，执行throw则一定抛出了某个异常对象。</p>
<h2 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h2><p>异常分类： 可查异常，运行时异常和错误3种 其中，运行时异常和错误又叫非可查异常</p>
<h3 id="可查异常"><a href="#可查异常" class="headerlink" title="可查异常"></a>可查异常</h3><p>可查异常： CheckedException 可查异常即<strong>必须进行处理的异常</strong>，要么try catch住,要么往外抛，谁调用，谁处理，比如 FileNotFoundException 如果不处理，编译器，就不让你通过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">          </span><br><span class="line">        File f= <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line">          </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;试图打开 d:/LOL.exe&quot;</span>);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">            System.out.println(<span class="string">&quot;成功打开&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(FileNotFoundException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;d:/LOL.exe不存在&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h3><p>运行时异常RuntimeException指： <strong>不是必须进行try catch的异常</strong> <strong>常见运行时异常:</strong> 除数不能为0异常:ArithmeticException 下标越界异常:ArrayIndexOutOfBoundsException 空指针异常:NullPointerException 在编写代码的时候，依然可以使用try catch throws进行处理，与可查异常不同之处在于，<strong>即便不进行try catch，也不会有编译错误</strong> Java之所以会设计运行时异常的原因之一，是因为下标越界，空指针这些运行时异常<strong>太过于普遍</strong>，如果都需要进行捕捉，代码的可读性就会变得很糟糕。</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span>(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//任何除数不能为0:ArithmeticException</span></span><br><span class="line">        <span class="type">int</span> k = <span class="number">5</span>/<span class="number">0</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//下标越界异常：ArrayIndexOutOfBoundsException</span></span><br><span class="line">        <span class="type">int</span> j[] = <span class="keyword">new </span><span class="class title_">int</span>[<span class="number">5</span>];</span><br><span class="line">        j[<span class="number">10</span>] = <span class="number">10</span>;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//空指针异常：NullPointerException</span></span><br><span class="line">        <span class="built_in">String</span> <span class="built_in">str</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">str</span>.<span class="property">length</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>错误Error，指的是<strong>系统级别的异常</strong>，通常是内存用光了 在<strong>默认设置下</strong>，一般java程序启动的时候，最大可以使用16m的内存 如例不停的给StringBuffer追加字符，很快就把内存使用光了。抛出<strong>OutOfMemoryError</strong> 与运行时异常一样，错误也是不要求强制捕捉的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     </span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="三种分类"><a href="#三种分类" class="headerlink" title="三种分类"></a>三种分类</h3><p>总体上异常分三类： \1. 错误 \2. 运行时异常 \3. 可查异常</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220110112546216.png" alt="image-20220110112546216"></p>
<p>1.CheckedException：FileNotFoundException ……，必须 throw 或者利用 try …… catch 进行捕获 </p>
<p>2.UnCheckedException（RuntimeException）：NullPointerException …… </p>
<p>3.Error</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">ArithmeticException——由于除数为<span class="number">0</span>引起的异常； </span><br><span class="line">ArrayStoreException——由于数组存储空间不够引起的异常； </span><br><span class="line">ClassCastException—一当把一个对象归为某个类，但实际上此对象并不是由这个类 创建的，也不是其子类创建的，则会引起异常； </span><br><span class="line">IllegalMonitorStateException——监控器状态出错引起的异常； </span><br><span class="line">NegativeArraySizeException—一数组长度是负数，则产生异常； </span><br><span class="line">NullPointerException—一程序试图访问一个空的数组中的元素或访问空的对象中的 方法或变量时产生异常； </span><br><span class="line">OutofMemoryException——用<span class="keyword">new</span><span class="type"></span>语句创建对象时，如系统无法为其分配内存空 间则产生异常； </span><br><span class="line">SecurityException——由于访问了不应访问的指针，使安全性出问题而引起异常； </span><br><span class="line">IndexOutOfBoundsExcention——由于数组下标越界或字符串访问越界引起异常； </span><br><span class="line">IOException——由于文件未找到、未打开或者I/O操作不能进行而引起异常； </span><br><span class="line">ClassNotFoundException——未找到指定名字的类或接口引起异常； </span><br><span class="line">CloneNotSupportedException——一程序中的一个对象引用Object类的clone方法，但 此对象并没有连接Cloneable接口，从而引起异常； </span><br><span class="line">InterruptedException—一当一个线程处于等待状态时，另一个线程中断此线程，从 而引起异常，有关线程的内容，将在下一章讲述； </span><br><span class="line">NoSuchMethodException一所调用的方法未找到，引起异常； </span><br><span class="line">Illega1AccessExcePtion—一试图访问一个非<span class="keyword">public</span>方法； </span><br><span class="line">StringIndexOutOfBoundsException——访问字符串序号越界，引起异常； </span><br><span class="line">ArrayIdexOutOfBoundsException—一访问数组元素下标越界，引起异常； </span><br><span class="line">NumberFormatException——字符的UTF代码数据格式有错引起异常； </span><br><span class="line">IllegalThreadException—一线程调用某个方法而所处状态不适当，引起异常； </span><br><span class="line">FileNotFoundException——未找到指定文件引起异常； </span><br><span class="line">EOFException——未完成输入操作即遇文件结束引起异常。</span><br></pre></td></tr></table></figure>

<h2 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h2><p>Throwable是类，Exception和Error都继承了该类 所以在捕捉的时候，也可以使用Throwable进行捕捉 如图： 异常分<strong>Error</strong>和<strong>Exception</strong> Exception里又分<strong>运行时异常</strong>和<strong>可查异常</strong>。</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220110140710465.png" alt="image-20220110140710465"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><h3 id="创建自定义异常"><a href="#创建自定义异常" class="headerlink" title="创建自定义异常"></a>创建自定义异常</h3><p>一个英雄攻击另一个英雄的时候，如果发现另一个英雄已经挂了，就会抛出EnemyHeroIsDeadException 创建一个类EnemyHeroIsDeadException，并继承Exception 提供两个构造方法 \1. 无参的构造方法 \2. 带参的构造方法，并调用父类的对应的构造方法</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">EnemyHeroIsDeadException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    public <span class="type">EnemyHeroIsDeadException</span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="type">EnemyHeroIsDeadException</span>(<span class="type">String</span> msg) &#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="抛出自定义异常"><a href="#抛出自定义异常" class="headerlink" title="抛出自定义异常"></a>抛出自定义异常</h3><p>在Hero的attack方法中，当发现敌方英雄的血量为0的时候，抛出该异常 \1. 创建一个EnemyHeroIsDeadException实例 \2. 通过<strong>throw</strong> 抛出该异常 \3. 当前方法通过 <strong>throws</strong> 抛出该异常</p>
<p>在外部调用attack方法的时候，就需要进行捕捉，并且捕捉的时候，可以通过e.getMessage() 获取当时出错的具体原因</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">float</span> hp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attackHero</span><span class="params">(Hero h)</span> <span class="keyword">throws</span> EnemyHeroIsDeadException &#123;</span><br><span class="line">        <span class="keyword">if</span> (h.hp == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EnemyHeroIsDeadException</span>(h.name + <span class="string">&quot; 已经挂了,不需要施放技能&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">EnemyHeroIsDeadException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">EnemyHeroIsDeadException</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">EnemyHeroIsDeadException</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Hero</span> <span class="variable">garen</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        garen.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        garen.hp = <span class="number">616</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Hero</span> <span class="variable">teemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        teemo.name = <span class="string">&quot;提莫&quot;</span>;</span><br><span class="line">        teemo.hp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            garen.attackHero(teemo);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (EnemyHeroIsDeadException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;异常的具体原因:&quot;</span>+e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="I-x2F-O"><a href="#I-x2F-O" class="headerlink" title="I&#x2F;O"></a>I&#x2F;O</h1><h2 id="文件对象"><a href="#文件对象" class="headerlink" title="文件对象"></a>文件对象</h2><h3 id="创建一个文件对象"><a href="#创建一个文件对象" class="headerlink" title="创建一个文件对象"></a>创建一个文件对象</h3><p>使用绝对路径或者相对路径创建File对象</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="keyword">file</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="keyword">File</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> TestFile &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="comment">// 绝对路径</span></span><br><span class="line">        <span class="keyword">File</span> f1 = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">&quot;f:/LOLFolder&quot;</span>);</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">&quot;f1的绝对路径：&quot;</span> + f1.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 相对路径,相对于工作目录，如果在idea中，就是项目目录</span></span><br><span class="line">        <span class="keyword">File</span> f2 = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">&quot;LOL.exe&quot;</span>);</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">&quot;f2的绝对路径：&quot;</span> + f2.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把f1作为父目录创建文件对象</span></span><br><span class="line">        <span class="keyword">File</span> f3 = <span class="keyword">new</span> <span class="keyword">File</span>(f1, <span class="string">&quot;LOL.exe&quot;</span>);</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">&quot;f3的绝对路径：&quot;</span> + f3.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    f1的绝对路径：f:\LOLFolder</span><br><span class="line">    f2的绝对路径：E:\Javahow2j\LOL.exe</span><br><span class="line">    f3的绝对路径：f:\LOLFolder\LOL.exe</span><br></pre></td></tr></table></figure>

<h3 id="文件常用方法1"><a href="#文件常用方法1" class="headerlink" title="文件常用方法1"></a>文件常用方法1</h3><p><strong>注意1：</strong> 需要在D:\LOLFolder确实存在一个LOL.exe,才可以看到对应的文件长度、修改时间等信息</p>
<p><strong>注意2： renameTo方法用于对物理文件名称进行修改，但是并不会修改File对象的name属性。</strong></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package file;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> TestFile2 &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        File f = <span class="keyword">new</span> <span class="constructor">File(<span class="string">&quot;f:/LOLFolder/LOL.exe&quot;</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;当前文件是：&quot;</span> +f);</span><br><span class="line">        <span class="comment">//文件是否存在</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;判断是否存在：&quot;</span>+f.exists<span class="literal">()</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//是否是文件夹</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;判断是否是文件夹：&quot;</span>+f.is<span class="constructor">Directory()</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//是否是文件（非文件夹）</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;判断是否是文件：&quot;</span>+f.is<span class="constructor">File()</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件长度</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;获取文件的长度：&quot;</span>+f.length<span class="literal">()</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件最后修改时间</span></span><br><span class="line">        long time = f.last<span class="constructor">Modified()</span>;</span><br><span class="line">        Date d = <span class="keyword">new</span> <span class="constructor">Date(<span class="params">time</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;获取文件的最后修改时间：&quot;</span>+d);</span><br><span class="line">        <span class="comment">//设置文件修改时间为1970.1.1 08:00:00</span></span><br><span class="line">        f.set<span class="constructor">LastModified(0)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件重命名</span></span><br><span class="line">        File f2 =<span class="keyword">new</span> <span class="constructor">File(<span class="string">&quot;f:/LOLFolder/DOTA.exe&quot;</span>)</span>;</span><br><span class="line">        f.rename<span class="constructor">To(<span class="params">f2</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;把LOL.exe改名成了DOTA.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;注意： 需要在D:\\LOLFolder确实存在一个LOL.exe,\r\n才可以看到对应的文件长度、修改时间等信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    当前文件是：f:\LOLFolder\<span class="module-access"><span class="module"><span class="identifier">LOL</span>.</span></span>exe</span><br><span class="line">    判断是否存在：<span class="literal">true</span></span><br><span class="line">    判断是否是文件夹：<span class="literal">false</span></span><br><span class="line">    判断是否是文件：<span class="literal">true</span></span><br><span class="line">    获取文件的长度：<span class="number">0</span></span><br><span class="line">    获取文件的最后修改时间：Mon Jan <span class="number">10</span> <span class="number">15</span>:<span class="number">49</span>:<span class="number">14</span> CST <span class="number">2022</span></span><br><span class="line">    把<span class="module-access"><span class="module"><span class="identifier">LOL</span>.</span></span>exe改名成了<span class="module-access"><span class="module"><span class="identifier">DOTA</span>.</span></span>exe</span><br><span class="line">    注意： 需要在D:\LOLFolder确实存在一个<span class="module-access"><span class="module"><span class="identifier">LOL</span>.</span></span>exe,</span><br><span class="line">    才可以看到对应的文件长度、修改时间等信息</span><br></pre></td></tr></table></figure>

<h3 id="文件常用方法2"><a href="#文件常用方法2" class="headerlink" title="文件常用方法2"></a>文件常用方法2</h3><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> <span class="keyword">file</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="keyword">File</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> TestFile2 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">File</span> f = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">&quot;f:/LOLFolder/skin/garen.ski&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以字符串数组的形式，返回当前文件夹下的所有文件（不包含子文件及子文件夹）</span></span><br><span class="line">        f.list();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以文件数组的形式，返回当前文件夹下的所有文件（不包含子文件及子文件夹）</span></span><br><span class="line">        <span class="keyword">File</span>[]fs= f.listFiles();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以字符串形式返回获取所在文件夹</span></span><br><span class="line">        f.getParent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以文件形式返回获取所在文件夹</span></span><br><span class="line">        f.getParentFile();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文件夹，如果父文件夹skin不存在，创建就无效</span></span><br><span class="line">        f.mkdir();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建文件夹，如果父文件夹skin不存在，就会创建父文件夹</span></span><br><span class="line">        f.mkdirs();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个空文件,如果父文件夹skin不存在，就会抛出异常</span></span><br><span class="line">        f.createNewFile();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 所以创建一个空文件之前，通常都会创建父目录</span></span><br><span class="line">        f.getParentFile().mkdirs();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 列出所有的盘符c: d: e: 等等</span></span><br><span class="line">        f.listRoots();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 刪除文件</span></span><br><span class="line">        f.<span class="keyword">delete</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// JVM结束的时候，刪除文件，常用于临时文件的删除</span></span><br><span class="line">        f.deleteOnExit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="什么是流"><a href="#什么是流" class="headerlink" title="什么是流"></a>什么是流</h2><h3 id="什么是流-1"><a href="#什么是流-1" class="headerlink" title="什么是流"></a>什么是流</h3><p>当不同的介质之间有数据交互的时候，JAVA就使用流来实现。 数据源可以是文件，还可以是数据库，网络甚至是其他的程序</p>
<p>比如读取文件的数据到程序中，站在程序的角度来看，就叫做输入流 输入流： InputStream 输出流：OutputStream</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220110155952110.png" alt="image-20220110155952110"></p>
<h3 id="文件输入流"><a href="#文件输入流" class="headerlink" title="文件输入流"></a>文件输入流</h3><p>如下代码，就建立了一个文件输入流，这个流可以用来把数据从硬盘的文件，读取到JVM(内存)。</p>
<p>目前代码只是建立了流，还没有开始读取，真正的读取在下个章节讲解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;f/lol.txt&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建基于文件的输入流</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">            <span class="comment">// 通过这个输入流，就可以把数据从硬盘，读取到Java的虚拟机中来，也就是读取到内存中</span></span><br><span class="line">        </span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><p>InputStream字节输入流 OutputStream字节输出流 用于以字节的形式读取和写入数据</p>
<h3 id="ASCII码-概念"><a href="#ASCII码-概念" class="headerlink" title="ASCII码 概念"></a>ASCII码 概念</h3><p>所有的数据存放在计算机中都是以数字的形式存放的。 所以<strong>字母就需要转换为数字才能够存放</strong>。 比如A就对应的数字65，a对应的数字97. 不同的字母和符号对应不同的数字，就是一张码表。 ASCII是这样的一种码表。 只<strong>包含简单的英文字母</strong>，符号，数字等等。 <strong>不包含中文，德文，俄语等复杂</strong>的。</p>
<p>示例中列出了可见的ASCII码以及对应的十进制和十六进制数字，不可见的暂未列出</p>
<h3 id="以字节流的形式读取文件内容"><a href="#以字节流的形式读取文件内容" class="headerlink" title="以字节流的形式读取文件内容"></a>以字节流的形式读取文件内容</h3><p>InputStream是字节输入流，同时也是抽象类，只提供方法声明，不提供方法的具体实现。 FileInputStream 是InputStream子类，以FileInputStream 为例进行文件读取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//准备文件lol.txt其中的内容是AB，对应的ASCII分别是65 66</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;f:/LOLFolder/lol.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建基于文件的输入流</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建字节数组，其长度就是文件的长度</span></span><br><span class="line">            <span class="type">byte</span>[] all = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>)f.length()];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//以字节流的形式读取文件所有内容</span></span><br><span class="line">            fis.read(all);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">byte</span> b : all) &#123;</span><br><span class="line">                <span class="comment">//打印出来是65 66</span></span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//每次使用完流，都应该进行关闭</span></span><br><span class="line">            fis.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    <span class="number">65</span></span><br><span class="line">    <span class="number">66</span></span><br></pre></td></tr></table></figure>

<h3 id="以字节流的形式向文件写入数据"><a href="#以字节流的形式向文件写入数据" class="headerlink" title="以字节流的形式向文件写入数据"></a>以字节流的形式向文件写入数据</h3><p>OutputStream是字节输出流，同时也是抽象类，只提供方法声明，不提供方法的具体实现。 FileOutputStream 是OutputStream子类，以FileOutputStream 为例向文件写出数据</p>
<p>注: 如果文件d:&#x2F;lol2.txt不存在，写出操作会自动创建该文件。 但是如果是文件 d:&#x2F;xyz&#x2F;lol2.txt，而目录xyz又不存在，会抛出异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStream2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 准备文件lol2.txt其中的内容是空的</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;f:/LOLFolder/lol2.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备长度是2的字节数组，用88,89初始化，其对应的字符分别是X,Y</span></span><br><span class="line">        <span class="type">byte</span>[] data = &#123;<span class="number">88</span>, <span class="number">89</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建基于文件的输出流</span></span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(f);</span><br><span class="line">            <span class="comment">// 把数据写入到输出流</span></span><br><span class="line">            fos.write(data);</span><br><span class="line">            <span class="comment">// 关闭输出流</span></span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="关闭流的方式"><a href="#关闭流的方式" class="headerlink" title="关闭流的方式"></a>关闭流的方式</h2><h3 id="在try中关闭"><a href="#在try中关闭" class="headerlink" title="在try中关闭"></a>在try中关闭</h3><p>在try的作用域里关闭文件输入流，在前面的示例中都是使用这种方式，这样做有一个弊端； 如果文件不存在，或者读取的时候出现问题而抛出异常，那么就不会执行这一行关闭流的代码，存在巨大的资源占用隐患。 <strong>不推荐</strong>使用</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> TestStream2 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="keyword">File</span> f = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">&quot;f:/LOLFolder/lol.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            <span class="keyword">byte</span>[] all = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>)f.length()];</span><br><span class="line">            fis.<span class="keyword">read</span>(all);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> b : all) &#123;</span><br><span class="line">                System.out.<span class="keyword">println</span>(b);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 在try 里关闭流</span></span><br><span class="line">            fis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在finally中关闭"><a href="#在finally中关闭" class="headerlink" title="在finally中关闭"></a>在finally中关闭</h3><p>这是标准的关闭流的方式 \1. 首先把流的引用声明在try的外面，如果声明在try里面，其作用域无法抵达finally. \2. 在finally关闭之前，要先判断该引用是否为空 \3. 关闭的时候，需要再一次进行try catch处理</p>
<p>这是标准的严谨的关闭流的方式，但是看上去很繁琐，所以写不重要的或者测试代码的时候，都会采用上面的<strong>有隐患</strong>try的方式，因为不麻烦~</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> TestStream2 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="keyword">File</span> f = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">&quot;f:/LOLFolder/lol.txt&quot;</span>);</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            <span class="keyword">byte</span>[] all = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>)f.length()];</span><br><span class="line">            fis.<span class="keyword">read</span>(all);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> b : all) &#123;</span><br><span class="line">                System.out.<span class="keyword">println</span>(b);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 在finally 里关闭流</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != fis) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用try-的方式"><a href="#使用try-的方式" class="headerlink" title="使用try()的方式"></a>使用try()的方式</h3><p>把流定义在try()里,try,catch或者finally结束的时候，会自动关闭 这种编写代码的方式叫做 <strong>try-with-resources</strong>， 这是从JDK7开始支持的技术</p>
<p>所有的流，都实现了一个接口叫做 <strong>AutoCloseable</strong>，任何类实现了这个接口，都可以在try()中进行实例化。 并且在try, catch, finally结束的时候自动关闭，回收相关资源。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> TestStream2 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="keyword">File</span> f = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">&quot;f:/LOLFolder/lol.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//把流定义在try()里,try,catch或者finally结束的时候，会自动关闭</span></span><br><span class="line">        <span class="keyword">try</span> (FileInputStream fis = <span class="keyword">new</span> FileInputStream(f)) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] all = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>)f.length()];</span><br><span class="line">            fis.<span class="keyword">read</span>(all);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> b : all) &#123;</span><br><span class="line">                System.out.<span class="keyword">println</span>(b);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>Reader字符输入流 Writer字符输出流 专门用于字符的形式读取和写入数据</p>
<h3 id="使用字符流读取文件"><a href="#使用字符流读取文件" class="headerlink" title="使用字符流读取文件"></a>使用字符流读取文件</h3><p>FileReader 是Reader子类，以FileReader 为例进行文件读取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStream3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 准备文件lol.txt其中的内容是AB</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;f:/LOLFolder/lol.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建基于文件的Reader</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(f)) &#123;</span><br><span class="line">            <span class="comment">// 创建字符数组，其长度就是文件的长度</span></span><br><span class="line">            <span class="type">char</span>[] all = <span class="keyword">new</span> <span class="title class_">char</span>[(<span class="type">int</span>)f.length()];</span><br><span class="line">            <span class="comment">// 以字符流的形式读取文件所有内容</span></span><br><span class="line">            fr.read(all);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> b : all) &#123;</span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    A</span><br><span class="line">    B</span><br></pre></td></tr></table></figure>

<h3 id="使用字符流把字符串写入到文件"><a href="#使用字符流把字符串写入到文件" class="headerlink" title="使用字符流把字符串写入到文件"></a>使用字符流把字符串写入到文件</h3><p>FileWriter 是Writer的子类，以FileWriter 为例把字符串写入到文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStream3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 准备文件lol2.txt</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;f:/LOLFolder/lol2.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建基于文件的Writer</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileWriter</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(f, <span class="literal">true</span>)) &#123;</span><br><span class="line">            <span class="comment">// 以字符流的形式把数据写入到文件中</span></span><br><span class="line">            String data=<span class="string">&quot;abcdefg1234567890&quot;</span>;</span><br><span class="line">            <span class="type">char</span>[] cs = data.toCharArray();</span><br><span class="line">            fr.write(cs);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="中文问题"><a href="#中文问题" class="headerlink" title="中文问题"></a>中文问题</h2><h3 id="编码概念"><a href="#编码概念" class="headerlink" title="编码概念"></a>编码概念</h3><p>计算机存放数据只能存放数字，所有的字符都会被转换为不同的数字。 就像一个棋盘一样，不同的字，处于不同的位置，而不同的位置，有不同的数字编号。 有的棋盘很小，只能放数字和英文 有的大一点，还能放中文 有的“足够”大，能够放下世界人民所使用的所有文字和符号</p>
<p>如图所示，英文字符 <strong>A</strong> 能够放在所有的棋盘里，而且位置都差不多 中文字符, 中文字符 <strong>中</strong> 能够放在后两种棋盘里，并且位置不一样，而且在小的那个棋盘里，就放不下中文</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220110165738376.png" alt="image-20220110165738376"></p>
<h3 id="常见编码"><a href="#常见编码" class="headerlink" title="常见编码"></a>常见编码</h3><p>工作后经常接触的编码方式有如下几种： <strong>ISO-8859-1 ASCII</strong> 数字和西欧字母 <strong>GBK GB2312 BIG5</strong> 中文 <strong>UNICODE</strong> (统一码，万国码)</p>
<p>其中 ISO-8859-1 包含 ASCII GB2312 是简体中文，BIG5是繁体中文，GBK同时包含简体和繁体以及日文。 UNICODE 包括了所有的文字，无论中文，英文，藏文，法文，世界所有的文字都包含其中</p>
<h3 id="UNICODE和UTF"><a href="#UNICODE和UTF" class="headerlink" title="UNICODE和UTF"></a>UNICODE和UTF</h3><p>根据前面的学习，我们了解到不同的编码方式对应不同的<strong>棋盘</strong>，而UNICODE因为要存放所有的数据，那么它的棋盘是最大的。 不仅如此，棋盘里每个数字都是很长的(4个字节)，因为不仅要表示字母，还要表示汉字等。</p>
<p>如果完全按照UNICODE的方式来存储数据，就会有很大的浪费。 比如在ISO-8859-1中，<strong>a</strong> 字符对应的数字是0x61 而UNICODE中对应的数字是 0x00000061，倘若一篇文章大部分都是英文字母，那么按照UNICODE的方式进行数据保存就会消耗很多空间</p>
<p>在这种情况下，就出现了UNICODE的各种<strong>减肥</strong>子编码, 比如UTF-8对数字和字母就使用一个字节，而对汉字就使用3个字节，从而达到了<strong>减肥还能保证健康</strong>的效果</p>
<p>UTF-8，UTF-16和UTF-32 针对不同类型的数据有不同的<strong>减肥效果</strong>，一般说来UTF-8是比较常用的方式</p>
<p>UTF-8，UTF-16和UTF-32 彼此的区别在此不作赘述，有兴趣的可以参考 <a href="http://baike.baidu.com/link?url=ty4mEX5hSfK2xAyPO8N2zgxTibBE59CShSb5yFxbVkBun_QVz65llOPEXOepgPeqe3AQDLt6LLjTayn6tioS4_#4">unicode-百度百科</a></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220110165956056.png" alt="image-20220110165956056"></p>
<h3 id="Java采用的是Unicode"><a href="#Java采用的是Unicode" class="headerlink" title="Java采用的是Unicode"></a>Java采用的是Unicode</h3><p>写在.java源代码中的汉字，在执行之后，都会变成JVM中的字符。 而这些中文字符采用的编码方式，都是使用UNICODE. “中”字对应的UNICODE是<strong>4E2D</strong>,所以在内存中，实际保存的数据就是十六进制的0x4E2D, 也就是十进制的20013。</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span>(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        <span class="built_in">String</span> <span class="built_in">str</span> = <span class="string">&quot;中&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="一个汉字使用不同编码方式的表现"><a href="#一个汉字使用不同编码方式的表现" class="headerlink" title="一个汉字使用不同编码方式的表现"></a>一个汉字使用不同编码方式的表现</h3><p>以字符 <strong>中</strong> 为例，查看其在不同编码方式下的值是多少</p>
<p>也即在不同的<strong>棋盘上的位置</strong></p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.<span class="property">io</span>.<span class="property">UnsupportedEncodingException</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStream4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span>(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        <span class="built_in">String</span> <span class="built_in">str</span> = <span class="string">&quot;中&quot;</span>;</span><br><span class="line">        <span class="title function_">showCode</span>(<span class="built_in">str</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showCode</span>(<span class="built_in">String</span> <span class="built_in">str</span>) &#123;</span><br><span class="line">        <span class="built_in">String</span>[] encodes = &#123;<span class="string">&quot;BIG5&quot;</span>, <span class="string">&quot;GBK&quot;</span>, <span class="string">&quot;GB2312&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>, <span class="string">&quot;UTF-16&quot;</span>, <span class="string">&quot;UTF-32&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">String</span> encode : encodes) &#123;</span><br><span class="line">            <span class="title function_">showCode</span>(<span class="built_in">str</span>, encode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showCode</span>(<span class="built_in">String</span> <span class="built_in">str</span>, <span class="built_in">String</span> encode) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.<span class="property">out</span>.<span class="property">printf</span>(<span class="string">&quot;字符: \&quot;%s\&quot; 的在编码方式%s下的十六进制值是%n&quot;</span>, <span class="built_in">str</span>, encode);</span><br><span class="line">            <span class="type">byte</span>[] bs = <span class="built_in">str</span>.<span class="property">getBytes</span>(encode);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">byte</span> b : bs) &#123;</span><br><span class="line">                <span class="type">int</span> i = b&amp;<span class="number">0xff</span>;</span><br><span class="line">                System.<span class="property">out</span>.<span class="property">print</span>(Integer.<span class="property">toHexString</span>(i) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="property">out</span>.<span class="property">println</span>();</span><br><span class="line">            System.<span class="property">out</span>.<span class="property">println</span>();</span><br><span class="line">        &#125; <span class="title function_">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            System.<span class="property">out</span>.<span class="property">printf</span>(<span class="string">&quot;UnsupportedEncodingException: %s编码方式无法解析字符%s\n&quot;</span>, encode, <span class="built_in">str</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    字符: <span class="string">&quot;中&quot;</span> 的在编码方式BIG5下的十六进制值是</span><br><span class="line">    a4	a4	</span><br><span class="line"></span><br><span class="line">    字符: <span class="string">&quot;中&quot;</span> 的在编码方式GBK下的十六进制值是</span><br><span class="line">    d6	d0	</span><br><span class="line"></span><br><span class="line">    字符: <span class="string">&quot;中&quot;</span> 的在编码方式GB2312下的十六进制值是</span><br><span class="line">    d6	d0	</span><br><span class="line"></span><br><span class="line">    字符: <span class="string">&quot;中&quot;</span> 的在编码方式UTF<span class="number">-8</span>下的十六进制值是</span><br><span class="line">    e4	b8	ad	</span><br><span class="line"></span><br><span class="line">    字符: <span class="string">&quot;中&quot;</span> 的在编码方式UTF<span class="number">-16</span>下的十六进制值是</span><br><span class="line">    fe	ff	<span class="number">4</span>e	<span class="number">2</span>d	</span><br><span class="line"></span><br><span class="line">    字符: <span class="string">&quot;中&quot;</span> 的在编码方式UTF<span class="number">-32</span>下的十六进制值是</span><br><span class="line">    <span class="number">0</span>	<span class="number">0</span>	<span class="number">4</span>e	<span class="number">2</span>d	</span><br></pre></td></tr></table></figure>

<h3 id="文件的编码方式-记事本"><a href="#文件的编码方式-记事本" class="headerlink" title="文件的编码方式-记事本"></a>文件的编码方式-记事本</h3><p>接下来讲，字符在文件中的保存 字符保存在文件中肯定也是以数字形式保存的，即对应在不同的<strong>棋盘</strong>上的不同的数字 用<strong>记事本</strong>打开任意文本文件，并且<strong>另存为</strong>，就能够在编码这里看到一个下拉。 <strong>ANSI</strong> 这个<em>*不是*<em><strong>ASCII</strong>的意思，而是采用</em>*本地编码</em>*的意思。如果你是中文的操作系统，就会使GBK，如果是英文的就会是ISO-8859-1</p>
<p><strong>Unicode</strong> UNICODE原生的编码方式 <strong>Unicode big endian</strong> 另一个 UNICODE编码方式 <strong>UTF-8</strong> 最常见的UTF-8编码方式，数字和字母用一个字节， 汉字用3个字节。</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220110171246317.png" alt="image-20220110171246317"></p>
<h3 id="用FileInputStream-字节流正确读取中文"><a href="#用FileInputStream-字节流正确读取中文" class="headerlink" title="用FileInputStream 字节流正确读取中文"></a>用FileInputStream 字节流正确读取中文</h3><p>为了能够正确的读取中文内容 \1. 必须了解文本是以哪种编码方式保存字符的 \2. 使用字节流读取了文本后，再使用对应的<strong>编码方式去识别这些数字</strong>，得到正确的字符 如本例，一个文件中的内容是字符<strong>中</strong>，编码方式是GBK，那么读出来的数据一定是D6D0。 再使用GBK编码方式识别D6D0，就能正确的得到字符<strong>中</strong></p>
<p><strong>注：</strong> 在GBK的棋盘上找到的<strong>中</strong>字后，JVM会自动找到<strong>中</strong>在UNICODE这个棋盘上对应的数字，并且以<a href="https://how2j.cn/k/io/io-encoding/695.html#step2486">UNICODE上的数字保存在内存中</a>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStream5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:\\LOLFolder\\lol.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);) &#123;</span><br><span class="line">            <span class="type">byte</span>[] all = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) f.length()];</span><br><span class="line">            fis.read(all);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//文件中读出来的数据是</span></span><br><span class="line">            System.out.println(<span class="string">&quot;文件中读出来的数据是：&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">byte</span> b : all)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> b&amp;<span class="number">0x000000ff</span>;  <span class="comment">//只取16进制的后两位</span></span><br><span class="line">                System.out.println(Integer.toHexString(i));</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;把这个数字，放在GBK的棋盘上去：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(all,<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="用FileReader-字符流正确读取中文"><a href="#用FileReader-字符流正确读取中文" class="headerlink" title="用FileReader 字符流正确读取中文"></a>用FileReader 字符流正确读取中文</h3><p>FileReader得到的是字符，所以一定是已经把字节<strong>根据某种编码识别成了字符</strong>了 而FileReader使用的编码方式是Charset.defaultCharset()的返回值，如果是中文的操作系统，就是GBK</p>
<ul>
<li>感觉jdk8好像底层已经变成UTF-8了</li>
</ul>
<p>FileReader是不能手动设置编码方式的，为了使用其他的编码方式，只能使用InputStreamReader来代替，像这样：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="constructor">InputStreamReader(<span class="params">new</span> FileInputStream(<span class="params">f</span>)</span>,<span class="module-access"><span class="module"><span class="identifier">Charset</span>.</span></span><span class="keyword">for</span><span class="constructor">Name(<span class="string">&quot;UTF-8&quot;</span>)</span>); </span><br></pre></td></tr></table></figure>

<p>在本例中，用记事本另存为UTF-8格式，然后用UTF-8就能识别对应的中文了。</p>
<p><strong>解释：</strong> 为什么中字前面有一个? 如果是使用记事本另存为UTF-8的格式，那么在第一个字节有一个<strong>标示符</strong>，叫做BOM用来标志这个文件是用UTF-8来编码的。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package stream;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> TestStream5 &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        File f = <span class="keyword">new</span> <span class="constructor">File(<span class="string">&quot;F:\\LOLFolder\\text.txt&quot;</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;默认编码方式:&quot;</span>+ <span class="module-access"><span class="module"><span class="identifier">Charset</span>.</span></span>default<span class="constructor">Charset()</span>);</span><br><span class="line">        <span class="comment">//FileReader得到的是字符，所以一定是已经把字节根据某种编码识别成了字符了</span></span><br><span class="line">        <span class="comment">//而FileReader使用的编码方式是Charset.defaultCharset()的返回值，如果是中文的操作系统，就是GBK</span></span><br><span class="line">        <span class="keyword">try</span> (FileReader fr = <span class="keyword">new</span> <span class="constructor">FileReader(<span class="params">f</span>)</span>) &#123;</span><br><span class="line">            <span class="built_in">char</span><span class="literal">[]</span> cs = <span class="keyword">new</span> <span class="built_in">char</span><span class="literal">[(<span class="identifier">int</span>) <span class="identifier">f</span>.<span class="identifier">length</span>()]</span>;</span><br><span class="line">            fr.read(cs);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.printf(<span class="string">&quot;FileReader会使用默认的编码方式%s,识别出来的字符是：%n&quot;</span>,<span class="module-access"><span class="module"><span class="identifier">Charset</span>.</span></span>default<span class="constructor">Charset()</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="keyword">new</span> <span class="constructor">String(<span class="params">cs</span>)</span>);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//FileReader是不能手动设置编码方式的，为了使用其他的编码方式，只能使用InputStreamReader来代替</span></span><br><span class="line">        <span class="comment">//并且使用new InputStreamReader(new FileInputStream(f),Charset.forName(&quot;UTF-8&quot;)); 这样的形式</span></span><br><span class="line">        <span class="keyword">try</span> (InputStreamReader isr = <span class="keyword">new</span> <span class="constructor">InputStreamReader(<span class="params">new</span> FileInputStream(<span class="params">f</span>)</span>,<span class="module-access"><span class="module"><span class="identifier">Charset</span>.</span></span><span class="keyword">for</span><span class="constructor">Name(<span class="string">&quot;UTF-8&quot;</span>)</span>)) &#123;</span><br><span class="line">            <span class="built_in">char</span><span class="literal">[]</span> cs = <span class="keyword">new</span> <span class="built_in">char</span><span class="literal">[(<span class="identifier">int</span>) <span class="identifier">f</span>.<span class="identifier">length</span>()]</span>;</span><br><span class="line">            isr.read(cs);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.printf(<span class="string">&quot;InputStreamReader 指定编码方式UTF-8,识别出来的字符是：%n&quot;</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="keyword">new</span> <span class="constructor">String(<span class="params">cs</span>)</span>);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    默认编码方式:UTF-<span class="number">8</span></span><br><span class="line">    FileReader会使用默认的编码方式UTF-<span class="number">8</span>,识别出来的字符是：</span><br><span class="line">    中  </span><br><span class="line">    InputStreamReader 指定编码方式UTF-<span class="number">8</span>,识别出来的字符是：</span><br><span class="line">    中  </span><br></pre></td></tr></table></figure>

<h2 id="缓存流"><a href="#缓存流" class="headerlink" title="缓存流"></a>缓存流</h2><p>以介质是硬盘为例，<strong>字节流和字符流的弊端</strong>： 在每一次读写的时候，都会访问硬盘。 如果读写的频率比较高的时候，其性能表现不佳。</p>
<p>为了解决以上弊端，采用缓存流。 缓存流在读取的时候，<strong>会一次性读较多的数据到缓存中</strong>，以后每一次的读取，都是在缓存中访问，直到缓存中的数据读取完毕，再到硬盘中读取。</p>
<p>就好比吃饭，<strong>不用缓存就是每吃一口都到锅里去铲</strong>。<strong>用缓存就是先把饭盛到碗里</strong>，碗里的吃完了，再到锅里去铲</p>
<p>缓存流在写入数据的时候，会先把数据写入到缓存区，直到缓存区<strong>达到一定的量</strong>，才把这些数据，<strong>一起写入到硬盘中去</strong>。按照这种操作模式，就不会像字节流，字符流那样<strong>每写一个字节都访问硬盘</strong>，从而减少了IO操作</p>
<h3 id="使用缓存流读取数据"><a href="#使用缓存流读取数据" class="headerlink" title="使用缓存流读取数据"></a>使用缓存流读取数据</h3><p>缓存字符输入流 BufferedReader 可以一次读取一行数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStream6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 准备文件lol.txt其中的内容是</span></span><br><span class="line">        <span class="comment">// garen kill teemo</span></span><br><span class="line">        <span class="comment">// teemo revive after 1 minutes</span></span><br><span class="line">        <span class="comment">// teemo try to garen, but killed again</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;f:/LOLFolder/lol.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建文件字符流</span></span><br><span class="line">        <span class="comment">// 缓存流必须建立在一个存在的流的基础上</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(f);</span><br><span class="line">             <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fr);) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 一次读一行</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == line) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用缓存流写出数据"><a href="#使用缓存流写出数据" class="headerlink" title="使用缓存流写出数据"></a>使用缓存流写出数据</h3><p>PrintWriter 缓存字符输出流， 可以一次写出一行数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStream6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 向文件lol2.txt中写入三行语句</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;f:/LOLFolder/lol2.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="comment">// 创建文件字符流</span></span><br><span class="line">             <span class="comment">//后面加true可以接着原有的文字加，不然就会覆盖原有文字</span></span><br><span class="line">             <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(f, <span class="literal">true</span>);</span><br><span class="line">             <span class="comment">// 缓存流必须建立在一个存在的流的基础上</span></span><br><span class="line">             <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(fw);) &#123;</span><br><span class="line">            pw.println(<span class="string">&quot;garen kill teemo&quot;</span>);</span><br><span class="line">            pw.println(<span class="string">&quot;teemo revive after 1 minutes&quot;</span>);</span><br><span class="line">            pw.println(<span class="string">&quot;teemo try to garen, but killed again&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="flush"><a href="#flush" class="headerlink" title="flush"></a>flush</h3><p>有的时候，需要<strong>立即把数据写入到硬盘</strong>，而不是等缓存满了才写出去。 这时候就需要用到flush</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStream6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 向文件lol2.txt中写入三行语句</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;f:/LOLFolder/lol2.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="comment">// 创建文件字符流</span></span><br><span class="line">             <span class="comment">//后面加true可以接着原有的文字加，不然就会覆盖原有文字</span></span><br><span class="line">             <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(f, <span class="literal">true</span>);</span><br><span class="line">             <span class="comment">// 缓存流必须建立在一个存在的流的基础上</span></span><br><span class="line">             <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(fw);) &#123;</span><br><span class="line">            pw.println(<span class="string">&quot;garen kill teemo&quot;</span>);</span><br><span class="line">            <span class="comment">//强制把缓存中的数据写入硬盘，无论缓存是否已满</span></span><br><span class="line">                pw.flush();</span><br><span class="line">            pw.println(<span class="string">&quot;teemo revive after 1 minutes&quot;</span>);</span><br><span class="line">            <span class="comment">//强制把缓存中的数据写入硬盘，无论缓存是否已满</span></span><br><span class="line">                pw.flush();</span><br><span class="line">            pw.println(<span class="string">&quot;teemo try to garen, but killed again&quot;</span>);</span><br><span class="line">            <span class="comment">//强制把缓存中的数据写入硬盘，无论缓存是否已满</span></span><br><span class="line">                pw.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><p>DataInputStream 数据输入流 DataOutputStream 数据输出流</p>
<h3 id="直接进行字符串的读写"><a href="#直接进行字符串的读写" class="headerlink" title="直接进行字符串的读写"></a>直接进行字符串的读写</h3><p>使用数据流的writeUTF()和readUTF() 可以进行数据的<strong>格式化顺序读写</strong> 如本例，通过DataOutputStream 向文件顺序写出 布尔值，整数和字符串。 然后再通过DataInputStream 顺序读入这些数据。</p>
<p><strong>注：</strong> 要用DataInputStream 读取一个文件，这个文件必须是由DataOutputStream 写出的，否则会出现EOFException，因为DataOutputStream 在写出的时候会做一些特殊标记，只有DataInputStream 才能成功的读取。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStream6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        write();</span><br><span class="line">        read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;f:/LOLFolder/lol2.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">            <span class="type">DataInputStream</span> <span class="variable">dis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(fis);</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> dis.readBoolean();</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> dis.readInt();</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> dis.readUTF();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;读取到布尔值:&quot;</span>+b);</span><br><span class="line">            System.out.println(<span class="string">&quot;读取到整数:&quot;</span>+i);</span><br><span class="line">            System.out.println(<span class="string">&quot;读取到字符串:&quot;</span>+str);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;f:/LOLFolder/lol2.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(f);</span><br><span class="line">                <span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(fos);</span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">            dos.writeBoolean(<span class="literal">true</span>);</span><br><span class="line">            dos.writeInt(<span class="number">300</span>);</span><br><span class="line">            dos.writeUTF(<span class="string">&quot;123 this is gareen&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h2><p>对象流指的是可以直接<strong>把一个对象以流的形式</strong>传输给其他的介质，比如硬盘</p>
<p>一个对象以流的形式进行传输，叫做序列化。 该对象所对应的类，必须是实现Serializable接口</p>
<h3 id="序列化一个对象"><a href="#序列化一个对象" class="headerlink" title="序列化一个对象"></a>序列化一个对象</h3><p>创建一个Hero对象，设置其名称为garen。 把该对象序列化到一个文件garen.lol。 然后再通过序列化把该文件转换为一个Hero对象</p>
<p><strong>注：</strong>把一个对象序列化有一个前提是：这个对象的类，必须实现了Serializable接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> LOL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">//表示这个类当前的版本，如果有了变化，比如新设计了属性，就应该修改这个版本号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> hp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个Hero garen</span></span><br><span class="line">        <span class="comment">//要把Hero对象直接保存在文件上，务必让Hero类实现Serializable接口</span></span><br><span class="line">        <span class="type">Hero</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        h.name = <span class="string">&quot;garen&quot;</span>;</span><br><span class="line">        h.hp = <span class="number">616</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//准备一个文件用于保存该对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;F:\\LOLFolder\\garen.lol&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            <span class="comment">//创建对象输出流</span></span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(f);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建对象输入流</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">            oos.writeObject(h);</span><br><span class="line">            <span class="type">Hero</span> <span class="variable">h2</span> <span class="operator">=</span> (Hero)ois.readObject();</span><br><span class="line">            System.out.println(h2.name);</span><br><span class="line">            System.out.println(h2.hp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="System-in"><a href="#System-in" class="headerlink" title="System.in"></a>System.in</h2><p>System.out 是常用的在控制台输出数据的 System.in 可以从控制台输入数据</p>
<h3 id="System-in-1"><a href="#System-in-1" class="headerlink" title="System.in"></a>System.in</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 控制台输入</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> System.in) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 敲入a,然后敲回车可以看到</span></span><br><span class="line">                <span class="comment">// 97 13 10</span></span><br><span class="line">                <span class="comment">// 97是a的ASCII码</span></span><br><span class="line">                <span class="comment">// 13 10分别对应回车换行</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> is.read();</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Scanner读取字符串"><a href="#Scanner读取字符串" class="headerlink" title="Scanner读取字符串"></a>Scanner读取字符串</h3><p>使用System.in.read虽然可以读取数据，但是很不方便 使用Scanner就可以逐行读取了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> s.nextLine();</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Scanner从控制台读取整数"><a href="#Scanner从控制台读取整数" class="headerlink" title="Scanner从控制台读取整数"></a>Scanner从控制台读取整数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> s.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;第一个整数：&quot;</span>+a);</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> s.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;第二个整数：&quot;</span>+b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="流关系图"><a href="#流关系图" class="headerlink" title="流关系图"></a>流关系图</h2><h3 id="流关系图-1"><a href="#流关系图-1" class="headerlink" title="流关系图"></a>流关系图</h3><p>这个图把本章节学到的流关系做了个简单整理 \1. 流分为字节流和字符流 \2. 字节流下面常用的又有数据流和对象流 \3. 字符流下面常用的又有缓存流</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220110201229853.png" alt="image-20220110201229853"></p>
<h3 id="其他流"><a href="#其他流" class="headerlink" title="其他流"></a>其他流</h3><p>除了上图所接触的流之外，还有很多其他流，如图所示InputStream下面有很多的子类。 这些子类不需要立即掌握，他们大体上用法是差不多的，只是在一些特殊场合下用起来更方便，在工作中用到的时候再进行学习就行了。</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220110201316979.png" alt="image-20220110201316979"></p>
<h1 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h1><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><h3 id="与数组的区别"><a href="#与数组的区别" class="headerlink" title="与数组的区别"></a>与数组的区别</h3><h4 id="使用数组的局限性"><a href="#使用数组的局限性" class="headerlink" title="使用数组的局限性"></a>使用数组的局限性</h4><p>如果要存放多个对象，可以使用数组，但是数组有局限性 比如 声明长度是10的数组 不用的数组就浪费了 超过10的个数，又放不下</p>
<h4 id="ArrayList存放对象"><a href="#ArrayList存放对象" class="headerlink" title="ArrayList存放对象"></a>ArrayList存放对象</h4><p>为了解决数组的局限性，引入容器类的概念。 最常见的容器类就是 ArrayList <a href="https://how2j.cn/k/number-string/number-string-stringbuilder/328.html#step724">容器的容量</a>“capacity”会随着对象的增加，自动增长 只需要不断往容器里增加英雄即可，不用担心会出现数组的边界问题。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> TestCollection &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="comment">//容器类ArrayList，用于存放对象</span></span><br><span class="line">        ArrayList heros = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        heros.add(<span class="keyword">new</span> Hero(<span class="string">&quot;盖伦&quot;</span>));</span><br><span class="line">        System.out.<span class="keyword">println</span>(heros.<span class="keyword">size</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//容器的容量&quot;capacity&quot;会随着对象的增加，自动增长</span></span><br><span class="line">        <span class="comment">//只需要不断往容器里增加英雄即可，不用担心会出现数组的边界问题。</span></span><br><span class="line">        heros.add( <span class="keyword">new</span> Hero(<span class="string">&quot;提莫&quot;</span>));</span><br><span class="line">        System.out.<span class="keyword">println</span>(heros.<span class="keyword">size</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4><p><strong>add</strong> 有两种用法</p>
<p>第一种是直接add对象，把对象加在最后面</p>
<p>第二种是在指定位置加对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCollection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">heros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把5个对象加入到ArrayList中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heros.add(<span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;hero&quot;</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(heros);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在指定位置增加对象</span></span><br><span class="line">        <span class="type">Hero</span> <span class="variable">specialHero</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;special hero&quot;</span>);</span><br><span class="line">        heros.add(<span class="number">3</span>, specialHero);</span><br><span class="line"></span><br><span class="line">        System.out.println(heros.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> LOL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> hp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> damage;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hero</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加一个初始化name的构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hero</span><span class="params">(String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写toString方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="判断是否存在"><a href="#判断是否存在" class="headerlink" title="判断是否存在"></a>判断是否存在</h4><p>通过方法<strong>contains</strong> 判断一个对象是否在容器中 判断标准： 是否是同一个对象，而不是name是否相同</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestCollection &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        ArrayList heros = <span class="built_in">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        // 把<span class="number">5</span>个对象加入到ArrayList中</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heros.<span class="keyword">add</span>(<span class="built_in">new</span> Hero(&quot;hero&quot; + i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(heros);</span><br><span class="line"></span><br><span class="line">        // 在指定位置增加对象</span><br><span class="line">        Hero specialHero = <span class="built_in">new</span> Hero(&quot;special hero&quot;);</span><br><span class="line">        heros.<span class="keyword">add</span>(<span class="number">3</span>, specialHero);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(heros.toString());</span><br><span class="line"></span><br><span class="line">        // 判断一个对象是否在容器中</span><br><span class="line">        // 判断标准： 是否是同一个对象，而不是<span class="type">name</span>是否相同</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.print(&quot;虽然一个新的对象名字也叫 hero 1，但是contains的返回是:&quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(heros.contains(<span class="built_in">new</span> Hero(&quot;hero1&quot;)));</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.print(&quot;而对specialHero的判断，contains的返回是:&quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(heros.contains(specialHero));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取指定位置的对象"><a href="#获取指定位置的对象" class="headerlink" title="获取指定位置的对象"></a>获取指定位置的对象</h4><p>通过get获取指定位置的对象，如果输入的下标越界，一样会报错</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        ArrayList heros = <span class="keyword">new</span> <span class="type">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heros.add(<span class="keyword">new</span> <span class="type">Hero</span>(<span class="string">&quot;hero&quot;</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line">        Hero specialHero = <span class="keyword">new</span> <span class="type">Hero</span>(<span class="string">&quot;special hero&quot;</span>);</span><br><span class="line">        heros.add(<span class="number">3</span>, specialHero);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定位置的对象</span></span><br><span class="line">        System.out.println(heros.<span class="keyword">get</span>(<span class="number">5</span>));</span><br><span class="line">        <span class="comment">//如果超出了范围，依然会报错</span></span><br><span class="line">        System.out.println(heros.<span class="keyword">get</span>(<span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取对象所处的位置"><a href="#获取对象所处的位置" class="headerlink" title="获取对象所处的位置"></a>获取对象所处的位置</h4><p><strong>indexOf</strong>用于判断一个对象在ArrayList中所处的位置 与<a href="https://how2j.cn/k/collection/collection-arraylist-method/685.html#step2454">contains</a>一样，判断标准是对象是否相同，而非对象的name值是否相等</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestCollection &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        ArrayList heros = <span class="built_in">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heros.<span class="keyword">add</span>(<span class="built_in">new</span> Hero(&quot;hero&quot; + i));</span><br><span class="line">        &#125;</span><br><span class="line">        Hero specialHero = <span class="built_in">new</span> Hero(&quot;special hero&quot;);</span><br><span class="line">        heros.<span class="keyword">add</span>(specialHero);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(heros);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;specialHero所处的位置:&quot; + heros.indexOf(specialHero));</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;新的英雄，但是名字是\&quot;hero <span class="number">1</span>\&quot;所处的位置:&quot; + heros.indexOf(<span class="built_in">new</span> Hero(&quot;hero1&quot;)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    [hero0, hero1, hero2, hero3, hero4, special hero]</span><br><span class="line">	specialHero所处的位置:<span class="number">5</span></span><br><span class="line">	新的英雄，但是名字是&quot;hero 1&quot;所处的位置:<span class="number">-1</span></span><br></pre></td></tr></table></figure>

<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p><strong>remove</strong>用于把对象从ArrayList中删除</p>
<p>remove可以根据下标删除ArrayList的元素</p>
<p>也可以根据对象删除</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestCollection &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        ArrayList heros = <span class="built_in">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heros.<span class="keyword">add</span>(<span class="built_in">new</span> Hero(&quot;hero&quot; + i));</span><br><span class="line">        &#125;</span><br><span class="line">        Hero specialHero = <span class="built_in">new</span> Hero(&quot;special hero&quot;);</span><br><span class="line">        heros.<span class="keyword">add</span>(specialHero);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(heros);</span><br><span class="line">        heros.remove(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(heros);</span><br><span class="line">        heros.remove(specialHero);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(heros);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="替换-1"><a href="#替换-1" class="headerlink" title="替换"></a>替换</h4><p><strong>set</strong>用于替换指定位置的元素</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        ArrayList heros = <span class="keyword">new</span> <span class="type">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heros.add(<span class="keyword">new</span> <span class="type">Hero</span>(<span class="string">&quot;hero&quot;</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line">        Hero specialHero = <span class="keyword">new</span> <span class="type">Hero</span>(<span class="string">&quot;special hero&quot;</span>);</span><br><span class="line">        heros.add(specialHero);</span><br><span class="line"></span><br><span class="line">        System.out.println(heros);</span><br><span class="line">        heros.<span class="keyword">set</span>(<span class="number">5</span>, <span class="keyword">new</span> <span class="type">Hero</span>(<span class="string">&quot;hero 5&quot;</span>));</span><br><span class="line">        System.out.println(heros);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取大小"><a href="#获取大小" class="headerlink" title="获取大小"></a>获取大小</h4><p><strong>size</strong> 用于获取ArrayList的大小</p>
<h4 id="转换为数组"><a href="#转换为数组" class="headerlink" title="转换为数组"></a>转换为数组</h4><p><strong>toArray</strong>可以把一个ArrayList对象转换为数组。 需要注意的是，如果要转换为一个Hero数组，那么需要传递一个Hero数组类型的对象给toArray()，这样toArray方法才知道，你希望转换为哪种类型的数组，否则只能转换为Object数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCollection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">heros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heros.add(<span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;hero&quot;</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Hero</span> <span class="variable">specialHero</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;special hero&quot;</span>);</span><br><span class="line">        heros.add(specialHero);</span><br><span class="line"></span><br><span class="line">        System.out.println(heros);</span><br><span class="line">        Hero[] hs = (Hero[])heros.toArray(<span class="keyword">new</span> <span class="title class_">Hero</span>[]&#123;&#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;数组:&quot;</span> + hs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="把另一个容器所有对象都加进来"><a href="#把另一个容器所有对象都加进来" class="headerlink" title="把另一个容器所有对象都加进来"></a>把另一个容器所有对象都加进来</h4><p><strong>addAll</strong> 把另一个容器所有对象都加进来</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestCollection &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        ArrayList heros = <span class="built_in">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        // 初始化<span class="number">5</span>个对象</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heros.<span class="keyword">add</span>(<span class="built_in">new</span> Hero(&quot;hero&quot; + i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;ArrayList heros:\t&quot; + heros);</span><br><span class="line"></span><br><span class="line">        //把另一个容器里所有的元素，都加入到该容器里来</span><br><span class="line">        ArrayList anotherHeros = <span class="built_in">new</span> ArrayList();</span><br><span class="line">        anotherHeros.<span class="keyword">add</span>(<span class="built_in">new</span> Hero(&quot;hero a&quot;));</span><br><span class="line">        anotherHeros.<span class="keyword">add</span>(<span class="built_in">new</span> Hero(&quot;hero b&quot;));</span><br><span class="line">        anotherHeros.<span class="keyword">add</span>(<span class="built_in">new</span> Hero(&quot;hero c&quot;));</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;anotherHeros heros:\t&quot; + anotherHeros);</span><br><span class="line">        heros.addAll(anotherHeros);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;把另一个ArrayList的元素都加入到当前ArrayList:&quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;ArrayList heros:\t&quot; + heros);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="清空"><a href="#清空" class="headerlink" title="清空"></a>清空</h4><p><strong>clear</strong> 清空一个ArrayList</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCollection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">heros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heros.add(<span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;hero&quot;</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line">        heros.clear();</span><br><span class="line">        System.out.println(heros.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h3><h4 id="ArrayList和List"><a href="#ArrayList和List" class="headerlink" title="ArrayList和List"></a>ArrayList和List</h4><p>ArrayList实现了接口List 常见的写法会把引用声明为接口List类型 注意：是<strong>java.util.List</strong>,而<strong>不是</strong>java.awt.List</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCollection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//ArrayList实现了接口List</span></span><br><span class="line">        <span class="comment">//常见的写法会把引用声明为接口List类型</span></span><br><span class="line">        <span class="comment">//注意：是java.util.List,而不是java.awt.List</span></span><br><span class="line">        <span class="comment">//接口引用指向子类对象（多态）</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">heros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        heros.add(<span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;盖伦&quot;</span>));</span><br><span class="line">        System.out.println(heros.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="List接口的方法"><a href="#List接口的方法" class="headerlink" title="List接口的方法"></a>List接口的方法</h4><p>因为ArrayList实现了List接口，所以List接口的方法ArrayList都实现了。 在<a href="https://how2j.cn/k/collection/collection-arraylist-method/685.html">ArrayList 常用方法</a>章节有详细的讲解，在此不作赘述</p>
<h3 id="泛型Generic"><a href="#泛型Generic" class="headerlink" title="泛型Generic"></a>泛型Generic</h3><h4 id="泛型-Generic"><a href="#泛型-Generic" class="headerlink" title="泛型 Generic"></a>泛型 Generic</h4><p>不指定泛型的容器，可以存放任何类型的元素 指定了泛型的容器，只能存放指定类型的元素以及其子类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> LOL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Item</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Item</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Item</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">effect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;物品使用后，可以有效果&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.APHero;</span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"><span class="keyword">import</span> LOL.Item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCollection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对于不使用泛型的容器，可以往里面放英雄，也可以往里面放物品</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">heros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        heros.add(<span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;盖伦&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//本来用于存放英雄的容器，现在也可以存放物品了</span></span><br><span class="line">        heros.add(<span class="keyword">new</span> <span class="title class_">Item</span>(<span class="string">&quot;冰杖&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对象转型会出现问题</span></span><br><span class="line">        <span class="type">Hero</span> <span class="variable">h1</span> <span class="operator">=</span> (Hero) heros.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//尤其是在容器里放的对象太多的时候，就记不清楚哪个位置放的是哪种类型的对象了</span></span><br><span class="line">        <span class="comment">//Hero h2=  (Hero) heros.get(1);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//引入泛型Generic</span></span><br><span class="line">        <span class="comment">//声明容器的时候，就指定了这种容器，只能放Hero，放其他的就会出错</span></span><br><span class="line">        List&lt;Hero&gt; genericheros = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Hero&gt;();</span><br><span class="line">        genericheros.add(<span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;盖伦&quot;</span>));</span><br><span class="line">        <span class="comment">//如果不是Hero类型，根本就放不进去</span></span><br><span class="line">        <span class="comment">//genericheros.add(new Item(&quot;冰杖&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//除此之外，还能存放Hero的子类</span></span><br><span class="line">        genericheros.add(<span class="keyword">new</span> <span class="title class_">APHero</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//并且在取出数据的时候，不需要再进行转型了，因为里面肯定是放的Hero或者其子类</span></span><br><span class="line">        <span class="type">Hero</span> <span class="variable">h</span> <span class="operator">=</span> genericheros.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="泛型的简写"><a href="#泛型的简写" class="headerlink" title="泛型的简写"></a>泛型的简写</h4><p>为了不使编译器出现警告，需要前后都使用泛型，像这样：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">List&lt;Hero&gt; genericheros <span class="operator">=</span> new ArrayList&lt;Hero&gt;()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>不过JDK7提供了一个可以略微减少代码量的泛型简写方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Hero&gt; genericheros2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.APHero;</span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"><span class="keyword">import</span> LOL.Item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCollection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Hero&gt; genericheros = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Hero&gt;();</span><br><span class="line">        List&lt;Hero&gt; genericheros2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="泛型的系统学习"><a href="#泛型的系统学习" class="headerlink" title="泛型的系统学习"></a>泛型的系统学习</h4><p>泛型的知识还包含 <a href="https://how2j.cn/k/generic/generic-generic-class/374.html">支持泛型的类</a> <a href="https://how2j.cn/k/generic/generic-casting/375.html">泛型转型</a> <a href="https://how2j.cn/k/generic/generic-wildcard/376.html">通配符</a> 这些内容都在<a href="https://how2j.cn/k/generic/generic-generic/373.html">泛型章节</a>详细展开</p>
<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><h4 id="用for循环遍历"><a href="#用for循环遍历" class="headerlink" title="用for循环遍历"></a>用for循环遍历</h4><p>通过前面的学习，知道了可以用size()和get()分别得到大小，和获取指定位置的元素，结合for循环就可以遍历出ArrayList的内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCollection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Hero&gt; heroes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heroes.add(<span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;hero name &quot;</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一种遍历 for循环</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------for 循环-------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; heroes.size(); i++) &#123;</span><br><span class="line">            <span class="type">Hero</span> <span class="variable">h</span> <span class="operator">=</span> heroes.get(i);</span><br><span class="line">            System.out.println(h);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="迭代器遍历"><a href="#迭代器遍历" class="headerlink" title="迭代器遍历"></a>迭代器遍历</h4><p>使用迭代器Iterator遍历集合中的元素</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220111135158788.png" alt="image-20220111135158788"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCollection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Hero&gt; heroes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heroes.add(<span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;hero name &quot;</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二种遍历，使用迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------使用while的iterator-------&quot;</span>);</span><br><span class="line">        Iterator&lt;Hero&gt; it = heroes.iterator();</span><br><span class="line">        <span class="comment">//从最开始的位置判断&quot;下一个&quot;位置是否有数据</span></span><br><span class="line">        <span class="comment">//如果有就通过next取出来，并且把指针向下移动</span></span><br><span class="line">        <span class="comment">//直到&quot;下一个&quot;位置没有数据</span></span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            <span class="type">Hero</span> <span class="variable">h</span> <span class="operator">=</span> it.next();</span><br><span class="line">            System.out.println(h);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//迭代器的for写法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------使用for的iterator-------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;Hero&gt; iterator = heroes.iterator(); iterator.hasNext(); )&#123;</span><br><span class="line">            <span class="type">Hero</span> <span class="variable">hero</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(hero);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="用增强型for循环"><a href="#用增强型for循环" class="headerlink" title="用增强型for循环"></a>用增强型for循环</h4><p>使用增强型for循环可以非常方便的遍历ArrayList中的元素，这是很多开发人员的首选。</p>
<p>不过增强型for循环也有不足： 无法用来进行ArrayList的初始化 无法得知当前是第几个元素了，当需要只打印单数元素的时候，就做不到了。 必须再自定下标变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCollection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Hero&gt; heroes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heroes.add(<span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;hero name &quot;</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三种，增强型for循环</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------增强型for循环-------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Hero h : heroes) &#123;</span><br><span class="line">            System.out.println(h);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="其他集合"><a href="#其他集合" class="headerlink" title="其他集合"></a>其他集合</h2><h3 id="LinkedList-与-List接口"><a href="#LinkedList-与-List接口" class="headerlink" title="LinkedList 与 List接口"></a>LinkedList 与 List接口</h3><p>与<a href="https://how2j.cn/k/collection/collection-arraylist-method/685.html">ArrayList</a>一样，LinkedList也实现了List接口，诸如add,remove,contains等等方法。 详细使用，请参考 <a href="https://how2j.cn/k/collection/collection-arraylist-method/685.html">ArrayList 常用方法</a>，在此不作赘述。</p>
<p>接下来要讲的是LinkedList的一些特别的地方</p>
<h3 id="双向链表-Deque"><a href="#双向链表-Deque" class="headerlink" title="双向链表 - Deque"></a>双向链表 - Deque</h3><p>除了实现了List接口外，LinkedList还实现了<strong>双向链表结构</strong>Deque，可以很方便的在头尾插入删除数据</p>
<p>什么是链表结构: 与数组结构相比较，数组结构，就好像是电影院，每个位置都有标示，每个位置之间的间隔都是一样的。 而链表就相当于佛珠，每个珠子，只连接前一个和后一个，不用关心除此之外的其他佛珠在哪里。</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220111140747126.png" alt="image-20220111140747126"></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package collection;</span><br><span class="line"></span><br><span class="line">import LOL.Hero;</span><br><span class="line"></span><br><span class="line">import java.util.LinkedList;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> TestCollection &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        <span class="comment">//LinkedList是一个双向链表结构的list</span></span><br><span class="line">        LinkedList&lt;Hero&gt; ll = <span class="keyword">new</span> LinkedList&lt;&gt;<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//所以可以很方便的在头部和尾部插入数据</span></span><br><span class="line">        <span class="comment">//在最后插入新的英雄</span></span><br><span class="line">        ll.add<span class="constructor">Last(<span class="params">new</span> Hero(<span class="string">&quot;hero1&quot;</span>)</span>);</span><br><span class="line">        ll.add<span class="constructor">Last(<span class="params">new</span> Hero(<span class="string">&quot;hero2&quot;</span>)</span>);</span><br><span class="line">        ll.add<span class="constructor">Last(<span class="params">new</span> Hero(<span class="string">&quot;hero3&quot;</span>)</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在最前面插入新的英雄</span></span><br><span class="line">        ll.add<span class="constructor">First(<span class="params">new</span> Hero(<span class="string">&quot;heroX&quot;</span>)</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(ll);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查看最前面的英雄</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(ll.get<span class="constructor">First()</span>);</span><br><span class="line">        <span class="comment">//查看最后面的英雄</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(ll.get<span class="constructor">Last()</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查看不会导致英雄被删除</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(ll);</span><br><span class="line">        <span class="comment">//取出最前面的英雄</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(ll.remove<span class="constructor">First()</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取出最后面的英雄</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(ll.remove<span class="constructor">Last()</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取出会导致英雄被删除</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(ll);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列 - Queue"></a>队列 - Queue</h4><p>LinkedList 除了实现了List和Deque外，还实现了<strong>Queue</strong>接口(队列)。 Queue是先进先出队列 <strong>FIFO</strong>，常用方法： <strong>offer</strong> 在最后添加元素 <strong>poll</strong> 取出第一个元素 <strong>peek</strong> 查看第一个元素</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> TestCollection &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="comment">//和ArrayList一样，LinkedList也实现了List接口</span></span><br><span class="line">        List ll = <span class="keyword">new</span> LinkedList&lt;Hero&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//所不同的是LinkedList还实现了Deque，进而又实现了Queue这个接口</span></span><br><span class="line">        <span class="comment">//Queue代表FIFO 先进先出的队列</span></span><br><span class="line">        Queue&lt;Hero&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加在队列的最后面</span></span><br><span class="line">        System.out.<span class="keyword">print</span>(<span class="string">&quot;初始化队列：\t&quot;</span>);</span><br><span class="line">        q.offer(<span class="keyword">new</span> Hero(<span class="string">&quot;Hero1&quot;</span>));</span><br><span class="line">        q.offer(<span class="keyword">new</span> Hero(<span class="string">&quot;Hero2&quot;</span>));</span><br><span class="line">        q.offer(<span class="keyword">new</span> Hero(<span class="string">&quot;Hero3&quot;</span>));</span><br><span class="line">        q.offer(<span class="keyword">new</span> Hero(<span class="string">&quot;Hero4&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.<span class="keyword">println</span>(q);</span><br><span class="line">        System.out.<span class="keyword">print</span>(<span class="string">&quot;把第一个元素取poll()出来:\t&quot;</span>);</span><br><span class="line">        <span class="comment">//取出第一个Hero，FIFO 先进先出</span></span><br><span class="line">        Hero h = q.poll();</span><br><span class="line">        System.out.<span class="keyword">println</span>(h);</span><br><span class="line">        System.out.<span class="keyword">print</span>(<span class="string">&quot;取出第一个元素之后的队列:\t&quot;</span>);</span><br><span class="line">        System.out.<span class="keyword">println</span>(q);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把第一个拿出来看一看，但是不取出来</span></span><br><span class="line">        h = q.peek();</span><br><span class="line">        System.out.<span class="keyword">print</span>(<span class="string">&quot;查看peek()第一个元素:\t&quot;</span>);</span><br><span class="line">        System.out.<span class="keyword">println</span>(h);</span><br><span class="line">        System.out.<span class="keyword">print</span>(<span class="string">&quot;查看并不会导致第一个元素被取出来:\t&quot;</span>);</span><br><span class="line">        System.out.<span class="keyword">println</span>(q);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ArrayList-与-LinkedList的区别"><a href="#ArrayList-与-LinkedList的区别" class="headerlink" title="ArrayList 与 LinkedList的区别"></a>ArrayList 与 LinkedList的区别</h4><p>ArrayList 与 LinkedList的区别是面试常常会问到的考题 具体区别，详见 <a href="https://how2j.cn/k/collection/collection-arraylist-vs-linkedlist/690.html">ArrayList 与 LinkedList的区别</a></p>
<h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><h4 id="二叉树概念"><a href="#二叉树概念" class="headerlink" title="二叉树概念"></a>二叉树概念</h4><p>二叉树由各种<strong>节点</strong>组成 二叉树特点： 每个节点都可以有<strong>左子</strong>节点，<strong>右子</strong>节点 每一个节点都有一个<strong>值</strong></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220111143846421.png" alt="image-20220111143846421"></p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 左子节点</span></span><br><span class="line">    <span class="keyword">public</span> Node leftNode;</span><br><span class="line">    <span class="comment">// 右子节点</span></span><br><span class="line">    <span class="keyword">public</span> Node rightNode;</span><br><span class="line">    <span class="comment">// 值</span></span><br><span class="line">    <span class="keyword">public</span> Object value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二叉树排序-插入数据"><a href="#二叉树排序-插入数据" class="headerlink" title="二叉树排序-插入数据"></a>二叉树排序-插入数据</h4><p>假设通过二叉树对如下10个随机数进行排序 67,7,30,73,10,0,78,81,10,74 排序的第一个步骤是把数据插入到该二叉树中 插入基本逻辑是，<strong>小、相同的放左边</strong>，<strong>大的放右边</strong> \1. 67 放在根节点 \2. 7 比 67小，放在67的左节点 \3. 30 比67 小，找到67的左节点7，30比7大，就放在7的右节点 \4. 73 比67大， 放在67的右节点 \5. 10 比 67小，找到67的左节点7，10比7大，找到7的右节点30，10比30小，放在30的左节点。 … … \9. 10比67小，找到67的左节点7，10比7大，找到7的右节点30，10比30小，找到30的左节点10，10和10一样大，放在左边</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220111144534819.png" alt="image-20220111144534819"></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="comment">// 左子节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">Node</span> leftNode;</span><br><span class="line">    <span class="comment">// 右子节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">Node</span> rightNode;</span><br><span class="line">    <span class="comment">// 值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">Object</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入 数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">add</span>(<span class="params"><span class="built_in">Object</span> v</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果当前节点没有值，就把数据放在当前节点上</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == value) &#123;</span><br><span class="line">            value = v;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果当前节点有值，就进行判断，新增的值与当前值的大小关系</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 新增的值，比当前值小或者相同</span></span><br><span class="line">            <span class="keyword">if</span> ((<span class="title class_">Integer</span>)v - (<span class="title class_">Integer</span>)value &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == leftNode) &#123;</span><br><span class="line">                    leftNode = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                leftNode.<span class="title function_">add</span>(v);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 新增的值，比当前值大</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == rightNode) &#123;</span><br><span class="line">                    rightNode = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                rightNode.<span class="title function_">add</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        int[] randoms = <span class="keyword">new</span> int[] &#123;<span class="number">67</span>, <span class="number">7</span>, <span class="number">30</span>, <span class="number">73</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">78</span>, <span class="number">81</span>, <span class="number">10</span>, <span class="number">74</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="title class_">Node</span> roots = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        <span class="keyword">for</span> (int <span class="built_in">number</span> : randoms) &#123;</span><br><span class="line">            roots.<span class="title function_">add</span>(<span class="built_in">number</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二叉树排序-遍历"><a href="#二叉树排序-遍历" class="headerlink" title="二叉树排序-遍历"></a>二叉树排序-遍历</h4><p>通过上一个步骤的插入行为，实际上，数据就已经排好序了。 接下来要做的是看，把<strong>这些已经排好序的数据</strong>，遍历成我们常用的List或者数组的形式</p>
<p>二叉树的遍历分左序，中序，右序 <strong>左序</strong>即： 中间的数遍历后放在<strong>左边</strong> <strong>中序</strong>即： 中间的数遍历后放在<strong>中间</strong> <strong>右序</strong>即： 中间的数遍历后放在<strong>右边</strong> 如图所见，我们希望遍历后的结果是从小到大的，所以应该采用<strong>中序遍历</strong></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220111150418422.png" alt="image-20220111150418422"></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">ArrayList</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">List</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="comment">// 左子节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">Node</span> leftNode;</span><br><span class="line">    <span class="comment">// 右子节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">Node</span> rightNode;</span><br><span class="line">    <span class="comment">// 值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">Object</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入 数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">add</span>(<span class="params"><span class="built_in">Object</span> v</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果当前节点没有值，就把数据放在当前节点上</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == value) &#123;</span><br><span class="line">            value = v;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果当前节点有值，就进行判断，新增的值与当前值的大小关系</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 新增的值，比当前值小或者相同</span></span><br><span class="line">            <span class="keyword">if</span> ((<span class="title class_">Integer</span>)v - (<span class="title class_">Integer</span>)value &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == leftNode) &#123;</span><br><span class="line">                    leftNode = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                leftNode.<span class="title function_">add</span>(v);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 新增的值，比当前值大</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == rightNode) &#123;</span><br><span class="line">                    rightNode = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                rightNode.<span class="title function_">add</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中序遍历所有的节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">List</span>&lt;<span class="title class_">Object</span>&gt; <span class="title function_">values</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">List</span>&lt;<span class="title class_">Object</span>&gt; values = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左节点的遍历结果</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != leftNode) &#123;</span><br><span class="line">            values.<span class="title function_">addAll</span>(leftNode.<span class="title function_">values</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前节点</span></span><br><span class="line">        values.<span class="title function_">add</span>(value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 右节点的遍历结果</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != rightNode) &#123;</span><br><span class="line">            values.<span class="title function_">addAll</span>(rightNode.<span class="title function_">values</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> values;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        int[] randoms = <span class="keyword">new</span> int[] &#123;<span class="number">67</span>, <span class="number">7</span>, <span class="number">30</span>, <span class="number">73</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">78</span>, <span class="number">81</span>, <span class="number">10</span>, <span class="number">74</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Node</span> roots = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        <span class="keyword">for</span> (int <span class="built_in">number</span> : randoms) &#123;</span><br><span class="line">            roots.<span class="title function_">add</span>(<span class="built_in">number</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(roots.<span class="title function_">values</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><h4 id="HashMap的键值对"><a href="#HashMap的键值对" class="headerlink" title="HashMap的键值对"></a>HashMap的键值对</h4><p>HashMap储存数据的方式是—— 键值对</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestCollection &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        HashMap&lt;String, String&gt; <span class="keyword">dictionary</span> = <span class="built_in">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">dictionary</span>.put(&quot;abc&quot;, &quot;物理英雄&quot;);</span><br><span class="line">        <span class="keyword">dictionary</span>.put(&quot;apc&quot;, &quot;魔法英雄&quot;);</span><br><span class="line">        <span class="keyword">dictionary</span>.put(&quot;t&quot;, &quot;坦克&quot;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">dictionary</span>.<span class="keyword">get</span>(&quot;t&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="键不能重复，值可以重复"><a href="#键不能重复，值可以重复" class="headerlink" title="键不能重复，值可以重复"></a>键不能重复，值可以重复</h4><p>对于HashMap而言，key是唯一的，不可以重复的。 所以，<strong>以相同的key 把不同的value插入到 Map中会导致旧元素被覆盖，只留下最后插入的元素</strong> 不过，同一个对象可以作为值插入到map中，只要对应的key不一样</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        HashMap&lt;<span class="keyword">String</span>, Hero&gt; heroMap = <span class="keyword">new</span> <span class="type">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        heroMap.put(<span class="string">&quot;gareen&quot;</span>, <span class="keyword">new</span> <span class="type">Hero</span>(<span class="string">&quot;gareen1&quot;</span>));</span><br><span class="line">        System.out.println(heroMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//key为gareen已经有value了，再以gareen作为key放入数据，会导致原英雄，被覆盖</span></span><br><span class="line">        <span class="comment">//不会增加新的元素到Map中</span></span><br><span class="line">        heroMap.put(<span class="string">&quot;gareen&quot;</span>, <span class="keyword">new</span> <span class="type">Hero</span>(<span class="string">&quot;gareen2&quot;</span>));</span><br><span class="line">        System.out.println(heroMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清空map</span></span><br><span class="line">        heroMap.clear();</span><br><span class="line">        System.out.println(heroMap.size());</span><br><span class="line"></span><br><span class="line">        Hero gareen = <span class="keyword">new</span> <span class="type">Hero</span>(<span class="string">&quot;gareen&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//同一个对象可以作为值插入到map中，只要对应的key不一样</span></span><br><span class="line">        heroMap.put(<span class="string">&quot;hero1&quot;</span>, gareen);</span><br><span class="line">        heroMap.put(<span class="string">&quot;hero2&quot;</span>, gareen);</span><br><span class="line"></span><br><span class="line">        System.out.println(heroMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><h4 id="元素不能重复"><a href="#元素不能重复" class="headerlink" title="元素不能重复"></a>元素不能重复</h4><p>Set中的元素，不能重复(是利用了equals判断重复的，所以就算new String(“gareen”);也插不进去</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        HashSet&lt;<span class="keyword">String</span>&gt; names = <span class="keyword">new</span> <span class="type">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        names.add(<span class="string">&quot;gareen&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(names);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二次插入同样的数据，是插不进去的，容器中只会保留一个</span></span><br><span class="line">        names.add(<span class="keyword">new</span> <span class="type">String</span>(<span class="string">&quot;gareen&quot;</span>));</span><br><span class="line">        System.out.println(names);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="没有顺序"><a href="#没有顺序" class="headerlink" title="没有顺序"></a>没有顺序</h4><p>Set中的元素，没有顺序。 严格的说，是没有按照元素的插入顺序排列</p>
<p>HashSet的具体顺序，既不是按照插入顺序，也不是按照hashcode的顺序。关于hashcode有专门的章节讲解: <a href="https://how2j.cn/k/collection/collection-hashcode/371.html">hashcode 原理</a>。</p>
<p>以下是<strong>HashSet源代码</strong>中的部分注释</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * It makes no guarantees as to the iteration order of the set; </span></span><br><span class="line"><span class="comment"> * in particular, it does not guarantee that the order will remain constant over time. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//不保证Set的迭代顺序; 确切的说，在不同条件下，元素的顺序都有可能不一样</span></span><br></pre></td></tr></table></figure>

<p>换句话说，同样是插入0-9到HashSet中， 在JVM的不同版本中，看到的顺序都是不一样的。 所以在开发的时候，不能依赖于某种<strong>臆测的顺序</strong>，这个顺序本身是<strong>不稳定的</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">package collection;</span><br><span class="line"></span><br><span class="line">import java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestCollection</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        HashSet&lt;Integer&gt; numbers = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        numbers.<span class="keyword">add</span>(<span class="number">99</span>);</span><br><span class="line">        numbers.<span class="keyword">add</span>(<span class="number">55</span>);</span><br><span class="line">        numbers.<span class="keyword">add</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set中的元素排列，不是按照插入顺序</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    [<span class="meta">1, 99, 55</span>]</span><br></pre></td></tr></table></figure>

<h4 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h4><p>Set不提供get()来获取指定位置的元素 所以遍历需要用到迭代器，或者增强型for循环</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestCollection &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        HashSet&lt;<span class="type">Integer</span>&gt; numbers = <span class="built_in">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            numbers.<span class="keyword">add</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //<span class="keyword">Set</span>不提供<span class="keyword">get</span>方法来获取指定位置的元素</span><br><span class="line">        //numbers.<span class="keyword">get</span>(<span class="number">0</span>)</span><br><span class="line">        //遍历<span class="keyword">Set</span>可以采用迭代器iterator</span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;<span class="type">Integer</span>&gt; iterator = numbers.iterator(); iterator.hasNext(); ) &#123;</span><br><span class="line">            <span class="type">Integer</span> i = iterator.next();</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //或者采用增强型<span class="keyword">for</span>循环</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Integer</span> i : numbers) &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="HashSet和HashMap的关系"><a href="#HashSet和HashMap的关系" class="headerlink" title="HashSet和HashMap的关系"></a>HashSet和HashMap的关系</h4><p>通过观察HashSet的源代码（<a href="https://how2j.cn/k/helloworld/helloworld-eclipse-tips/300.html#step706">如何查看源代码</a>） 可以发现HashSet自身并没有独立的实现，而是在里面封装了一个Map. HashSet是作为Map的key而存在的 而value是一个命名为PRESENT的static的Object对象，因为是一个类属性，所以只会有一个。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.AbstractSet;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSet</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractSet</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Set</span>&lt;E&gt;, Cloneable, java.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//HashSet里封装了一个HashMap</span></span><br><span class="line">    <span class="keyword">private</span>  HashMap&lt;E,Object&gt; map;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//HashSet的构造方法初始化这个HashMap</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;E,Object&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//向HashSet中增加元素，其实就是把该元素作为key，增加到Map中</span></span><br><span class="line">    <span class="comment">//value是PRESENT，静态，final的对象，所有的HashSet都使用这么同一个对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//HashSet的size就是map的size</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.size();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//清空Set就是清空Map</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        map.clear();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//迭代Set,就是把Map的键拿出来迭代</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.keySet().iterator();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><p>Collection是一个接口</p>
<p>Collection是 Set List Queue和 Deque的接口 Queue: 先进先出队列 Deque: 双向链表</p>
<p><strong>注：</strong>Collection和Map之间没有关系，Collection是放一个一个对象的，Map 是放键值对的 <strong>注：</strong>Deque 继承 Queue,间接的继承了 Collection</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220111181358186.png" alt="image-20220111181358186"></p>
<h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><p>Collections是一个类，容器的工具类,就如同Arrays是数组的工具类</p>
<h4 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h4><p><strong>reverse</strong> 使List中的数据发生翻转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCollection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//初始化集合numbers</span></span><br><span class="line">        List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            numbers.add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;集合中的数据:&quot;</span>);</span><br><span class="line">        System.out.println(numbers);</span><br><span class="line"></span><br><span class="line">        Collections.reverse(numbers);</span><br><span class="line">        System.out.println(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="混淆"><a href="#混淆" class="headerlink" title="混淆"></a>混淆</h4><p><strong>shuffle</strong> 混淆List中数据的顺序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCollection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//初始化集合numbers</span></span><br><span class="line">        List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            numbers.add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;集合中的数据:&quot;</span>);</span><br><span class="line">        System.out.println(numbers);</span><br><span class="line"></span><br><span class="line">        Collections.shuffle(numbers);</span><br><span class="line">        System.out.println(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="排序-1"><a href="#排序-1" class="headerlink" title="排序"></a>排序</h4><p><strong>sort</strong> 对List中的数据进行排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCollection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//初始化集合numbers</span></span><br><span class="line">        List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            numbers.add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;集合中的数据:&quot;</span>);</span><br><span class="line">        System.out.println(numbers);</span><br><span class="line"></span><br><span class="line">        Collections.shuffle(numbers);</span><br><span class="line">        System.out.println(numbers);</span><br><span class="line"></span><br><span class="line">        Collections.sort(numbers);</span><br><span class="line">        System.out.println(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h4><p><strong>swap</strong> 交换两个数据的位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCollection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//初始化集合numbers</span></span><br><span class="line">        List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            numbers.add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;集合中的数据:&quot;</span>);</span><br><span class="line">        System.out.println(numbers);</span><br><span class="line"></span><br><span class="line">        Collections.swap(numbers, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="滚动"><a href="#滚动" class="headerlink" title="滚动"></a>滚动</h4><p><strong>rotate</strong> 把List中的数据，向右滚动指定单位的长度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line">        <span class="keyword">import</span> java.util.Collection;</span><br><span class="line">        <span class="keyword">import</span> java.util.Collections;</span><br><span class="line">        <span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCollection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//初始化集合numbers</span></span><br><span class="line">        List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            numbers.add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;集合中的数据:&quot;</span>);</span><br><span class="line">        System.out.println(numbers);</span><br><span class="line"></span><br><span class="line">        Collections.rotate(numbers, <span class="number">2</span>);</span><br><span class="line">        System.out.println(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="线程安全化"><a href="#线程安全化" class="headerlink" title="线程安全化"></a>线程安全化</h4><p><strong>synchronizedList</strong> 把非线程安全的List转换为线程安全的List。 因为截至目前为止，还没有学习<a href="https://how2j.cn/k/thread/thread-synchronized/355.html#step793">线程安全</a>的内容，暂时不展开。 线程安全的内容将在<a href="https://how2j.cn/k/thread/thread-start/353.html">多线程</a>章节展开。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCollection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; synchronizedNumbers = (List&lt;Integer&gt;)Collections.synchronizedList(numbers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="关系与区别"><a href="#关系与区别" class="headerlink" title="关系与区别"></a>关系与区别</h2><h3 id="ArrayList-和-HasetSet"><a href="#ArrayList-和-HasetSet" class="headerlink" title="ArrayList 和 HasetSet"></a>ArrayList 和 HasetSet</h3><h4 id="是否有顺序"><a href="#是否有顺序" class="headerlink" title="是否有顺序"></a>是否有顺序</h4><p>ArrayList: 有顺序 HashSet: 无顺序</p>
<p>HashSet的具体顺序，既不是按照插入顺序，也不是按照hashcode的顺序。关于hashcode有专门的章节讲解: <a href="https://how2j.cn/k/collection/collection-hashcode/371.html">hashcode 原理</a>。</p>
<p>以下是<strong>HasetSet源代码</strong>中的部分注释</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * It makes no guarantees as to the iteration order of the set; </span></span><br><span class="line"><span class="comment"> * in particular, it does not guarantee that the order will remain constant over time. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//不保证Set的迭代顺序; 确切的说，在不同条件下，元素的顺序都有可能不一样</span></span><br></pre></td></tr></table></figure>

<p>换句话说，同样是插入0-9到HashSet中， 在JVM的不同版本中，看到的顺序都是不一样的。 所以在开发的时候，不能依赖于某种<strong>臆测的顺序</strong>，这个顺序本身是<strong>不稳定的</strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestCollection &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        ArrayList&lt;<span class="type">Integer</span>&gt; numberList = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        //List中的数据按照插入顺序存放</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;----------List----------&quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;向List 中插入 9 5 1&quot;);</span><br><span class="line">        numberList.<span class="keyword">add</span>(<span class="number">9</span>);</span><br><span class="line">        numberList.<span class="keyword">add</span>(<span class="number">5</span>);</span><br><span class="line">        numberList.<span class="keyword">add</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;List 按照顺序存放数据:&quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(numberList);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;----------Set----------&quot;);</span><br><span class="line">        HashSet&lt;<span class="type">Integer</span>&gt; numberSet = <span class="built_in">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;向Set 中插入9 5 1&quot;);</span><br><span class="line">        //<span class="keyword">Set</span>中的数据不是按照插入顺序存放</span><br><span class="line">        numberSet.<span class="keyword">add</span>(<span class="number">9</span>);</span><br><span class="line">        numberSet.<span class="keyword">add</span>(<span class="number">5</span>);</span><br><span class="line">        numberSet.<span class="keyword">add</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;Set 不是按照顺序存放数据:&quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(numberSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    <span class="comment">----------List----------</span></span><br><span class="line">    向List 中插入 <span class="number">9</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line">    List 按照顺序存放数据:</span><br><span class="line">    [<span class="number">9</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line">    <span class="comment">----------Set----------</span></span><br><span class="line">    向<span class="keyword">Set</span> 中插入<span class="number">9</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">Set</span> 不是按照顺序存放数据:</span><br><span class="line">    [<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure>

<h4 id="能否重复"><a href="#能否重复" class="headerlink" title="能否重复"></a>能否重复</h4><p>List中的数据可以重复 Set中的数据不能够重复 重复判断标准是: 首先看hashcode是否相同 如果hashcode不同，则认为是不同数据 如果hashcode相同，再比较equals，如果equals相同，则是相同数据，否则是不同数据 更多关系hashcode，请参考<a href="https://how2j.cn/k/collection/collection-hashcode/371.html">hashcode原理</a></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package collection;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestCollection &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">           </span><br><span class="line">        ArrayList&lt;<span class="type">Integer</span>&gt; numberList =<span class="built_in">new</span> ArrayList&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">        //List中的数据可以重复</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;----------List----------&quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;向List 中插入 9 9&quot;);</span><br><span class="line">        numberList.<span class="keyword">add</span>(<span class="number">9</span>);</span><br><span class="line">        numberList.<span class="keyword">add</span>(<span class="number">9</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;List 中出现两个9:&quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(numberList);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;----------Set----------&quot;);</span><br><span class="line">        HashSet&lt;<span class="type">Integer</span>&gt; numberSet =<span class="built_in">new</span> HashSet&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;向Set 中插入9 9&quot;);</span><br><span class="line">        //<span class="keyword">Set</span>中的数据不能重复</span><br><span class="line">        numberSet.<span class="keyword">add</span>(<span class="number">9</span>);</span><br><span class="line">        numberSet.<span class="keyword">add</span>(<span class="number">9</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;Set 中只会保留一个9:&quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(numberSet);</span><br><span class="line">           </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ArrayList-和-LinkedList"><a href="#ArrayList-和-LinkedList" class="headerlink" title="ArrayList 和 LinkedList"></a>ArrayList 和 LinkedList</h3><h4 id="ArrayList和LinkedList的区别"><a href="#ArrayList和LinkedList的区别" class="headerlink" title="ArrayList和LinkedList的区别"></a>ArrayList和LinkedList的区别</h4><p>ArrayList <strong>插入，删除数据慢</strong> LinkedList， <strong>插入，删除数据快</strong> ArrayList是顺序结构，所以<strong>定位很快</strong>，指哪找哪。 就像电影院位置一样，有了电影票，一下就找到位置了。 LinkedList 是链表结构，就像手里的一串佛珠，要找出第99个佛珠，必须得一个一个的数过去，所以<strong>定位慢</strong></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220111183737129.png" alt="image-20220111183737129"></p>
<h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCollection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; l;</span><br><span class="line">        l = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        insertFirst(l, <span class="string">&quot;ArrayList&quot;</span>);</span><br><span class="line"></span><br><span class="line">        l = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        insertFirst(l, <span class="string">&quot;LinkedList&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertFirst</span><span class="params">(List&lt;Integer&gt; l, String type)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">1000</span> * <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; total; i++) &#123;</span><br><span class="line">            l.add(<span class="number">0</span>, number);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.printf(<span class="string">&quot;在%s 最前面插入%d条数据，总共耗时 %d 毫秒 %n&quot;</span>, type, total, end - start);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    在ArrayList 最前面插入<span class="number">100000</span>条数据，总共耗时 <span class="number">1289</span> 毫秒 </span><br><span class="line">	在LinkedList 最前面插入<span class="number">100000</span>条数据，总共耗时 <span class="number">4</span> 毫秒 </span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h4 id="定位数据"><a href="#定位数据" class="headerlink" title="定位数据"></a>定位数据</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestCollection &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        List&lt;<span class="type">Integer</span>&gt; l;</span><br><span class="line">        l = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        modify(l, &quot;ArrayList&quot;);</span><br><span class="line"></span><br><span class="line">        l = <span class="built_in">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        modify(l, &quot;LinkedList&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static <span class="type">void</span> modify(List&lt;<span class="type">Integer</span>&gt; l, String <span class="keyword">type</span>) &#123;</span><br><span class="line">        <span class="type">int</span> total = <span class="number">100</span> * <span class="number">1000</span>;</span><br><span class="line">        <span class="type">int</span> <span class="keyword">index</span> = total/<span class="number">2</span>;</span><br><span class="line">        final <span class="type">int</span> number = <span class="number">5</span>;</span><br><span class="line">        //初始化</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; total; i++) &#123;</span><br><span class="line">            l.<span class="keyword">add</span>(number);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        long start = <span class="keyword">System</span>.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; total; i++) &#123;</span><br><span class="line">            <span class="type">int</span> n = l.<span class="keyword">get</span>(<span class="keyword">index</span>);</span><br><span class="line">            n++;</span><br><span class="line">            l.<span class="keyword">set</span>(<span class="keyword">index</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">        long end = <span class="keyword">System</span>.currentTimeMillis();</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.printf(&quot;%s总长度是%d，定位到第%d个数据，取出来，加1，再放回去%n 重复%d遍，总共耗时 %d 毫秒 %n&quot;, <span class="keyword">type</span>,total, <span class="keyword">index</span>,total, <span class="keyword">end</span> - <span class="keyword">start</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    ArrayList总长度是<span class="number">100000</span>，定位到第<span class="number">50000</span>个数据，取出来，加<span class="number">1</span>，再放回去</span><br><span class="line">     重复<span class="number">100000</span>遍，总共耗时 <span class="number">4</span> 毫秒 </span><br><span class="line"></span><br><span class="line">    LinkedList总长度是<span class="number">100000</span>，定位到第<span class="number">50000</span>个数据，取出来，加<span class="number">1</span>，再放回去</span><br><span class="line">     重复<span class="number">100000</span>遍，总共耗时 <span class="number">19169</span> 毫秒 </span><br></pre></td></tr></table></figure>

<h3 id="HashMap-和-Hashtable"><a href="#HashMap-和-Hashtable" class="headerlink" title="HashMap 和 Hashtable"></a>HashMap 和 Hashtable</h3><p>HashMap和Hashtable都实现了Map接口，都是键值对保存数据的方式 <strong>区别1：</strong> HashMap可以存放 null Hashtable不能存放null <strong>区别2：</strong> HashMap不是<a href="https://how2j.cn/k/thread/thread-synchronized/355.html#step793">线程安全的类</a> Hashtable是线程安全的类</p>
<p>鉴于目前学习的进度，不对线程安全做展开，在<a href="https://how2j.cn/k/thread/thread-start/353.html">线程章节</a>会详细讲解</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCollection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        <span class="comment">//HashMap和Hashtable都实现了Map接口，都是键值对保存数据的方式</span></span><br><span class="line">        HashMap&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; hashMap = <span class="keyword">new</span> <span class="type">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//HashMap可以用null作key,作value</span></span><br><span class="line">        hashMap.put(<span class="literal">null</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;123&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        Hashtable&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; hashtable = <span class="keyword">new</span> <span class="type">Hashtable</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//Hashtable不能用null作key，不能用null作value</span></span><br><span class="line">        <span class="comment">/*hashtable.put(null, &quot;123&quot;);</span></span><br><span class="line"><span class="comment">        hashtable.put(&quot;123&quot;, null);*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="几种Set"><a href="#几种Set" class="headerlink" title="几种Set"></a>几种Set</h3><h4 id="HashSet，LinkedHashSet，TreeSet"><a href="#HashSet，LinkedHashSet，TreeSet" class="headerlink" title="HashSet，LinkedHashSet，TreeSet"></a>HashSet，LinkedHashSet，TreeSet</h4><p>HashSet： 无序 LinkedHashSet： 按照插入顺序 TreeSet： 从小到大排序</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestCollection &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        HashSet&lt;<span class="type">Integer</span>&gt; numberSet1 =<span class="built_in">new</span> HashSet&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">        //HashSet中的数据不是按照插入顺序存放</span><br><span class="line">        numberSet1.<span class="keyword">add</span>(<span class="number">88</span>);</span><br><span class="line">        numberSet1.<span class="keyword">add</span>(<span class="number">8</span>);</span><br><span class="line">        numberSet1.<span class="keyword">add</span>(<span class="number">888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(numberSet1);</span><br><span class="line"></span><br><span class="line">        LinkedHashSet&lt;<span class="type">Integer</span>&gt; numberSet2 =<span class="built_in">new</span> LinkedHashSet&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">        //LinkedHashSet中的数据是按照插入顺序存放</span><br><span class="line">        numberSet2.<span class="keyword">add</span>(<span class="number">88</span>);</span><br><span class="line">        numberSet2.<span class="keyword">add</span>(<span class="number">8</span>);</span><br><span class="line">        numberSet2.<span class="keyword">add</span>(<span class="number">888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(numberSet2);</span><br><span class="line">        TreeSet&lt;<span class="type">Integer</span>&gt; numberSet3 =<span class="built_in">new</span> TreeSet&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">        //TreeSet 中的数据是进行了排序的</span><br><span class="line">        numberSet3.<span class="keyword">add</span>(<span class="number">88</span>);</span><br><span class="line">        numberSet3.<span class="keyword">add</span>(<span class="number">8</span>);</span><br><span class="line">        numberSet3.<span class="keyword">add</span>(<span class="number">888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(numberSet3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    [<span class="number">88</span>, <span class="number">8</span>, <span class="number">888</span>]</span><br><span class="line">    [<span class="number">88</span>, <span class="number">8</span>, <span class="number">888</span>]</span><br><span class="line">    [<span class="number">8</span>, <span class="number">88</span>, <span class="number">888</span>]</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="hashcode-原理"><a href="#hashcode-原理" class="headerlink" title="hashcode 原理"></a>hashcode 原理</h3><h4 id="List查找的低效率"><a href="#List查找的低效率" class="headerlink" title="List查找的低效率"></a>List查找的低效率</h4><p>假设在List中存放着无重复名称，没有顺序的2000000个Hero 要把名字叫做“hero 1000000”的对象找出来 List的做法是对每一个进行挨个遍历，直到找到名字叫做“hero 1000000”的英雄。 <strong>最差的情况下，需要遍历和比较2000000次</strong>，才能找到对应的英雄。 测试逻辑： \1. 初始化2000000个对象到ArrayList中 \2. 打乱容器中的数据顺序 \3. 进行10次查询，统计每一次消耗的时间 不同计算机的配置情况下，所花的时间是有区别的。 在本机上，花掉的时间大概是600毫秒左右</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCollection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">2000000</span>; j++) &#123;</span><br><span class="line">            <span class="type">Hero</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;Hero &quot;</span> + j);</span><br><span class="line">            heros.add(h);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进行10次查找，观察大体的平均值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 打乱heros中元素的顺序</span></span><br><span class="line">            Collections.shuffle(heros);</span><br><span class="line"></span><br><span class="line">            <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">target</span> <span class="operator">=</span> <span class="string">&quot;Hero 1000000&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Hero hero : heros) &#123;</span><br><span class="line">                <span class="keyword">if</span> (hero.name.equals(target)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;找到了 hero!&quot;</span> );</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="type">long</span> <span class="variable">elapsed</span> <span class="operator">=</span> end - start;</span><br><span class="line">            System.out.println(<span class="string">&quot;一共花了：&quot;</span> + elapsed + <span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    找到了 hero!</span><br><span class="line">    一共花了：<span class="number">55</span> 毫秒</span><br><span class="line">    找到了 hero!</span><br><span class="line">    一共花了：<span class="number">68</span> 毫秒</span><br><span class="line">    找到了 hero!</span><br><span class="line">    一共花了：<span class="number">40</span> 毫秒</span><br><span class="line">    找到了 hero!</span><br><span class="line">    一共花了：<span class="number">66</span> 毫秒</span><br><span class="line">    找到了 hero!</span><br><span class="line">    一共花了：<span class="number">9</span> 毫秒</span><br><span class="line">    找到了 hero!</span><br><span class="line">    一共花了：<span class="number">104</span> 毫秒</span><br><span class="line">    找到了 hero!</span><br><span class="line">    一共花了：<span class="number">88</span> 毫秒</span><br><span class="line">    找到了 hero!</span><br><span class="line">    一共花了：<span class="number">22</span> 毫秒</span><br><span class="line">    找到了 hero!</span><br><span class="line">    一共花了：<span class="number">43</span> 毫秒</span><br><span class="line">    找到了 hero!</span><br><span class="line">    一共花了：<span class="number">29</span> 毫秒</span><br></pre></td></tr></table></figure>

<h4 id="HashMap的性能表现"><a href="#HashMap的性能表现" class="headerlink" title="HashMap的性能表现"></a>HashMap的性能表现</h4><p>使用HashMap 做同样的查找 \1. 初始化2000000个对象到HashMap中。 \2. 进行10次查询 \3. 统计每一次的查询消耗的时间 可以观察到，几乎不花时间，花费的时间在1毫秒以内</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestCollection &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String,Hero&gt; heroMap = <span class="built_in">new</span> HashMap&lt;String,Hero&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2000000</span>; j++) &#123;</span><br><span class="line">            Hero h = <span class="built_in">new</span> Hero(&quot;Hero &quot; + j);</span><br><span class="line">            heroMap.put(h.name, h);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;数据准备完成&quot;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            long start = <span class="keyword">System</span>.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">            //查找名字是Hero <span class="number">1000000</span>的对象</span><br><span class="line">            Hero target = heroMap.<span class="keyword">get</span>(&quot;Hero 1000000&quot;);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;找到了 hero!&quot; + target.name);</span><br><span class="line"></span><br><span class="line">            long end = <span class="keyword">System</span>.currentTimeMillis();</span><br><span class="line">            long elapsed = <span class="keyword">end</span> - <span class="keyword">start</span>;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;一共花了：&quot; + elapsed + &quot; 毫秒&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    数据准备完成</span><br><span class="line">    找到了 hero!Hero <span class="number">1000000</span></span><br><span class="line">    一共花了：<span class="number">0</span> 毫秒</span><br><span class="line">    找到了 hero!Hero <span class="number">1000000</span></span><br><span class="line">    一共花了：<span class="number">0</span> 毫秒</span><br><span class="line">    找到了 hero!Hero <span class="number">1000000</span></span><br><span class="line">    一共花了：<span class="number">0</span> 毫秒</span><br><span class="line">    找到了 hero!Hero <span class="number">1000000</span></span><br><span class="line">    一共花了：<span class="number">0</span> 毫秒</span><br><span class="line">    找到了 hero!Hero <span class="number">1000000</span></span><br><span class="line">    一共花了：<span class="number">0</span> 毫秒</span><br><span class="line">    找到了 hero!Hero <span class="number">1000000</span></span><br><span class="line">    一共花了：<span class="number">0</span> 毫秒</span><br><span class="line">    找到了 hero!Hero <span class="number">1000000</span></span><br><span class="line">    一共花了：<span class="number">0</span> 毫秒</span><br><span class="line">    找到了 hero!Hero <span class="number">1000000</span></span><br><span class="line">    一共花了：<span class="number">0</span> 毫秒</span><br><span class="line">    找到了 hero!Hero <span class="number">1000000</span></span><br><span class="line">    一共花了：<span class="number">0</span> 毫秒</span><br><span class="line">    找到了 hero!Hero <span class="number">1000000</span></span><br><span class="line">    一共花了：<span class="number">0</span> 毫秒</span><br></pre></td></tr></table></figure>

<h4 id="HashMap原理与字典"><a href="#HashMap原理与字典" class="headerlink" title="HashMap原理与字典"></a>HashMap原理与字典</h4><p>在展开HashMap原理的讲解之前，首先回忆一下大家初中和高中使用的汉英字典。</p>
<p>比如要找一个单词对应的中文意思，假设单词是Lengendary,首先在目录找到Lengendary在第 555页。</p>
<p>然后，翻到第555页，这页不只一个单词，但是量已经很少了，逐一比较，很快就定位目标单词Lengendary。</p>
<p>555相当于就是Lengendary对应的<strong>hashcode</strong></p>
<h4 id="分析HashMap性能卓越的原因"><a href="#分析HashMap性能卓越的原因" class="headerlink" title="分析HashMap性能卓越的原因"></a>分析HashMap性能卓越的原因</h4><p><strong>—–hashcode概念—–</strong> 所有的对象，都有一个对应的<strong>hashcode（散列值）</strong> 比如字符串“gareen”对应的是1001 (实际上不是，这里是方便理解，假设的值) 比如字符串“temoo”对应的是1004 比如字符串“db”对应的是1008 比如字符串“annie”对应的**也**<strong>是1008</strong></p>
<p><strong>—–保存数据—–</strong> 准备一个数组，其长度是2000，并且设定特殊的hashcode算法，使得所有字符串对应的hashcode，都会落在0-1999之间 要存放名字是”gareen”的英雄，就把该英雄和名称组成一个<strong>键值对</strong>，存放在数组的1001这个位置上 要存放名字是”temoo”的英雄，就把该英雄存放在数组的1004这个位置上 要存放名字是”db”的英雄，就把该英雄存放在数组的1008这个位置上 要存放名字是”annie”的英雄，然而 “annie”的hashcode 1008对应的位置<strong>已经有db英雄了</strong>，那么就在这里创建一个链表，<strong>接在db英雄后面存放annie</strong></p>
<p><strong>—–查找数据—–</strong> 比如要查找gareen，首先计算”gareen”的hashcode是1001，根据1001这个下标，到数组中进行定位，（<strong>根据数组下标进行定位，是非常快速的</strong>） 发现1001这个位置就只有一个英雄，那么该英雄就是gareen. 比如要查找annie，首先计算”annie”的hashcode是1008，根据1008这个下标，到数组中进行定位，发现1008这个位置<strong>有两个英雄</strong>，那么就对两个英雄的名字进行逐一比较(<strong>equals</strong>)，因为此时需要比较的量就已经少很多了，很快也就可以找出目标英雄 这就是使用hashmap进行查询，非常快原理。</p>
<p>这是一种用<strong>空间换时间</strong>的思维方式</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220111191305319.png" alt="image-20220111191305319"></p>
<h4 id="HashSet判断是否重复"><a href="#HashSet判断是否重复" class="headerlink" title="HashSet判断是否重复"></a>HashSet判断是否重复</h4><p>HashSet的数据是不能重复的，相同数据不能保存在一起，到底如何判断是否是重复的呢？ 根据<a href="https://how2j.cn/k/collection/collection-hashset/364.html#step825">HashSet和HashMap的关系</a>，我们了解到因为HashSet没有自身的实现，而是里面封装了一个HashMap，所以本质上就是判断HashMap的key是否重复。</p>
<p>再通过上一步的学习，key是否重复，是由两个步骤判断的： hashcode是否一样 如果hashcode不一样，就是在<strong>不同的坑里</strong>，一定是不重复的 如果hashcode一样，就是在<strong>同一个坑里</strong>，还需要进行equals比较 如果equals一样，则是重复数据 如果equals不一样，则是不同数据。</p>
<h3 id="比较器"><a href="#比较器" class="headerlink" title="比较器"></a>比较器</h3><h4 id="Comparator"><a href="#Comparator" class="headerlink" title="Comparator"></a>Comparator</h4><p>假设Hero有三个属性 name,hp,damage 一个集合中放存放10个Hero,通过Collections.sort对这10个进行排序 那么<strong>到底是hp小的放前面？还是damage小的放前面？</strong>Collections.sort也无法确定 所以要指定到底按照哪种属性进行排序 这里就需要提供一个Comparator给定如何进行两个对象之间的<strong>大小</strong>比较</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> LOL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> hp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> damage;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hero</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hero</span><span class="params">(String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hero&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, hp=&quot;</span> + hp +</span><br><span class="line">                <span class="string">&quot;, damage=&quot;</span> + damage +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hero</span><span class="params">(String name, <span class="type">float</span> hp, <span class="type">int</span> damage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.hp = hp;</span><br><span class="line">        <span class="built_in">this</span>.damage = damage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCollection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//通过随机值实例化hero的hp和damage</span></span><br><span class="line">            heros.add(<span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;hero &quot;</span> + i, r.nextInt(<span class="number">100</span>), r.nextInt(<span class="number">100</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化后的集合：&quot;</span>);</span><br><span class="line">        System.out.println(heros);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接调用sort会出现编译错误，因为Hero有各种属性</span></span><br><span class="line">        <span class="comment">//到底按照哪种属性进行比较，Collections也不知道，不确定，所以没法排</span></span><br><span class="line">        <span class="comment">//Collections.sort(heros);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//引入Comparator，指定比较的算法</span></span><br><span class="line">        Comparator&lt;Hero&gt; c = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Hero&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Hero h1, Hero h2)</span> &#123;</span><br><span class="line">                <span class="comment">//按照hp进行排序</span></span><br><span class="line">                <span class="keyword">if</span> (h1.hp &gt;= h2.hp) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//正数表示h1比h2要大</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Collections.sort(heros, c);</span><br><span class="line">        System.out.println(<span class="string">&quot;按照血量排序后的集合：&quot;</span>);</span><br><span class="line">        System.out.println(heros);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h4><p>使Hero类实现Comparable接口 在类里面提供比较算法 Collections.sort就有足够的信息进行排序了，也无需额外提供比较器Comparator <strong>注：</strong> 如果返回-1, 就表示当前的更小，否则就是更大</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> LOL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Hero&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> hp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> damage;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hero</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hero</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name =name;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hero</span><span class="params">(String name, <span class="type">float</span> hp, <span class="type">int</span> damage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.hp = hp;</span><br><span class="line">        <span class="built_in">this</span>.damage = damage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hero&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, hp=&quot;</span> + hp +</span><br><span class="line">                <span class="string">&quot;, damage=&quot;</span> + damage +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Hero anotherHero)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (damage &lt; anotherHero.damage) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCollection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//通过随机值实例化hero的hp和damage</span></span><br><span class="line">            heros.add(<span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;hero &quot;</span> + i, r.nextInt(<span class="number">100</span>), r.nextInt(<span class="number">100</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化后的集合：&quot;</span>);</span><br><span class="line">        System.out.println(heros);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Hero类实现了接口Comparable，即自带比较信息。</span></span><br><span class="line">        <span class="comment">//Collections直接进行排序，无需额外的Comparator</span></span><br><span class="line">        Collections.sort(heros);</span><br><span class="line">        System.out.println(<span class="string">&quot;按照伤害高低排序后的集合: &quot;</span>);</span><br><span class="line">        System.out.println(heros);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="聚合操作"><a href="#聚合操作" class="headerlink" title="聚合操作"></a>聚合操作</h3><h4 id="聚合操作-1"><a href="#聚合操作-1" class="headerlink" title="聚合操作"></a>聚合操作</h4><p>JDK8之后，引入了对集合的聚合操作，可以非常容易的遍历，筛选，比较集合中的元素。</p>
<p>像这样：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> name =heros</span><br><span class="line">    .stream()</span><br><span class="line">    .sorted<span class="function"><span class="params">((h1,h2)-&gt;h1.hp&gt;h2.hp?-<span class="number">1</span>:<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">    .<span class="title">skip</span><span class="params">(<span class="number">2</span>)</span></span></span><br><span class="line"><span class="function">    .<span class="title">map</span><span class="params">(h-&gt;h.getName())</span></span></span><br><span class="line"><span class="function">    .<span class="title">findFirst</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    .<span class="title">get</span><span class="params">()</span>;</span></span><br></pre></td></tr></table></figure>

<p>但是要用好聚合，必须先掌握<a href="https://how2j.cn/k/lambda/lambda-lamdba-tutorials/697.html">Lambda表达式</a>，聚合的章节讲放在<a href="https://how2j.cn/k/lambda/lambda-stream/700.html">Lambda与聚合操作</a>部分详细讲解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> LOL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Hero&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> hp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> damage;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hero</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hero</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name =name;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hero</span><span class="params">(String name, <span class="type">float</span> hp, <span class="type">int</span> damage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.hp = hp;</span><br><span class="line">        <span class="built_in">this</span>.damage = damage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hero&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, hp=&quot;</span> + hp +</span><br><span class="line">                <span class="string">&quot;, damage=&quot;</span> + damage +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Hero anotherHero)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (damage &lt; anotherHero.damage) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAggregate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            heros.add(<span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;hero &quot;</span> + i, r.nextInt(<span class="number">1000</span>), r.nextInt(<span class="number">100</span>)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;初始化集合后的数据 (最后一个数据重复)：&quot;</span>);</span><br><span class="line">        System.out.println(heros);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//传统方式</span></span><br><span class="line">        Collections.sort(heros,<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Hero&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Hero o1, Hero o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="type">int</span>) (o2.hp-o1.hp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Hero</span> <span class="variable">hero</span> <span class="operator">=</span> heros.get(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;通过传统方式找出来的hp第三高的英雄名称是:&quot;</span> + hero.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//聚合方式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span>heros</span><br><span class="line">                .stream()</span><br><span class="line">                .sorted((h1,h2)-&gt;h1.hp&gt;h2.hp?-<span class="number">1</span>:<span class="number">1</span>)</span><br><span class="line">                .skip(<span class="number">2</span>)</span><br><span class="line">                .map(h-&gt;h.getName())</span><br><span class="line">                .findFirst()</span><br><span class="line">                .get();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;通过聚合操作找出来的hp第三高的英雄名称是:&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="集合中的泛型"><a href="#集合中的泛型" class="headerlink" title="集合中的泛型"></a>集合中的泛型</h2><h3 id="不使用泛型"><a href="#不使用泛型" class="headerlink" title="不使用泛型"></a>不使用泛型</h3><p>不使用泛型带来的问题 ADHero（物理攻击英雄） APHero（魔法攻击英雄）都是Hero的子类 ArrayList 默认接受Object类型的对象，所以所有对象都可以放进ArrayList中 所以get(0) <strong>返回的类型是Object</strong> 接着，需要进行强制转换才可以得到APHero类型或者ADHero类型。 如果软件开发人员记忆比较好，能<strong>记得哪个是哪个</strong>，还是可以的。 但是开发人员会犯错误，比如第20行，会记错，把第0个对象转换为ADHero,这样就会出现类型转换异常</p>
<h3 id="使用泛型"><a href="#使用泛型" class="headerlink" title="使用泛型"></a>使用泛型</h3><p>使用泛型的好处： 泛型的用法是在容器后面添加<Type> Type可以是类，抽象类，接口 泛型表示这种容器，<strong>只能存放APHero</strong>，ADHero就放不进去了。</p>
<h3 id="子类对象"><a href="#子类对象" class="headerlink" title="子类对象"></a>子类对象</h3><p>假设容器的泛型是Hero,那么<strong>Hero的子类</strong>APHero,ADHero<strong>都可以放进去</strong> 和Hero无关的类型Item还是放不进去</p>
<h3 id="泛型的简写-1"><a href="#泛型的简写-1" class="headerlink" title="泛型的简写"></a>泛型的简写</h3><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Hero&gt; heros2 <span class="operator">=</span> new ArrayList&lt;&gt;()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="支持泛型的类"><a href="#支持泛型的类" class="headerlink" title="支持泛型的类"></a>支持泛型的类</h2><h3 id="不支持泛型的Stack"><a href="#不支持泛型的Stack" class="headerlink" title="不支持泛型的Stack"></a>不支持泛型的Stack</h3><p>以<a href="https://how2j.cn/k/collection/collection-linkedlist/370.html#step2475">Stack栈</a>为例子，如果不使用泛型 当需要一个只能放Hero的栈的时候，就需要设计一个HeroStack 当需要一个只能放Item的栈的时候，就需要一个ItemStack</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeroStack</span> &#123;</span><br><span class="line">    LinkedList&lt;Hero&gt; heros = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Hero h)</span> &#123;</span><br><span class="line">        heros.addLast(h);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Hero <span class="title function_">pull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> heros.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Hero <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> heros.getLast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HeroStack</span> <span class="variable">heroStack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroStack</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="type">Hero</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;hero name &quot;</span> + i);</span><br><span class="line">            System.out.println(<span class="string">&quot;压入 hero:&quot;</span> + h);</span><br><span class="line">            heroStack.push(h);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="type">Hero</span> <span class="variable">h</span> <span class="operator">=</span>heroStack.pull();</span><br><span class="line">            System.out.println(<span class="string">&quot;弹出 hero:&quot;</span> + h);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="支持泛型的Stack"><a href="#支持泛型的Stack" class="headerlink" title="支持泛型的Stack"></a>支持泛型的Stack</h3><p>设计一个支持泛型的栈MyStack 设计这个类的时候，在类的声明上，加上一个<T>，表示该类支持泛型。 T是type的缩写，也可以使用任何其他的合法的变量，比如A,B,X都可以，但是一般约定成俗使用T，代表类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">LOL</span>.<span class="property">Hero</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">LOL</span>.<span class="property">Item</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">LinkedList</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStack</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">LinkedList</span>&lt;T&gt; values = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">push</span>(<span class="params">T t</span>) &#123;</span><br><span class="line">        values.<span class="title function_">addLast</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">pull</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> values.<span class="title function_">removeLast</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">peek</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> values.<span class="title function_">getLast</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        <span class="comment">//在声明这个Stack的时候，使用泛型&lt;Hero&gt;就表示该Stack只能放Hero</span></span><br><span class="line">        <span class="title class_">MyStack</span>&lt;<span class="title class_">Hero</span>&gt; heroMyStack = <span class="keyword">new</span> <span class="title class_">MyStack</span>&lt;&gt;();</span><br><span class="line">        heroMyStack.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">Hero</span>());</span><br><span class="line">        <span class="comment">//不能放Item</span></span><br><span class="line">        <span class="comment">//heroMyStack.push(Item);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//在声明这个Stack的时候，使用泛型&lt;Item&gt;就表示该Stack只能放Item</span></span><br><span class="line">        <span class="title class_">MyStack</span>&lt;<span class="title class_">Item</span>&gt; itemStack = <span class="keyword">new</span> <span class="title class_">MyStack</span>&lt;&gt;();</span><br><span class="line">        itemStack.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">Item</span>());</span><br><span class="line">        <span class="comment">//不能放Hero</span></span><br><span class="line">        <span class="comment">//itemStack.push(new Hero());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><h3 id="extends"><a href="#extends" class="headerlink" title="? extends"></a>? extends</h3><p>ArrayList heroList&lt;? extends Hero&gt; 表示这是一个Hero泛型或者其子类泛型 heroList 的泛型可能是Hero heroList 的泛型可能是APHero heroList 的泛型可能是ADHero 所以 可以确凿的是，<strong>从heroList取出来的对象，一定是可以转型成Hero的</strong></p>
<p>但是，不能往里面放东西，因为 放APHero就不满足<ADHero> 放ADHero又不满足<APHero></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220111212918775.png" alt="image-20220111212918775"></p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.ADHero;</span><br><span class="line"><span class="keyword">import</span> LOL.APHero;</span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGeneric</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;APHero&gt; apHeroList = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;APHero&gt;();</span><br><span class="line">        apHeroList.add(<span class="keyword">new</span> <span class="type">APHero</span>());</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;? extends Hero&gt; heroList = apHeroList;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//? extends Hero 表示这是一个Hero泛型的子类泛型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//heroList 的泛型可以是Hero</span></span><br><span class="line">        <span class="comment">//heroList 的泛型可以使APHero</span></span><br><span class="line">        <span class="comment">//heroList 的泛型可以使ADHero</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以确凿的是，从heroList取出来的对象，一定是可以转型成Hero的</span></span><br><span class="line"></span><br><span class="line">        Hero h= heroList.<span class="keyword">get</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//但是，不能往里面放东西</span></span><br><span class="line">        <span class="comment">//heroList.add(new ADHero()); //编译错误，因为heroList的泛型 有可能是APHero</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="super-1"><a href="#super-1" class="headerlink" title="? super"></a>? super</h3><p>ArrayList heroList&lt;? super Hero&gt; 表示这是一个Hero泛型或者其父类泛型 heroList的泛型可能是Hero heroList的泛型可能是Object</p>
<p><strong>可以往里面插入Hero以及Hero的子类</strong> 但是取出来有风险，因为不确定取出来是Hero还是Object</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220111213514036.png" alt="image-20220111213514036"></p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.ADHero;</span><br><span class="line"><span class="keyword">import</span> LOL.APHero;</span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGeneric</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;? <span class="keyword">super</span> Hero&gt; heroList = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;Object&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//? super Hero 表示 heroList的泛型是Hero或者其父类泛型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//heroList 的泛型可以是Hero</span></span><br><span class="line">        <span class="comment">//heroList 的泛型可以是Object</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//所以就可以插入Hero</span></span><br><span class="line">        heroList.add(<span class="keyword">new</span> <span class="type">Hero</span>());</span><br><span class="line">        <span class="comment">//也可以插入Hero的子类</span></span><br><span class="line">        heroList.add(<span class="keyword">new</span> <span class="type">APHero</span>());</span><br><span class="line">        heroList.add(<span class="keyword">new</span> <span class="type">ADHero</span>());</span><br><span class="line">        <span class="comment">//不能插入Object</span></span><br><span class="line">        heroList.add(<span class="keyword">new</span> <span class="type">Object</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//但是，不能从里面取数据出来,因为其泛型可能是Object,而Object是强转Hero会失败</span></span><br><span class="line">        <span class="comment">//Hero h = heroList.get(0);</span></span><br><span class="line">        <span class="comment">//可以这样取出来</span></span><br><span class="line">        Object h = heroList.<span class="keyword">get</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符?"></a>泛型通配符?</h3><p>泛型通配符? 代表任意泛型 既然?代表任意泛型，那么换句话说，这个容器什么泛型都有可能</p>
<p>所以只能以Object的形式取出来 并且不能往里面放对象，因为不知道到底是一个什么泛型的容器</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220111213719183.png" alt="image-20220111213719183"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.ADHero;</span><br><span class="line"><span class="keyword">import</span> LOL.APHero;</span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"><span class="keyword">import</span> LOL.Item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestGeneric</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;APHero&gt; apHeroList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;APHero&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//?泛型通配符，表示任意泛型</span></span><br><span class="line">        ArrayList&lt;?&gt; generalList = apHeroList;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//?的缺陷1： 既然?代表任意泛型，那么换句话说，你就不知道这个容器里面是什么类型</span></span><br><span class="line">        <span class="comment">//所以只能以Object的形式取出来</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> generalList.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//?的缺陷2： 既然?代表任意泛型，那么既有可能是Hero,也有可能是Item</span></span><br><span class="line">        <span class="comment">//所以，放哪种对象进去，都有风险，结果就什么什么类型的对象，都不能放进去</span></span><br><span class="line">        <span class="comment">//generalList.add(new Item()); //编译错误 因为?代表任意泛型，很有可能不是Item</span></span><br><span class="line">        <span class="comment">//generalList.add(new Hero()); //编译错误 因为?代表任意泛型，很有可能不是Hero</span></span><br><span class="line">        <span class="comment">//generalList.add(new APHero()); //编译错误  因为?代表任意泛型，很有可能不是APHero</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果希望只取出，不插入，就使用? extends Hero 如果希望只插入，不取出，就使用? super Hero 如果希望，又能插入，又能取出，就不要用通配符？</p>
<h2 id="泛型转型"><a href="#泛型转型" class="headerlink" title="泛型转型"></a>泛型转型</h2><h3 id="对象转型-1"><a href="#对象转型-1" class="headerlink" title="对象转型"></a>对象转型</h3><p>根据面向对象学习的知识，<a href="https://how2j.cn/k/interface-inheritance/interface-inheritance-casting/308.html#step624">子类转父类</a> 是一定可以成功的</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.ADHero;</span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGeneric</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        Hero h = <span class="keyword">new</span> <span class="type">Hero</span>();</span><br><span class="line">        ADHero ad = <span class="keyword">new</span> <span class="type">ADHero</span>();</span><br><span class="line">        <span class="comment">//子类转父类</span></span><br><span class="line">        h = ad;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="子类泛型转父类泛型"><a href="#子类泛型转父类泛型" class="headerlink" title="子类泛型转父类泛型"></a>子类泛型转父类泛型</h3><p>既然 子类对象 转 父类对象是可以成功的，那么子类泛型转父类泛型能成功吗？ 如代码 hs的泛型是父类Hero adhs 的泛型是子类ADHero</p>
<p>那么 把adhs转换为hs能成功吗？</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.ADHero;</span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGeneric</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        ArrayList&lt;Hero&gt; hs = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;ADHero&gt; adhs = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//子类泛型转父类泛型</span></span><br><span class="line">        hs = adhs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="假设可以转型成功"><a href="#假设可以转型成功" class="headerlink" title="假设可以转型成功"></a>假设可以转型成功</h3><p>假设可以转型成功 引用hs指向了ADHero泛型的容器 作为Hero泛型的引用hs, 看上去是可以往里面加一个APHero的。 但是hs这个引用，实际上是指向的一个ADHero泛型的容器 如果能加进去，就变成了ADHero泛型的容器里放进了APHero，这就矛盾了</p>
<p>所以子类泛型<strong>不可以</strong>转换为父类泛型</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220111214809488.png" alt="image-20220111214809488"></p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.ADHero;</span><br><span class="line"><span class="keyword">import</span> LOL.APHero;</span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGeneric</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        ArrayList&lt;Hero&gt; hs = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;ADHero&gt; adhs = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//假设能转换成功</span></span><br><span class="line">        hs = adhs;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//作为Hero泛型的hs,是可以向其中加入APHero的</span></span><br><span class="line">        <span class="comment">//但是hs这个引用，实际上是指向的一个ADHero泛型的容器</span></span><br><span class="line">        <span class="comment">//如果能加进去，就变成了ADHero泛型的容器里放进了APHero，这就矛盾了</span></span><br><span class="line">        hs.add(<span class="keyword">new</span> <span class="type">APHero</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h1><h2 id="Hello-Lambda"><a href="#Hello-Lambda" class="headerlink" title="Hello Lambda"></a>Hello Lambda</h2><h3 id="普通方法"><a href="#普通方法" class="headerlink" title="普通方法"></a>普通方法</h3><p>使用一个普通方法，在for循环遍历中进行条件判断，筛选出满足条件的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> LOL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Hero&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> hp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> damage;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hero</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hero</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name =name;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hero</span><span class="params">(String name, <span class="type">float</span> hp, <span class="type">int</span> damage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.hp = hp;</span><br><span class="line">        <span class="built_in">this</span>.damage = damage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hero&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, hp=&quot;</span> + hp +</span><br><span class="line">                <span class="string">&quot;, damage=&quot;</span> + damage +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Hero anotherHero)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (damage &lt; anotherHero.damage) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambda</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            heros.add(<span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;hero &quot;</span> + i, r.nextInt(<span class="number">1000</span>), r.nextInt(<span class="number">100</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化后的集合：&quot;</span>);</span><br><span class="line">        System.out.println(heros);</span><br><span class="line">        System.out.println(<span class="string">&quot;筛选出 hp&gt;100 &amp;&amp; damange&lt;50的英雄&quot;</span>);</span><br><span class="line">        filter(heros);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">filter</span><span class="params">(List&lt;Hero&gt; heros)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Hero hero : heros) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hero.hp &gt; <span class="number">100</span> &amp;&amp; hero.damage &lt; <span class="number">50</span>) &#123;</span><br><span class="line">                System.out.println(hero);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="匿名类方式"><a href="#匿名类方式" class="headerlink" title="匿名类方式"></a>匿名类方式</h3><p>首先准备一个接口HeroChecker，提供一个test(Hero)方法 然后通过匿名类的方式，实现这个接口</p>
<p>接着调用filter，传递这个checker进去进行判断，这种方式就很像通过Collections.sort在对一个Hero集合排序，需要传一个<a href="https://how2j.cn/k/collection/collection-comparator-comparable/693.html#step828">Comparator</a>的匿名类对象进去一样。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HeroChecker</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Hero h)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambda</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heros.add(<span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;hero &quot;</span> + i, r.nextInt(<span class="number">1000</span>), r.nextInt(<span class="number">100</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化后的集合：&quot;</span>);</span><br><span class="line">        System.out.println(heros);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用匿名类的方式，筛选出 hp&gt;100 &amp;&amp; damange&lt;50的英雄&quot;</span>);</span><br><span class="line">        <span class="type">HeroChecker</span> <span class="variable">checker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroChecker</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Hero h)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> (h.hp &gt; <span class="number">100</span> &amp;&amp; h.damage &lt; <span class="number">50</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        filter(heros, checker);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">filter</span><span class="params">(List&lt;Hero&gt; heros, HeroChecker checker)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Hero hero : heros) &#123;</span><br><span class="line">            <span class="keyword">if</span> (checker.test(hero)) &#123;</span><br><span class="line">                System.out.println(hero);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Lambda方式"><a href="#Lambda方式" class="headerlink" title="Lambda方式"></a>Lambda方式</h3><p>使用Lambda方式筛选出数据</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">filter(heros,<span class="function"><span class="params">(h)</span>-&gt;</span>h.hp&gt;<span class="number">100</span> &amp;&amp; h.damage&lt;<span class="number">50</span>);</span><br></pre></td></tr></table></figure>

<p>同样是调用filter方法，从上一步的传递匿名类对象，变成了传递一个Lambda表达式进去</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">h</span>-&gt;h.hp&gt;<span class="number">100</span> &amp;&amp; h.damage&lt;<span class="number">50</span></span><br></pre></td></tr></table></figure>

<p>咋一看Lambda表达式似乎不好理解，其实很简单，下一步讲解如何从一个匿名类一点点<strong>演变成</strong>Lambda表达式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambda</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heros.add(<span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;hero &quot;</span> + i, r.nextInt(<span class="number">1000</span>), r.nextInt(<span class="number">100</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化后的集合：&quot;</span>);</span><br><span class="line">        System.out.println(heros);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用Lamdba的方式，筛选出 hp&gt;100 &amp;&amp; damange&lt;50的英雄&quot;</span>);</span><br><span class="line">        filter(heros, h-&gt;h.hp &gt; <span class="number">100</span> &amp;&amp; h.damage &lt; <span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">filter</span><span class="params">(List&lt;Hero&gt; heros, HeroChecker checker)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Hero hero : heros) &#123;</span><br><span class="line">            <span class="keyword">if</span> (checker.test(hero)) &#123;</span><br><span class="line">                System.out.println(hero);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="从匿名类演变成Lambda表达式"><a href="#从匿名类演变成Lambda表达式" class="headerlink" title="从匿名类演变成Lambda表达式"></a>从匿名类演变成Lambda表达式</h3><p>Lambda表达式可以看成是匿名类一点点<strong>演变过来</strong></p>
<p>1.匿名类的正常写法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HeroChecker</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroChecker</span>() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Hero h)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (h.hp&gt;<span class="number">100</span> &amp;&amp; h.damage&lt;<span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>2.把外面的壳子去掉 只保留<strong>方法参数</strong>和<strong>方法体</strong> 参数和方法体之间加上符号 <strong>-&gt;</strong></p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">HeroChecker c2 = <span class="function"><span class="params">(Hero h)</span> -&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> h.hp&gt;<span class="number">100</span> &amp;&amp; h.damage&lt;<span class="number">50</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>3.把return和{}去掉</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">HeroChecker c3 = <span class="function"><span class="params">(Hero h)</span> -&gt;</span>h.hp&gt;<span class="number">100</span> &amp;&amp; h.damage&lt;<span class="number">50</span>;</span><br></pre></td></tr></table></figure>

<p>4.把 参数类型和圆括号去掉(只有一个参数的时候，才可以去掉圆括号)</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">HeroChecker</span> c4 = h -&gt;h.hp&gt;<span class="number">100</span> &amp;&amp; h.damage&lt;<span class="number">50</span>;</span><br></pre></td></tr></table></figure>

<p>5.把c4作为参数传递进去</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">filter</span>(heros<span class="punctuation">,</span><span class="keyword">c</span><span class="number">4</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>6.直接把表达式传递进去</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">filter</span>(heros, h -&gt; h.hp &gt; <span class="number">100</span> &amp;&amp; h.damage &lt; <span class="number">50</span>);</span><br></pre></td></tr></table></figure>

<h3 id="匿名方法"><a href="#匿名方法" class="headerlink" title="匿名方法"></a>匿名方法</h3><p>与<a href="https://how2j.cn/k/interface-inheritance/interface-inheritance-inner-class/322.html#step687">匿名类</a> 概念相比较， Lambda 其实就是<strong>匿名方法</strong>，这是一种<strong>把方法作为参数</strong>进行传递的编程思想。</p>
<p>虽然代码是这么写</p>
<p>但是，Java会在背后，悄悄的，把这些都还原成<a href="https://how2j.cn/k/lambda/lambda-lamdba-tutorials/697.html#step2552">匿名类方式</a>。 引入Lambda表达式，会使得代码更加紧凑，而不是各种接口和匿名类到处飞。</p>
<h3 id="Lambda的弊端"><a href="#Lambda的弊端" class="headerlink" title="Lambda的弊端"></a>Lambda的弊端</h3><p>Lambda表达式虽然带来了代码的简洁，但是也有其局限性。 \1. 可读性差，与<strong>啰嗦的</strong>但是<strong>清晰的</strong>匿名类代码结构比较起来，Lambda表达式一旦变得比较长，就难以理解 \2. 不便于调试，很难在Lambda表达式中增加调试信息，比如日志 \3. 版本支持，Lambda表达式在JDK8版本中才开始支持，如果系统使用的是以前的版本，考虑系统的稳定性等原因，而不愿意升级，那么就无法使用。</p>
<p>Lambda比较适合用在简短的业务代码中，并不适合用在复杂的系统中，会加大维护成本。</p>
<h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><h3 id="引用静态方法"><a href="#引用静态方法" class="headerlink" title="引用静态方法"></a>引用静态方法</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestLambda &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        Random r = <span class="built_in">new</span> Random();</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heros.<span class="keyword">add</span>(<span class="built_in">new</span> Hero(&quot;hero &quot; + i, r.nextInt(<span class="number">1000</span>), r.nextInt(<span class="number">100</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;初始化后的集合：&quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(heros);</span><br><span class="line"></span><br><span class="line">        HeroChecker c = <span class="built_in">new</span> HeroChecker() &#123;</span><br><span class="line">            <span class="built_in">public</span> <span class="type">boolean</span> test(Hero h) &#123;</span><br><span class="line">                <span class="keyword">return</span> h.hp&gt;<span class="number">100</span> &amp;&amp; h.damage&lt;<span class="number">50</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;使用匿名类过滤&quot;);</span><br><span class="line">        <span class="keyword">filter</span>(heros, c);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;使用Lambda表达式&quot;);</span><br><span class="line">        <span class="keyword">filter</span>(heros, h-&gt;h.hp&gt;<span class="number">100</span> &amp;&amp; h.damage&lt;<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;在Lambda表达式中使用静态方法&quot;);</span><br><span class="line">        <span class="keyword">filter</span>(heros, h -&gt; TestLambda.testHero(h));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;直接引用静态方法&quot;);</span><br><span class="line">        <span class="keyword">filter</span>(heros, TestLambda::testHero);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static <span class="type">boolean</span> testHero(Hero h) &#123;</span><br><span class="line">        <span class="keyword">return</span> h.hp&gt;<span class="number">100</span> &amp;&amp; h.damage&lt;<span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static <span class="type">void</span> <span class="keyword">filter</span>(List&lt;Hero&gt; heros, HeroChecker checker) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Hero hero : heros) &#123;</span><br><span class="line">            <span class="keyword">if</span> (checker.test(hero)) &#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(hero);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="引用对象方法"><a href="#引用对象方法" class="headerlink" title="引用对象方法"></a>引用对象方法</h3><p>与引用静态方法很类似，只是传递方法的时候，需要一个对象的存在</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">TestLambda testLambda = new TestLambda()<span class="comment">;</span></span><br><span class="line">filter(<span class="name">heros</span>, testLambda:<span class="symbol">:testHero</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>这种方式叫做<strong>引用对象方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambda</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heros.add(<span class="keyword">new</span> <span class="title class_">Hero</span>(<span class="string">&quot;hero &quot;</span> + i, r.nextInt(<span class="number">1000</span>), r.nextInt(<span class="number">100</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化后的集合：&quot;</span>);</span><br><span class="line">        System.out.println(heros);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;使用引用对象方法  的过滤结果：&quot;</span>);</span><br><span class="line">        <span class="comment">//使用类的对象方法</span></span><br><span class="line">        <span class="type">TestLambda</span> <span class="variable">testLambda</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestLambda</span>();</span><br><span class="line">        filter(heros, testLambda::testHero);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">testHero</span><span class="params">(Hero h)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> h.hp&gt;<span class="number">100</span> &amp;&amp; h.damage&lt;<span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">filter</span><span class="params">(List&lt;Hero&gt; heros, HeroChecker checker)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Hero hero : heros) &#123;</span><br><span class="line">            <span class="keyword">if</span> (checker.test(hero)) &#123;</span><br><span class="line">                System.out.println(hero);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="引用容器中的对象的方法"><a href="#引用容器中的对象的方法" class="headerlink" title="引用容器中的对象的方法"></a>引用容器中的对象的方法</h3><p>首先为Hero添加一个方法</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> boolean matched()&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.hp&gt;<span class="number">100</span> &amp;&amp; <span class="keyword">this</span>.damage&lt;<span class="number">50</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用Lambda表达式</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">filter</span>(heros,h-&gt; h.hp&gt;<span class="number">100</span> &amp;&amp; h.damage&lt;<span class="number">50</span> );</span><br></pre></td></tr></table></figure>

<p>在Lambda表达式中调用容器中的对象Hero的方法matched</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">filter(<span class="name">heros</span>,h-&gt; h.matched() )<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>matched恰好就是容器中的对象Hero的方法，那就可以进一步改写为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">filter</span>(heros, Hero::matched);</span><br></pre></td></tr></table></figure>

<p>这种方式就叫做<strong>引用容器中的对象的方法</strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestLambda &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        Random r = <span class="built_in">new</span> Random();</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heros.<span class="keyword">add</span>(<span class="built_in">new</span> Hero(&quot;hero &quot; + i, r.nextInt(<span class="number">1000</span>), r.nextInt(<span class="number">100</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;初始化后的集合：&quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(heros);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;Lambda表达式：&quot;);</span><br><span class="line">        <span class="keyword">filter</span>(heros,h-&gt; h.hp&gt;<span class="number">100</span> &amp;&amp; h.damage&lt;<span class="number">50</span> );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;Lambda表达式中调用容器中的对象的matched方法：&quot;);</span><br><span class="line">        <span class="keyword">filter</span>(heros, h -&gt; h.matched());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;引用容器中对象的方法 之过滤结果：&quot;);</span><br><span class="line">        <span class="keyword">filter</span>(heros, Hero::matched);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="type">boolean</span> testHero(Hero h) &#123;</span><br><span class="line">        <span class="keyword">return</span> h.hp&gt;<span class="number">100</span> &amp;&amp; h.damage&lt;<span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static <span class="type">void</span> <span class="keyword">filter</span>(List&lt;Hero&gt; heros, HeroChecker checker) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Hero hero : heros) &#123;</span><br><span class="line">            <span class="keyword">if</span> (checker.test(hero)) &#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(hero);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="引用构造器"><a href="#引用构造器" class="headerlink" title="引用构造器"></a>引用构造器</h3><p>有的接口中的方法会返回一个对象，比如<strong>java.util.function.Supplier</strong>提供 了一个get方法，返回一个对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambda</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Supplier&lt;List&gt; s = <span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;List&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> List <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名类</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list1</span> <span class="operator">=</span> getList(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda表达式</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list2</span> <span class="operator">=</span> getList(()-&gt;<span class="keyword">new</span> <span class="title class_">ArrayList</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//引用构造器</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list3</span> <span class="operator">=</span> getList(ArrayList::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List <span class="title function_">getList</span><span class="params">(Supplier&lt;List&gt; s)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="聚合操作-2"><a href="#聚合操作-2" class="headerlink" title="聚合操作"></a>聚合操作</h2><h3 id="传统方式与聚合操作方式遍历数据"><a href="#传统方式与聚合操作方式遍历数据" class="headerlink" title="传统方式与聚合操作方式遍历数据"></a>传统方式与聚合操作方式遍历数据</h3><p>遍历数据的传统方式就是使用for循环，然后条件判断，最后打印出满足条件的数据</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Hero h : heros) &#123;</span><br><span class="line">   <span class="keyword">if</span> (h.hp &gt; <span class="number">100</span> &amp;&amp; h.damage &lt; <span class="number">50</span>)</span><br><span class="line">      <span class="keyword">System</span>.<span class="keyword">out</span>.println(h.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用聚合操作方式，<strong>画风</strong>就发生了变化：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"> heros</span><br><span class="line">	.stream()</span><br><span class="line">	.<span class="keyword">filter</span>(h -&gt; h.hp &gt; <span class="number">100</span> &amp;&amp; h.damage &lt; <span class="number">50</span>)</span><br><span class="line">	.<span class="keyword">forEach</span>(h -&gt; <span class="keyword">System</span>.<span class="keyword">out</span>.println(h.name));</span><br><span class="line">package lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestAggregate &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        Random r = <span class="built_in">new</span> Random();</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heros.<span class="keyword">add</span>(<span class="built_in">new</span> Hero(&quot;hero &quot; + i, r.nextInt(<span class="number">1000</span>), r.nextInt(<span class="number">100</span>)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;初始化后的集合：&quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(heros);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;查询条件：hp&gt;100 &amp;&amp; damage&lt;50&quot;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;通过传统操作方式找出满足条件的数据：&quot;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Hero h : heros) &#123;</span><br><span class="line">            <span class="keyword">if</span> (h.hp &gt; <span class="number">100</span> &amp;&amp; h.damage &lt; <span class="number">50</span>)</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(h.name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;通过聚合操作方式找出满足条件的数据：&quot;);</span><br><span class="line">        heros</span><br><span class="line">            .stream()</span><br><span class="line">            .<span class="keyword">filter</span>(h -&gt; h.hp &gt; <span class="number">100</span> &amp;&amp; h.damage &lt; <span class="number">50</span>)</span><br><span class="line">            .<span class="keyword">forEach</span>(h -&gt; <span class="keyword">System</span>.<span class="keyword">out</span>.println(h.name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Stream和管道的概念"><a href="#Stream和管道的概念" class="headerlink" title="Stream和管道的概念"></a>Stream和管道的概念</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">heros</span><br><span class="line">    .stream<span class="literal">()</span></span><br><span class="line">    .filter(h -&gt; h.hp &gt; <span class="number">100</span><span class="operator"> &amp;&amp; </span>h.damage &lt; <span class="number">50</span>)</span><br><span class="line">    .<span class="keyword">for</span><span class="constructor">Each(<span class="params">h</span> -&gt; System.<span class="params">out</span>.<span class="params">println</span>(<span class="params">h</span>.<span class="params">name</span>)</span>);</span><br></pre></td></tr></table></figure>

<p>要了解聚合操作，首先要建立<strong>Stream</strong>和<strong>管道</strong>的概念 <strong>Stream</strong> 和Collection结构化的数据不一样，Stream是一系列的元素，就像是生产线上的罐头一样，一串串的出来。 <strong>管道</strong>指的是一系列的聚合操作。</p>
<p>管道又分3个部分 <strong>管道源</strong>：在这个例子里，源是一个List <strong>中间操作</strong>： 每个中间操作，又会返回一个Stream，比如.filter()又返回一个Stream, 中间操作是“懒”操作，并不会真正进行遍历。 <strong>结束操作</strong>：当这个操作执行后，流就被使用“光”了，无法再被操作。所以这必定是流的最后一个操作。 结束操作不会返回Stream，但是会返回int、float、String、 Collection或者像forEach，什么都不返回, 结束操作才进行真正的遍历行为，在遍历的时候，才会去进行中间操作的相关判断</p>
<p><strong>注：</strong> 这个Stream和I&#x2F;O章节的InputStream,OutputStream是不一样的概念。</p>
<h3 id="管道源"><a href="#管道源" class="headerlink" title="管道源"></a>管道源</h3><p>把Collection切换成管道源很简单，调用stream()就行了。</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">heros.stream<span class="comment">()</span></span><br></pre></td></tr></table></figure>

<p>但是数组却没有stream()方法，需要使用</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">Arrays.stream<span class="comment">(hs)</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Stream</span>.</span></span><span class="keyword">of</span>(hs)</span><br><span class="line">package lambda;</span><br><span class="line"></span><br><span class="line">import LOL.Hero;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Array;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> TestAggregate &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        Random r = <span class="keyword">new</span> <span class="constructor">Random()</span>;</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> ArrayList&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heros.add(<span class="keyword">new</span> <span class="constructor">Hero(<span class="string">&quot;hero &quot;</span> + <span class="params">i</span>, <span class="params">r</span>.<span class="params">nextInt</span>(1000)</span>, r.next<span class="constructor">Int(100)</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//管道源是集合</span></span><br><span class="line">        heros</span><br><span class="line">            .stream<span class="literal">()</span></span><br><span class="line">            .<span class="keyword">for</span><span class="constructor">Each(<span class="params">h</span>-&gt; System.<span class="params">out</span>.<span class="params">println</span>(<span class="params">h</span>.<span class="params">name</span>)</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//管道源是数组</span></span><br><span class="line">        Hero<span class="literal">[]</span> hs = heros.<span class="keyword">to</span><span class="constructor">Array(<span class="params">new</span> Hero[<span class="params">heros</span>.<span class="params">size</span>()</span>]);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>stream(hs)</span><br><span class="line">            .<span class="keyword">for</span><span class="constructor">Each(<span class="params">h</span>-&gt; System.<span class="params">out</span>.<span class="params">println</span>(<span class="params">h</span>.<span class="params">name</span>)</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><p>每个中间操作，又会返回一个Stream，比如.filter()又返回一个Stream, 中间操作是“懒”操作，并不会真正进行遍历。 中间操作比较多，主要分两类 对元素进行筛选 和 转换为其他形式的流 <strong>对元素进行筛选：</strong> filter 匹配 distinct 去除重复(根据equals判断) sorted 自然排序 sorted(Comparator<T>) 指定排序 limit 保留 skip 忽略 <strong>转换为其他形式的流</strong> mapToDouble 转换为double的流 map 转换为任意类型的流</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package lambda;</span><br><span class="line"></span><br><span class="line">import LOL.Hero;</span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> TestAggregate &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        Random r = <span class="keyword">new</span> <span class="constructor">Random()</span>;</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> ArrayList&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heros.add(<span class="keyword">new</span> <span class="constructor">Hero(<span class="string">&quot;hero &quot;</span> + <span class="params">i</span>, <span class="params">r</span>.<span class="params">nextInt</span>(1000)</span>, r.next<span class="constructor">Int(100)</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//制造一个重复数据</span></span><br><span class="line">        heros.add(heros.get(<span class="number">0</span>));</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;初始化集合后的数据 (最后一个数据重复)：&quot;</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(heros);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;满足条件hp&gt;100&amp;&amp;damage&lt;50的数据&quot;</span>);</span><br><span class="line"></span><br><span class="line">        heros</span><br><span class="line">            .stream<span class="literal">()</span></span><br><span class="line">            .filter(h-&gt;h.hp &gt; <span class="number">100</span><span class="operator"> &amp;&amp; </span>h.damage &lt; <span class="number">50</span>)</span><br><span class="line">            .<span class="keyword">for</span><span class="constructor">Each(<span class="params">h</span>-&gt; System.<span class="params">out</span>.<span class="params">println</span>(<span class="params">h</span>)</span>);</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;去除重复的数据，去除标准是看equals&quot;</span>);</span><br><span class="line">        heros</span><br><span class="line">            .stream<span class="literal">()</span></span><br><span class="line">            .distinct<span class="literal">()</span></span><br><span class="line">            .<span class="keyword">for</span><span class="constructor">Each(<span class="params">h</span>-&gt;System.<span class="params">out</span>.<span class="params">println</span>(<span class="params">h</span>)</span>);</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;按照血量排序&quot;</span>);</span><br><span class="line">        heros</span><br><span class="line">            .stream<span class="literal">()</span></span><br><span class="line">            .sorted((h1, h2)-&gt;h1.hp &gt;= h2.hp ? <span class="number">1</span> : -<span class="number">1</span>)</span><br><span class="line">            .<span class="keyword">for</span><span class="constructor">Each(<span class="params">h</span>-&gt; System.<span class="params">out</span>.<span class="params">println</span>(<span class="params">h</span>)</span>);</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;保留3个&quot;</span>);</span><br><span class="line">        heros</span><br><span class="line">            .stream<span class="literal">()</span></span><br><span class="line">            .limit(<span class="number">3</span>)</span><br><span class="line">            .<span class="keyword">for</span><span class="constructor">Each(<span class="params">h</span>-&gt;System.<span class="params">out</span>.<span class="params">println</span>(<span class="params">h</span>)</span>);</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;忽略前3个&quot;</span>);</span><br><span class="line">        heros</span><br><span class="line">            .stream<span class="literal">()</span></span><br><span class="line">            .skip(<span class="number">3</span>)</span><br><span class="line">            .<span class="keyword">for</span><span class="constructor">Each(<span class="params">h</span>-&gt;System.<span class="params">out</span>.<span class="params">println</span>(<span class="params">h</span>)</span>);</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;转换为double的Stream&quot;</span>);</span><br><span class="line">        heros</span><br><span class="line">            .stream<span class="literal">()</span></span><br><span class="line">            .map<span class="constructor">ToDouble(Hero::<span class="params">getHp</span>)</span></span><br><span class="line">            .<span class="keyword">for</span><span class="constructor">Each(<span class="params">h</span>-&gt;System.<span class="params">out</span>.<span class="params">println</span>(<span class="params">h</span>)</span>);</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;转换任意类型的Stream&quot;</span>);</span><br><span class="line">        heros</span><br><span class="line">            .stream<span class="literal">()</span></span><br><span class="line">            .map(h-&gt; h.name + <span class="string">&quot; - &quot;</span> + h.hp + <span class="string">&quot; - &quot;</span> + h.damage)</span><br><span class="line">            .<span class="keyword">for</span><span class="constructor">Each(<span class="params">h</span>-&gt;System.<span class="params">out</span>.<span class="params">println</span>(<span class="params">h</span>)</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结束操作"><a href="#结束操作" class="headerlink" title="结束操作"></a>结束操作</h3><p>当进行结束操作后，流就被使用“光”了，无法再被操作。所以这必定是流的最后一个操作。 结束操作不会返回Stream，但是会返回int、float、String、 Collection或者像forEach，什么都不返回,。 结束操作才真正进行遍历行为，前面的中间操作也在这个时候，才真正的执行。 常见结束操作如下： <strong>forEach()</strong> 遍历每个元素 <strong>toArray()</strong> 转换为数组 <strong>min(Comparator<T>)</strong> 取最小的元素 <strong>max(Comparator<T>)</strong> 取最大的元素 <strong>count()</strong> 总数 <strong>findFirst()</strong> 第一个元素</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">package lambda;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LOL.Hero;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">TestAggregate</span> &#123;</span><br><span class="line">    public <span class="keyword">static</span> <span class="literal">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            heros.add(<span class="keyword">new</span> Hero(<span class="string">&quot;hero &quot;</span> + i, r.nextInt(<span class="number">1000</span>), r.nextInt(<span class="number">100</span>)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;遍历集合中的每个数据&quot;</span>);</span><br><span class="line">        heros</span><br><span class="line">                .stream()</span><br><span class="line">                .forEach(h-&gt;System.out.<span class="built_in">print</span>(h));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;返回一个数组&quot;</span>);</span><br><span class="line">        <span class="built_in">Object</span>[] hs = heros</span><br><span class="line">                .stream()</span><br><span class="line">                .toArray();</span><br><span class="line">        System.out.println(Arrays.toString(hs));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;返回伤害最低的那个英雄&quot;</span>);</span><br><span class="line">        Hero minDamageHero =</span><br><span class="line">                heros</span><br><span class="line">                        .stream()</span><br><span class="line">                        .min<span class="function"><span class="params">((h1, h2)-&gt;h2.damage-h2.damage)</span></span></span><br><span class="line"><span class="function">                        .<span class="title">get</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(minDamageHero)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="string">&quot;返回伤害最高的那个英雄&quot;</span>)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">Hero</span> <span class="title">mxnDamageHero</span> =</span></span><br><span class="line"><span class="function">                <span class="title">heros</span></span></span><br><span class="line"><span class="function">                        .<span class="title">stream</span><span class="params">()</span></span></span><br><span class="line"><span class="function">                        .<span class="title">max</span><span class="params">((h1,h2)-&gt;h1.damage-h2.damage)</span></span></span><br><span class="line"><span class="function">                        .<span class="title">get</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(mxnDamageHero)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="string">&quot;流中数据的总数&quot;</span>)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">long</span> <span class="title">count</span> =</span></span><br><span class="line"><span class="function">                <span class="title">heros</span></span></span><br><span class="line"><span class="function">                        .<span class="title">stream</span><span class="params">()</span></span></span><br><span class="line"><span class="function">                        .<span class="title">count</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(count)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="string">&quot;第一个英雄&quot;</span>)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">Hero</span> <span class="title">firstHero</span> =</span></span><br><span class="line"><span class="function">                <span class="title">heros</span></span></span><br><span class="line"><span class="function">                        .<span class="title">stream</span><span class="params">()</span></span></span><br><span class="line"><span class="function">                        .<span class="title">findFirst</span><span class="params">()</span></span></span><br><span class="line"><span class="function">                        .<span class="title">get</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(firstHero)</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="启动一个线程"><a href="#启动一个线程" class="headerlink" title="启动一个线程"></a>启动一个线程</h2><p>多线程即在同一时间，可以做多件事情。</p>
<p>创建多线程有3种方式，分别是<a href="https://how2j.cn/k/thread/thread-start/353.html#step778">继承线程类</a>,<a href="https://how2j.cn/k/thread/thread-start/353.html#step779">实现Runnable接口</a>,<a href="https://how2j.cn/k/thread/thread-start/353.html#step780">匿名类</a></p>
<h3 id="线程概念"><a href="#线程概念" class="headerlink" title="线程概念"></a>线程概念</h3><p>首先要理解进程(Processor)和线程(Thread)的区别 <strong>进程：</strong>启动一个LOL.exe就叫一个进程。 接着又启动一个DOTA.exe，这叫两个进程。 <strong>线程：</strong>线程是在进程内部同时做的事情，比如在LOL里，有很多事情要同时做，比如”盖伦” 击杀“提莫”，<strong>同时</strong>“赏金猎人”又在击杀“盲僧”，这就是由多线程来实现的。</p>
<p>此处代码演示的是<strong>不使用多线程的情况</strong>： 只有在盖伦杀掉提莫后，赏金猎人才开始杀盲僧</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> multiplethread;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> hp;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> damage;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attackHero</span><span class="params">(Hero2 h)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//为了表示攻击需要时间，每次攻击暂停1000毫秒</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        h.hp -= damage;</span><br><span class="line">        System.out.format(<span class="string">&quot;%s 正在攻击 %s, %s 的血变成了 %.0f%n&quot;</span>, name, h.name, h.name, h.hp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (h.isDead()) &#123;</span><br><span class="line">            System.out.println(h.name + <span class="string">&quot; 死了！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isDead</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> &gt;= hp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Hero2 gareen= <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        gareen.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        gareen.hp = <span class="number">616</span>;</span><br><span class="line">        gareen.damage = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Hero2</span> <span class="variable">teemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        teemo.name = <span class="string">&quot;提莫&quot;</span>;</span><br><span class="line">        teemo.hp = <span class="number">300</span>;</span><br><span class="line">        teemo.damage = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Hero2</span> <span class="variable">bh</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        bh.name = <span class="string">&quot;赏金猎人&quot;</span>;</span><br><span class="line">        bh.hp = <span class="number">500</span>;</span><br><span class="line">        bh.damage = <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Hero2</span> <span class="variable">leesin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        leesin.name = <span class="string">&quot;盲僧&quot;</span>;</span><br><span class="line">        leesin.hp = <span class="number">455</span>;</span><br><span class="line">        leesin.damage = <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//盖伦攻击提莫</span></span><br><span class="line">        <span class="keyword">while</span>(!teemo.isDead())&#123;</span><br><span class="line">            gareen.attackHero(teemo);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//赏金猎人攻击盲僧</span></span><br><span class="line">        <span class="keyword">while</span>(!leesin.isDead())&#123;</span><br><span class="line">            bh.attackHero(leesin);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建多线程-继承线程类"><a href="#创建多线程-继承线程类" class="headerlink" title="创建多线程-继承线程类"></a>创建多线程-继承线程类</h3><p>使用多线程，就可以做到盖伦在攻击提莫的<strong>同时</strong>，赏金猎人也在攻击盲僧 设计一个类KillThread <strong>继承Thread</strong>，<strong>并且重写run方法</strong> 启动线程办法： 实例化一个KillThread对象，并且调用其<strong>start</strong>方法 就可以观察到 赏金猎人攻击盲僧的<strong>同时</strong>，盖伦也在攻击提莫</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> multiplethread;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> hp;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> damage;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attackHero</span><span class="params">(Hero2 h)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//为了表示攻击需要时间，每次攻击暂停1000毫秒</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        h.hp -= damage;</span><br><span class="line">        System.out.format(<span class="string">&quot;%s 正在攻击 %s, %s 的血变成了 %.0f%n&quot;</span>, name, h.name, h.name, h.hp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (h.isDead()) &#123;</span><br><span class="line">            System.out.println(h.name + <span class="string">&quot; 死了！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isDead</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> &gt;= hp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KillThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Hero2 h1;</span><br><span class="line">    <span class="keyword">private</span> Hero2 h2;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KillThread</span><span class="params">(Hero2 h1, Hero2 h2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.h1 = h1;</span><br><span class="line">        <span class="built_in">this</span>.h2 = h2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (!h2.isDead()) &#123;</span><br><span class="line">            h1.attackHero(h2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Hero2 gareen= <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        gareen.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        gareen.hp = <span class="number">616</span>;</span><br><span class="line">        gareen.damage = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Hero2</span> <span class="variable">teemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        teemo.name = <span class="string">&quot;提莫&quot;</span>;</span><br><span class="line">        teemo.hp = <span class="number">300</span>;</span><br><span class="line">        teemo.damage = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Hero2</span> <span class="variable">bh</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        bh.name = <span class="string">&quot;赏金猎人&quot;</span>;</span><br><span class="line">        bh.hp = <span class="number">500</span>;</span><br><span class="line">        bh.damage = <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Hero2</span> <span class="variable">leesin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        leesin.name = <span class="string">&quot;盲僧&quot;</span>;</span><br><span class="line">        leesin.hp = <span class="number">455</span>;</span><br><span class="line">        leesin.damage = <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">KillThread</span> <span class="variable">killThread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KillThread</span>(gareen, teemo);</span><br><span class="line">        killThread1.start();</span><br><span class="line">        <span class="type">KillThread</span> <span class="variable">killThread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KillThread</span>(bh, leesin);</span><br><span class="line">        killThread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建多线程-实现Runnable接口"><a href="#创建多线程-实现Runnable接口" class="headerlink" title="创建多线程-实现Runnable接口"></a>创建多线程-实现Runnable接口</h3><p>创建类Battle，实现Runnable接口 启动的时候，首先创建一个Battle对象，然后再根据该battle对象创建一个线程对象，并启动</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Battle battle1 = <span class="keyword">new</span> <span class="constructor">Battle(<span class="params">gareen</span>,<span class="params">teemo</span>)</span>;</span><br><span class="line"><span class="keyword">new</span> <span class="constructor">Thread(<span class="params">battle1</span>)</span>.start<span class="literal">()</span>;</span><br></pre></td></tr></table></figure>

<p>battle1 对象实现了Runnable接口，所以有run方法，但是直接调用run方法，并不会启动一个新的线程。 必须，借助一个线程对象的start()方法，才会启动一个新的线程。 所以，在创建Thread对象的时候，把battle1作为构造方法的参数传递进去，这个线程启动的时候，就会去执行battle1.run()方法了。</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Battle</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Runnable</span></span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Hero2 h1;</span><br><span class="line">    <span class="keyword">private</span> Hero2 h2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Battle(Hero2 h1, Hero2 h2) &#123;</span><br><span class="line">        <span class="built_in">this</span>.h1 = h1;</span><br><span class="line">        <span class="built_in">this</span>.h2 = h2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> void run() &#123;</span><br><span class="line">        <span class="keyword">while</span> (!h2.isDead()) &#123;</span><br><span class="line">            h1.attackHero(h2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        Hero2 gareen= <span class="keyword">new</span> <span class="type">Hero2</span>();</span><br><span class="line">        gareen.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        gareen.hp = <span class="number">616</span>;</span><br><span class="line">        gareen.damage = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">        Hero2 teemo = <span class="keyword">new</span> <span class="type">Hero2</span>();</span><br><span class="line">        teemo.name = <span class="string">&quot;提莫&quot;</span>;</span><br><span class="line">        teemo.hp = <span class="number">300</span>;</span><br><span class="line">        teemo.damage = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        Hero2 bh = <span class="keyword">new</span> <span class="type">Hero2</span>();</span><br><span class="line">        bh.name = <span class="string">&quot;赏金猎人&quot;</span>;</span><br><span class="line">        bh.hp = <span class="number">500</span>;</span><br><span class="line">        bh.damage = <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">        Hero2 leesin = <span class="keyword">new</span> <span class="type">Hero2</span>();</span><br><span class="line">        leesin.name = <span class="string">&quot;盲僧&quot;</span>;</span><br><span class="line">        leesin.hp = <span class="number">455</span>;</span><br><span class="line">        leesin.damage = <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">        Battle battle1 = <span class="keyword">new</span> <span class="type">Battle</span>(gareen, teemo);</span><br><span class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(battle1).start();</span><br><span class="line">        Battle battle2 = <span class="keyword">new</span> <span class="type">Battle</span>(bh, leesin);</span><br><span class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(battle2).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建多线程-匿名类"><a href="#创建多线程-匿名类" class="headerlink" title="创建多线程-匿名类"></a>创建多线程-匿名类</h3><p>使用<a href="https://how2j.cn/k/interface-inheritance/interface-inheritance-inner-class/322.html#step687">匿名类</a>，继承Thread,重写run方法，直接在run方法中写业务代码 匿名类的一个好处是可以很方便的访问外部的局部变量。 前提是外部的局部变量需要被声明为final。(JDK7以后就不需要了)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Hero2 gareen= <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        gareen.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        gareen.hp = <span class="number">616</span>;</span><br><span class="line">        gareen.damage = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Hero2</span> <span class="variable">teemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        teemo.name = <span class="string">&quot;提莫&quot;</span>;</span><br><span class="line">        teemo.hp = <span class="number">300</span>;</span><br><span class="line">        teemo.damage = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Hero2</span> <span class="variable">bh</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        bh.name = <span class="string">&quot;赏金猎人&quot;</span>;</span><br><span class="line">        bh.hp = <span class="number">500</span>;</span><br><span class="line">        bh.damage = <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Hero2</span> <span class="variable">leesin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        leesin.name = <span class="string">&quot;盲僧&quot;</span>;</span><br><span class="line">        leesin.hp = <span class="number">455</span>;</span><br><span class="line">        leesin.damage = <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名类</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//匿名类中用到外部的局部变量teemo，必须把teemo声明为final</span></span><br><span class="line">                <span class="comment">//但是在JDK7以后，就不是必须加final的了</span></span><br><span class="line">                <span class="keyword">while</span> (!teemo.isDead()) &#123;</span><br><span class="line">                    gareen.attackHero(teemo);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!leesin.isDead()) &#123;</span><br><span class="line">                    bh.attackHero(leesin);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建多线程的三种方式"><a href="#创建多线程的三种方式" class="headerlink" title="创建多线程的三种方式"></a>创建多线程的三种方式</h3><p>把上述3种方式再整理一下：</p>
<p>\1. 继承Thread类 \2. 实现Runnable接口 \3. 匿名类的方式</p>
<p>注： 启动线程是start()方法，run()并不能启动一个新的线程</p>
<h2 id="常见线程方法"><a href="#常见线程方法" class="headerlink" title="常见线程方法"></a>常见线程方法</h2><h3 id="当前线程暂停"><a href="#当前线程暂停" class="headerlink" title="当前线程暂停"></a>当前线程暂停</h3><p>Thread.sleep(1000); 表示当前线程暂停1000毫秒 ，其他线程不受影响 Thread.sleep(1000); 会抛出InterruptedException 中断异常，因为当前线程sleep的时候，有可能被停止，这时就会抛出 InterruptedException</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">package multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestThread</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span> &#123;</span><br><span class="line">                <span class="built_in">int</span> seconds = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.<span class="keyword">out</span>.printf(<span class="string">&quot;已经玩了LOL %d 秒%n&quot;</span>, seconds++);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="加入到当前线程中"><a href="#加入到当前线程中" class="headerlink" title="加入到当前线程中"></a>加入到当前线程中</h3><p>首先解释一下<strong>主线程</strong>的概念 所有进程，至少会有一个线程即主线程，即main方法开始执行，就会有一个<strong>看不见</strong>的主线程存在。 在42行执行t.join，即表明<strong>在主线程中加入该线程</strong>。 主线程会等待该线程结束完毕， 才会往下运行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Hero2 gareen= <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        gareen.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        gareen.hp = <span class="number">616</span>;</span><br><span class="line">        gareen.damage = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Hero2</span> <span class="variable">teemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        teemo.name = <span class="string">&quot;提莫&quot;</span>;</span><br><span class="line">        teemo.hp = <span class="number">300</span>;</span><br><span class="line">        teemo.damage = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Hero2</span> <span class="variable">bh</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        bh.name = <span class="string">&quot;赏金猎人&quot;</span>;</span><br><span class="line">        bh.hp = <span class="number">500</span>;</span><br><span class="line">        bh.damage = <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Hero2</span> <span class="variable">leesin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        leesin.name = <span class="string">&quot;盲僧&quot;</span>;</span><br><span class="line">        leesin.hp = <span class="number">455</span>;</span><br><span class="line">        leesin.damage = <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!teemo.isDead()) &#123;</span><br><span class="line">                    gareen.attackHero(teemo);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//代码执行到这里，一直是main线程在运行</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//t1线程加入到main线程中来，只有t1线程运行结束，才会继续往下走</span></span><br><span class="line">            t1.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!leesin.isDead()) &#123;</span><br><span class="line">                    bh.attackHero(leesin);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//会观察到盖伦把提莫杀掉后，才运行t2线程</span></span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><p>当线程处于竞争关系的时候，优先级高的线程会有更大的几率获得CPU资源 为了演示该效果，要把暂停时间去掉，多条线程各自会尽力去占有CPU资源 同时把英雄的血量增加100倍，攻击减低到1，才有足够的时间观察到优先级的演示 如图可见，线程1的优先级是MAX_PRIORITY，所以它争取到了更多的CPU资源执行代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Hero2 gareen= <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        gareen.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        gareen.hp = <span class="number">6160</span>;</span><br><span class="line">        gareen.damage = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Hero2</span> <span class="variable">teemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        teemo.name = <span class="string">&quot;提莫&quot;</span>;</span><br><span class="line">        teemo.hp = <span class="number">3000</span>;</span><br><span class="line">        teemo.damage = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Hero2</span> <span class="variable">bh</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        bh.name = <span class="string">&quot;赏金猎人&quot;</span>;</span><br><span class="line">        bh.hp = <span class="number">5000</span>;</span><br><span class="line">        bh.damage = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Hero2</span> <span class="variable">leesin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        leesin.name = <span class="string">&quot;盲僧&quot;</span>;</span><br><span class="line">        leesin.hp = <span class="number">4505</span>;</span><br><span class="line">        leesin.damage = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!teemo.isDead()) &#123;</span><br><span class="line">                    gareen.attackHero(teemo);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!leesin.isDead()) &#123;</span><br><span class="line">                    bh.attackHero(leesin);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        t1.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">        t2.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="临时暂停"><a href="#临时暂停" class="headerlink" title="临时暂停"></a>临时暂停</h3><p>当前线程，临时暂停，使得其他线程可以有更多的机会占用CPU资源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Hero2 gareen= <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        gareen.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        gareen.hp = <span class="number">61600</span>;</span><br><span class="line">        gareen.damage = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Hero2</span> <span class="variable">teemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        teemo.name = <span class="string">&quot;提莫&quot;</span>;</span><br><span class="line">        teemo.hp = <span class="number">30000</span>;</span><br><span class="line">        teemo.damage = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Hero2</span> <span class="variable">bh</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        bh.name = <span class="string">&quot;赏金猎人&quot;</span>;</span><br><span class="line">        bh.hp = <span class="number">50000</span>;</span><br><span class="line">        bh.damage = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Hero2</span> <span class="variable">leesin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        leesin.name = <span class="string">&quot;盲僧&quot;</span>;</span><br><span class="line">        leesin.hp = <span class="number">45050</span>;</span><br><span class="line">        leesin.damage = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!teemo.isDead()) &#123;</span><br><span class="line">                    gareen.attackHero(teemo);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!leesin.isDead()) &#123;</span><br><span class="line">                    <span class="comment">//临时暂停，使得t1可以占用CPU资源</span></span><br><span class="line">                    Thread.yield();</span><br><span class="line">                    bh.attackHero(leesin);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        t1.setPriority(<span class="number">5</span>);</span><br><span class="line">        t2.setPriority(<span class="number">5</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>守护线程的概念是： 当一个进程里，所有的线程都是守护线程的时候，结束当前进程。</p>
<p>就好像一个公司有销售部，生产部这些和业务挂钩的部门。 除此之外，还有后勤，行政等这些支持部门。</p>
<p>如果一家公司销售部，生产部都解散了，那么只剩下后勤和行政，那么这家公司也可以解散了。</p>
<p>守护线程就相当于那些支持部门，如果一个进程只剩下守护线程，那么进程就会自动结束。</p>
<p>守护线程通常会被用来做日志，性能统计等工作。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">package multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestThread</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span> &#123;</span><br><span class="line">                <span class="built_in">int</span> seconds = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.<span class="keyword">out</span>.printf(<span class="string">&quot;已经玩了LOL %d 秒%n&quot;</span>, seconds++);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t1.setDaemon(<span class="literal">true</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>多线程的同步问题指的是多个线程同时修改一个数据的时候，可能导致的问题</p>
<p>多线程的问题，又叫<strong>Concurrency</strong> 问题</p>
<h3 id="演示同步问题"><a href="#演示同步问题" class="headerlink" title="演示同步问题"></a>演示同步问题</h3><p>假设盖伦有10000滴血，并且在基地里，同时又被对方多个英雄攻击 就是<strong>有多个线程在减少盖伦的hp</strong> 同时又有<strong>多个线程在恢复盖伦的hp</strong> 假设线程的数量是一样的，并且每次改变的值都是1，那么所有线程结束后，盖伦应该还是10000滴血。 但是。。。</p>
<p><strong>注意</strong>： 不是每一次运行都会看到错误的数据产生，多运行几次，或者增加运行的次数</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">package multiplethread;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hero2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> hp;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> damage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回血</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recover</span>()</span> &#123;</span><br><span class="line">        hp += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//掉血</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hurt</span>()</span> &#123;</span><br><span class="line">        hp -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attackHero</span>(<span class="params">Hero2 h</span>)</span> &#123;</span><br><span class="line">        h.hp -= damage;</span><br><span class="line">        System.<span class="keyword">out</span>.format(<span class="string">&quot;%s 正在攻击 %s, %s 的血变成了 %.0f%n&quot;</span>, name, h.name, h.name, h.hp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (h.isDead()) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(h.name + <span class="string">&quot; 死了！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">isDead</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> &gt;= hp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">package multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestThread</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        final Hero2 gareen = <span class="keyword">new</span> Hero2();</span><br><span class="line">        gareen.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        gareen.hp = <span class="number">10000</span>;</span><br><span class="line">        System.<span class="keyword">out</span>.printf(<span class="string">&quot;盖伦的初始血量是 %.0f%n&quot;</span>, gareen.hp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//多线程同步问题指的是多个线程同时修改一个数据的时候，导致的问题</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//假设盖伦有10000滴血，并且在基地里，同时又被对方多个英雄攻击</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用JAVA代码来表示，就是有多个线程在减少盖伦的hp</span></span><br><span class="line">        <span class="comment">//同时又有多个线程在恢复盖伦的hp</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//n个线程增加盖伦的hp</span></span><br><span class="line">        <span class="built_in">int</span> n = <span class="number">10000</span>;</span><br><span class="line">        Thread[] addThreads = <span class="keyword">new</span> Thread[n];</span><br><span class="line">        Thread[] reduceThreads = <span class="keyword">new</span> Thread[n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span> &#123;</span><br><span class="line">                    gareen.recover();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            t.start();</span><br><span class="line">            addThreads[i] = t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//n个线程减少盖伦的hp</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span>&#123;</span><br><span class="line">                    gareen.hurt();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            t.start();</span><br><span class="line">            reduceThreads[i] = t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等待所有增加线程结束</span></span><br><span class="line">        <span class="keyword">for</span> (Thread t : addThreads) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.<span class="keyword">join</span>();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等待所有减少线程结束</span></span><br><span class="line">        <span class="keyword">for</span> (Thread t : reduceThreads) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.<span class="keyword">join</span>();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//代码执行到这里，所有增加和减少线程都结束了</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//增加和减少线程的数量是一样的，每次都增加，减少1.</span></span><br><span class="line">        <span class="comment">//那么所有线程都结束后，盖伦的hp应该还是初始值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//但是事实上观察到的是：</span></span><br><span class="line">        System.<span class="keyword">out</span>.printf(<span class="string">&quot;%d个增加线程和%d个减少线程结束后%n盖伦的血量变成了 %.0f%n&quot;</span>, n,n,gareen.hp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    盖伦的初始血量是 <span class="number">10000</span></span><br><span class="line">    <span class="number">10000</span>个增加线程和<span class="number">10000</span>个减少线程结束后</span><br><span class="line">    盖伦的血量变成了 <span class="number">9993</span></span><br></pre></td></tr></table></figure>

<h3 id="分析同步问题产生的原因"><a href="#分析同步问题产生的原因" class="headerlink" title="分析同步问题产生的原因"></a>分析同步问题产生的原因</h3><p>\1. 假设<strong>增加线程</strong>先进入，得到的hp是10000 \2. 进行增加运算 \3. 正在做增加运算的时候，<strong>还没有来得及修改hp的值</strong>，<strong>减少线程</strong>来了 \4. 减少线程得到的hp的值也是10000 \5. 减少线程进行减少运算 \6. 增加线程运算结束，得到值10001，并把这个值赋予hp \7. 减少线程也运算结束，得到值9999，并把这个值赋予hp hp，最后的值就是9999 虽然经历了两个线程各自增减了一次，本来期望还是原值10000，但是却得到了一个9999 这个时候的值9999是一个错误的值，在业务上又叫做<strong>脏数据</strong></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220112202706177.png" alt="image-20220112202706177"></p>
<h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>总体解决思路是： 在增加线程访问hp期间，其他线程不可以访问hp \1. 增加线程获取到hp的值，并进行运算 \2. 在运算期间，减少线程试图来获取hp的值，但是<strong>不被允许</strong> \3. 增加线程运算结束，并成功修改hp的值为10001 \4. 减少线程，在增加线程做完后，才能访问hp的值，即10001 \5. 减少线程运算，并得到新的值10000</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220112202918357.png" alt="image-20220112202918357"></p>
<h3 id="synchronized-同步对象概念"><a href="#synchronized-同步对象概念" class="headerlink" title="synchronized 同步对象概念"></a>synchronized 同步对象概念</h3><p>解决上述问题之前，先理解 <strong>synchronized</strong>关键字的意义 如下代码：</p>
<figure class="highlight wren"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span> <span class="variable">someObject</span> <span class="operator">=</span> <span class="variable">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="title function_">synchronized</span> (<span class="variable">someObject</span>)&#123;</span><br><span class="line">  <span class="comment">//此处的代码只有占有了someObject后才可以执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>synchronized表示当前线程，独占 对象 someObject</strong> 当前线程<strong>独占</strong> 了对象someObject，如果有<em>*其他线程*<em><strong>试图占有对象</strong>someObject，</em>*就会等待</em>*，直到当前线程释放对someObject的占用。 someObject 又叫同步对象，所有的对象，都可以作为同步对象 为了达到同步的效果，必须使用同一个同步对象</p>
<p><strong>释放同步对象</strong>的方式： synchronized 块自然结束，或者有异常抛出</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220112203017924.png" alt="image-20220112203017924"></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestThread &#123;</span><br><span class="line">    <span class="built_in">public</span> static String now() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span> SimpleDateFormat(&quot;HH:mm:ss&quot;).format(<span class="built_in">new</span> <span class="type">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        final <span class="keyword">Object</span> someObject = <span class="built_in">new</span> <span class="keyword">Object</span>();</span><br><span class="line">        Thread t1 = <span class="built_in">new</span> Thread() &#123;</span><br><span class="line">            <span class="built_in">public</span> <span class="type">void</span> run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    <span class="keyword">System</span>.<span class="keyword">out</span>.println(now() + &quot; t1 线程已经运行&quot;);</span><br><span class="line">                    <span class="keyword">System</span>.<span class="keyword">out</span>.println(now() + this.getName() + &quot; 试图占有对象：someObject&quot;);</span><br><span class="line">                    synchronized (someObject) &#123;</span><br><span class="line">                        <span class="keyword">System</span>.<span class="keyword">out</span>.println(now() + this.getName() + &quot; 占有对象：someObject&quot;);</span><br><span class="line">                        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                        <span class="keyword">System</span>.<span class="keyword">out</span>.println(now() + this.getName() + &quot; 释放对象：someObject&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">System</span>.<span class="keyword">out</span>.println(now() + &quot; t1 线程结束&quot;);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t1.setName(&quot;t1&quot;);</span><br><span class="line">        t1.<span class="keyword">start</span>();</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="built_in">new</span> Thread()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">public</span> <span class="type">void</span> run()&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    <span class="keyword">System</span>.<span class="keyword">out</span>.println( now()+&quot; t2 线程已经运行&quot;);</span><br><span class="line">                    <span class="keyword">System</span>.<span class="keyword">out</span>.println( now()+this.getName()+ &quot; 试图占有对象：someObject&quot;);</span><br><span class="line">                    synchronized (someObject) &#123;</span><br><span class="line">                        <span class="keyword">System</span>.<span class="keyword">out</span>.println( now()+this.getName()+ &quot; 占有对象：someObject&quot;);</span><br><span class="line">                        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                        <span class="keyword">System</span>.<span class="keyword">out</span>.println( now()+this.getName()+ &quot; 释放对象：someObject&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">System</span>.<span class="keyword">out</span>.println(now()+&quot; t2 线程结束&quot;);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    // TODO Auto-<span class="keyword">generated</span> catch block</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t2.setName(&quot; t2&quot;);</span><br><span class="line">        t2.<span class="keyword">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用synchronized-解决同步问题"><a href="#使用synchronized-解决同步问题" class="headerlink" title="使用synchronized 解决同步问题"></a>使用synchronized 解决同步问题</h3><p>所有需要修改hp的地方，有要<strong>建立在占有someObject的基础上</strong>。 而对象 someObject在同一时间，只能被一个线程占有。 间接地，<strong>导致同一时间，hp只能被一个线程修改。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">someObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Hero2</span> <span class="variable">gareen</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero2</span>();</span><br><span class="line">        gareen.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        gareen.hp = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">        Thread[] addThreads = <span class="keyword">new</span> <span class="title class_">Thread</span>[n];</span><br><span class="line">        Thread[] reduceThreads = <span class="keyword">new</span> <span class="title class_">Thread</span>[n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="comment">//任何线程要修改hp的值，必须先占用someObject</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (someObject) &#123;</span><br><span class="line">                        gareen.recover();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            t.start();</span><br><span class="line">            addThreads[i] = t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">                    <span class="comment">//任何线程要修改hp的值，必须先占用someObject</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (someObject) &#123;</span><br><span class="line">                        gareen.hurt();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            t.start();</span><br><span class="line">            reduceThreads[i] = t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Thread t : addThreads) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread t : reduceThreads) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%d个增加线程和%d个减少线程结束后%n盖伦的血量是 %.0f%n&quot;</span>, n,n,gareen.hp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用hero对象作为同步对象"><a href="#使用hero对象作为同步对象" class="headerlink" title="使用hero对象作为同步对象"></a>使用hero对象作为同步对象</h3><p>既然任意对象都可以用来作为同步对象，而所有的线程访问的都是同一个hero对象，<strong>索性就使用gareen来作为同步对象</strong> 进一步的，对于Hero的hurt方法，加上： synchronized (this) { } 表示当前对象为同步对象，即也是gareen为同步对象</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">package multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestThread</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        final Hero2 gareen = <span class="keyword">new</span> Hero2();</span><br><span class="line">        gareen.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        gareen.hp = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> n = <span class="number">10000</span>;</span><br><span class="line">        Thread[] addThreads = <span class="keyword">new</span> Thread[n];</span><br><span class="line">        Thread[] reduceThreads = <span class="keyword">new</span> Thread[n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span> &#123;</span><br><span class="line">                    <span class="comment">//使用gareen作为synchronized</span></span><br><span class="line">                    synchronized (gareen) &#123;</span><br><span class="line">                        gareen.recover();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            t.start();</span><br><span class="line">            addThreads[i] = t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span>&#123;</span><br><span class="line">                    <span class="comment">//使用gareen作为synchronized</span></span><br><span class="line">                    <span class="comment">//在方法hurt中有synchronized(this)</span></span><br><span class="line">                    gareen.hurt();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            t.start();</span><br><span class="line">            reduceThreads[i] = t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Thread t : addThreads) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.<span class="keyword">join</span>();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread t : reduceThreads) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.<span class="keyword">join</span>();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.printf(<span class="string">&quot;%d个增加线程和%d个减少线程结束后%n盖伦的血量是 %.0f%n&quot;</span>, n,n,gareen.hp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">package multiplethread;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hero2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> hp;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> damage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回血</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recover</span>()</span> &#123;</span><br><span class="line">        hp += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//掉血</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hurt</span>()</span> &#123;</span><br><span class="line">        <span class="comment">//使用this作为同步对象</span></span><br><span class="line">        synchronized (<span class="keyword">this</span>) &#123;</span><br><span class="line">            hp -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attackHero</span>(<span class="params">Hero2 h</span>)</span> &#123;</span><br><span class="line">        h.hp -= damage;</span><br><span class="line">        System.<span class="keyword">out</span>.format(<span class="string">&quot;%s 正在攻击 %s, %s 的血变成了 %.0f%n&quot;</span>, name, h.name, h.name, h.hp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (h.isDead()) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(h.name + <span class="string">&quot; 死了！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">isDead</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> &gt;= hp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在方法前，加上修饰符synchronized"><a href="#在方法前，加上修饰符synchronized" class="headerlink" title="在方法前，加上修饰符synchronized"></a>在方法前，加上修饰符synchronized</h3><p>在recover前，直接加上synchronized ，其所对应的同步对象，就是this 和hurt方法达到的效果是一样 外部线程访问gareen的方法，就不需要额外使用synchronized 了</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">package multiplethread;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hero2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> hp;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> damage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回血</span></span><br><span class="line">    <span class="comment">//直接在方法前加上修饰符synchronized</span></span><br><span class="line">    <span class="comment">//其所对应的同步对象，就是this</span></span><br><span class="line">    <span class="comment">//和hurt方法达到的效果一样</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> synchronized <span class="keyword">void</span> <span class="title">recover</span>()</span> &#123;</span><br><span class="line">        hp += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//掉血</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hurt</span>()</span> &#123;</span><br><span class="line">        <span class="comment">//使用this作为同步对象</span></span><br><span class="line">        synchronized (<span class="keyword">this</span>) &#123;</span><br><span class="line">            hp -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attackHero</span>(<span class="params">Hero2 h</span>)</span> &#123;</span><br><span class="line">        h.hp -= damage;</span><br><span class="line">        System.<span class="keyword">out</span>.format(<span class="string">&quot;%s 正在攻击 %s, %s 的血变成了 %.0f%n&quot;</span>, name, h.name, h.name, h.hp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (h.isDead()) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(h.name + <span class="string">&quot; 死了！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">isDead</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> &gt;= hp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">package multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestThread</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        final Hero2 gareen = <span class="keyword">new</span> Hero2();</span><br><span class="line">        gareen.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        gareen.hp = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> n = <span class="number">10000</span>;</span><br><span class="line">        Thread[] addThreads = <span class="keyword">new</span> Thread[n];</span><br><span class="line">        Thread[] reduceThreads = <span class="keyword">new</span> Thread[n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span> &#123;</span><br><span class="line">                    gareen.recover();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            t.start();</span><br><span class="line">            addThreads[i] = t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span>&#123;</span><br><span class="line">                    <span class="comment">//使用gareen作为synchronized</span></span><br><span class="line">                    <span class="comment">//在方法hurt中有synchronized(this)</span></span><br><span class="line">                    gareen.hurt();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            t.start();</span><br><span class="line">            reduceThreads[i] = t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Thread t : addThreads) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.<span class="keyword">join</span>();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread t : reduceThreads) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.<span class="keyword">join</span>();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.printf(<span class="string">&quot;%d个增加线程和%d个减少线程结束后%n盖伦的血量是 %.0f%n&quot;</span>, n,n,gareen.hp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程安全的类"><a href="#线程安全的类" class="headerlink" title="线程安全的类"></a>线程安全的类</h3><p>如果一个类，其<strong>方法都是有synchronized修饰的</strong>，那么该类就叫做<strong>线程安全的类</strong></p>
<p>同一时间，只有一个线程能够进入 <strong>这种类的一个实例</strong> 的去修改数据，进而保证了这个实例中的数据的安全(不会同时被多线程修改而变成脏数据)</p>
<p>比如StringBuffer和StringBuilder的区别 StringBuffer的方法都是有synchronized修饰的，StringBuffer就叫做线程安全的类 而StringBuilder就不是线程安全的类</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220112211733979.png" alt="image-20220112211733979"></p>
<h2 id="线程安全的类-1"><a href="#线程安全的类-1" class="headerlink" title="线程安全的类"></a>线程安全的类</h2><p>常见的线程安全相关的面试题</p>
<h3 id="HashMap和Hashtable的区别"><a href="#HashMap和Hashtable的区别" class="headerlink" title="HashMap和Hashtable的区别"></a>HashMap和Hashtable的区别</h3><p>HashMap和Hashtable都实现了Map接口，都是键值对保存数据的方式 <strong>区别1：</strong> HashMap可以存放 null Hashtable不能存放null <strong>区别2：</strong> HashMap不是<a href="https://how2j.cn/k/thread/thread-synchronized/355.html#step793">线程安全的类</a> Hashtable是线程安全的类</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220112211859723.png" alt="image-20220112211859723"></p>
<h3 id="StringBuffer和StringBuilder的区别"><a href="#StringBuffer和StringBuilder的区别" class="headerlink" title="StringBuffer和StringBuilder的区别"></a>StringBuffer和StringBuilder的区别</h3><p>StringBuffer 是线程安全的 StringBuilder 是非线程安全的</p>
<p>所以当进行大量字符串拼接操作的时候，如果是单线程就用StringBuilder会更快些，如果是多线程，就需要用StringBuffer 保证数据的安全性</p>
<p><strong>非线程安全的</strong>为什么会比<strong>线程安全的</strong> 快？ 因为不需要同步嘛，省略了些时间</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220112211927366.png" alt="image-20220112211927366"></p>
<h3 id="ArrayList和Vector的区别"><a href="#ArrayList和Vector的区别" class="headerlink" title="ArrayList和Vector的区别"></a>ArrayList和Vector的区别</h3><p>ArrayList类的声明：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ArrayList&lt;E&gt;</span> <span class="keyword">extends</span> <span class="title">AbstractList&lt;E&gt;</span></span></span><br><span class="line">	implements <span class="type">List</span>&lt;<span class="type">E</span>&gt;, <span class="type">RandomAccess</span>, <span class="type">Cloneable</span>, java.io.<span class="type">Serializable</span></span><br></pre></td></tr></table></figure>

<p>Vector类的声明：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Vector&lt;E&gt;</span>    <span class="keyword">extends</span> <span class="title">AbstractList&lt;E&gt;</span></span></span><br><span class="line">    implements <span class="type">List</span>&lt;<span class="type">E</span>&gt;, <span class="type">RandomAccess</span>, <span class="type">Cloneable</span>, java.io.<span class="type">Serializable</span></span><br></pre></td></tr></table></figure>

<p>一模一样的~ 他们的区别也在于，Vector是线程安全的类，而ArrayList是非线程安全的。</p>
<h3 id="把非线程安全的集合转换为线程安全"><a href="#把非线程安全的集合转换为线程安全" class="headerlink" title="把非线程安全的集合转换为线程安全"></a>把非线程安全的集合转换为线程安全</h3><p>ArrayList是非线程安全的，换句话说，多个线程可以同时进入<strong>一个ArrayList对象</strong>的add方法</p>
<p>借助Collections.synchronizedList，可以把ArrayList转换为线程安全的List。</p>
<p>与此类似的，还有HashSet,LinkedList,HashMap等等非线程安全的类，都通过<a href="https://how2j.cn/k/collection/collection-collections/369.html">工具类Collections</a>转换为线程安全的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; list2 = Collections.synchronizedList(list1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><h3 id="演示死锁"><a href="#演示死锁" class="headerlink" title="演示死锁"></a>演示死锁</h3><p>\1. 线程1 首先占有对象1，接着试图占有对象2 \2. 线程2 首先占有对象2，接着试图占有对象1 \3. 线程1 等待线程2释放对象2 \4. 与此同时，线程2等待线程1释放对象1 就会。。。一直等待下去，直到天荒地老，海枯石烂，山无棱 ，天地合。。。</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220112212308191.png" alt="image-20220112212308191"></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> TestThread &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="keyword">final</span> Hero2 ahri = <span class="keyword">new</span> Hero2();</span><br><span class="line">        ahri.name = <span class="string">&quot;九尾妖狐&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> Hero2 annie = <span class="keyword">new</span> Hero2();</span><br><span class="line">        annie.name = <span class="string">&quot;安妮&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line">                <span class="comment">//占有九尾妖狐</span></span><br><span class="line">                <span class="keyword">synchronized</span> (ahri) &#123;</span><br><span class="line">                    System.out.<span class="keyword">println</span>(<span class="string">&quot;t1 已占有九尾妖狐&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//停顿1000毫秒，另一个线程有足够的时间占有安妮</span></span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.<span class="keyword">println</span>(<span class="string">&quot;t1 试图占有安妮&quot;</span>);</span><br><span class="line">                    System.out.<span class="keyword">println</span>(<span class="string">&quot;t1 等待中 。。。。&quot;</span>);</span><br><span class="line">                    <span class="keyword">synchronized</span> (annie) &#123;</span><br><span class="line">                        System.out.<span class="keyword">println</span>(<span class="string">&quot;do something&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> run()&#123;</span><br><span class="line">                <span class="comment">//占有安妮</span></span><br><span class="line">                <span class="keyword">synchronized</span> (annie) &#123;</span><br><span class="line">                    System.out.<span class="keyword">println</span>(<span class="string">&quot;t2 已占有安妮&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//停顿1000毫秒，另一个线程有足够的时间占有暂用九尾妖狐</span></span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.<span class="keyword">println</span>(<span class="string">&quot;t2 试图占有九尾妖狐&quot;</span>);</span><br><span class="line">                    System.out.<span class="keyword">println</span>(<span class="string">&quot;t2 等待中 。。。。&quot;</span>);</span><br><span class="line">                    <span class="keyword">synchronized</span> (ahri) &#123;</span><br><span class="line">                        System.out.<span class="keyword">println</span>(<span class="string">&quot;do something&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h2><p>线程之间有<strong>交互通知</strong>的需求，考虑如下情况： 有两个线程，处理同一个英雄。 一个加血，一个减血。</p>
<p>减血的线程，发现血量&#x3D;1，就停止减血，直到加血的线程为英雄加了血，才可以继续减血</p>
<h3 id="不好的解决方式"><a href="#不好的解决方式" class="headerlink" title="不好的解决方式"></a>不好的解决方式</h3><p>故意设计减血线程频率更高，盖伦的血量迟早会到达1 减血线程中<strong>使用while循环判断是否是1</strong>，如果是1就不停的循环,直到加血线程回复了血量 这是不好的解决方式，因为会大量占用CPU,拖慢性能</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">package multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hero2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> hp;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> damage;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> synchronized <span class="keyword">void</span> <span class="title">recover</span>()</span> &#123;</span><br><span class="line">        hp += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> synchronized <span class="keyword">void</span> <span class="title">hurt</span>()</span> &#123;</span><br><span class="line">        hp -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attackHero</span>(<span class="params">Hero2 h</span>)</span> &#123;</span><br><span class="line">        h.hp -= damage;</span><br><span class="line">        System.<span class="keyword">out</span>.format(<span class="string">&quot;%s 正在攻击 %s, %s 的血变成了 %.0f%n&quot;</span>, name, h.name, h.name, h.hp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (h.isDead()) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(h.name + <span class="string">&quot; 死了！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">isDead</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> &gt;= hp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">package multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestThread</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        final Hero2 gareen = <span class="keyword">new</span> Hero2();</span><br><span class="line">        gareen.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        gareen.hp = <span class="number">616</span>;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span> &#123;</span><br><span class="line">              <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                  <span class="comment">//因为减血更快，所以盖伦的血量迟早会到达1</span></span><br><span class="line">                  <span class="comment">//使用while循环判断是否是1，如果是1就不停的循环</span></span><br><span class="line">                  <span class="comment">//直到加血线程回复了血量</span></span><br><span class="line">                  <span class="keyword">while</span> (gareen.hp == <span class="number">1</span>) &#123;</span><br><span class="line">                      <span class="keyword">continue</span>;</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  gareen.hurt();</span><br><span class="line">                  System.<span class="keyword">out</span>.printf(<span class="string">&quot;t1 为%s 减血1点,减少血后，%s的血量是%.0f%n&quot;</span>,gareen.name,gareen.name,gareen.hp);</span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                      Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                  &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                      <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                      e.printStackTrace();</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                    gareen.recover();</span><br><span class="line">                    System.<span class="keyword">out</span>.printf(<span class="string">&quot;t2 为%s 回血1点,增加血后，%s的血量是%.0f%n&quot;</span>,gareen.name,gareen.name,gareen.hp);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用wait和notify进行线程交互"><a href="#使用wait和notify进行线程交互" class="headerlink" title="使用wait和notify进行线程交互"></a>使用wait和notify进行线程交互</h3><p>在Hero类中：hurt()减血方法：当hp&#x3D;1的时候，执行this.wait(). this.wait()<strong>表示 让占有this的线程等待，并临时释放占有</strong> 进入hurt方法的线程必然是减血线程，this.wait()会让减血线程临时释放对this的占有。 <strong>这样加血线程，就有机会进入recover()加血方法了</strong>。</p>
<p>recover() 加血方法：增加了血量，执行this.notify(); this.notify() 表示通知那些<strong>等待在this的线程</strong>，可以苏醒过来了。 等待在this的线程，恰恰就是减血线程。 一旦recover()结束， 加血线程释放了this，减血线程，就可以重新占有this，并执行后面的减血工作。</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220112213538215.png" alt="image-20220112213538215"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">package multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hero2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> hp;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> damage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> synchronized <span class="keyword">void</span> <span class="title">recover</span>()</span> &#123;</span><br><span class="line">        hp += <span class="number">1</span>;</span><br><span class="line">        System.<span class="keyword">out</span>.printf(<span class="string">&quot;%s 回血1点,增加血后，%s的血量是%.0f%n&quot;</span>, name, name, hp);</span><br><span class="line">        <span class="comment">// 通知那些等待在this对象上的线程，可以醒过来了，等待着的减血线程，苏醒过来</span></span><br><span class="line">        <span class="keyword">this</span>.notify();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> synchronized <span class="keyword">void</span> <span class="title">hurt</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hp == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 让占有this的减血线程，暂时释放对this的占有，并等待</span></span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        hp -= <span class="number">1</span>;</span><br><span class="line">        System.<span class="keyword">out</span>.printf(<span class="string">&quot;%s 减血1点,减少血后，%s的血量是%.0f%n&quot;</span>, name, name, hp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attackHero</span>(<span class="params">Hero2 h</span>)</span> &#123;</span><br><span class="line">        h.hp -= damage;</span><br><span class="line">        System.<span class="keyword">out</span>.format(<span class="string">&quot;%s 正在攻击 %s, %s 的血变成了 %.0f%n&quot;</span>, name, h.name, h.name, h.hp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (h.isDead()) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(h.name + <span class="string">&quot; 死了！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">isDead</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> &gt;= hp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">package multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestThread</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        final Hero2 gareen = <span class="keyword">new</span> Hero2();</span><br><span class="line">        gareen.name = <span class="string">&quot;盖伦&quot;</span>;</span><br><span class="line">        gareen.hp = <span class="number">616</span>;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span> &#123;</span><br><span class="line">              <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                  <span class="comment">//无需循环判断</span></span><br><span class="line">                  <span class="comment">/*while (gareen.hp == 1) &#123;</span></span><br><span class="line"><span class="comment">                      continue;</span></span><br><span class="line"><span class="comment">                  &#125;*/</span></span><br><span class="line"></span><br><span class="line">                  gareen.hurt();</span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                      Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                  &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                      <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                      e.printStackTrace();</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                    gareen.recover();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="关于wait、notify和notifyAll"><a href="#关于wait、notify和notifyAll" class="headerlink" title="关于wait、notify和notifyAll"></a>关于wait、notify和notifyAll</h3><p>留意wait()和notify() 这两个方法是什么对象上的？</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">void</span> <span class="title">hurt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  。。。</span><br><span class="line">  <span class="keyword">this</span>.<span class="built_in">wait</span>();</span><br><span class="line">  。。。</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">void</span> <span class="title">recover</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   。。。</span><br><span class="line">   <span class="keyword">this</span>.<span class="built_in">notify</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里需要强调的是，wait方法和notify方法，并<strong>不是Thread线程上的方法</strong>，它们是Object上的方法。</p>
<p>因为所有的Object都可以被用来作为同步对象，所以准确的讲，wait和notify是同步对象上的方法。</p>
<p>wait()的意思是： 让占用了这个同步对象的<strong>线程</strong>，临时释放当前的占用，并且等待。 所以调用wait是有前提条件的，一定是在synchronized块里，否则就会出错。</p>
<p>notify() 的意思是，通知<strong>一个</strong>等待在这个同步对象上的线程，<strong>你</strong>可以苏醒过来了，有机会重新占用当前对象了。</p>
<p>notifyAll() 的意思是，通知<strong>所有的</strong>等待在这个同步对象上的线程，<strong>你们</strong>可以苏醒过来了，有机会重新占用当前对象了。</p>
<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>每一个线程的启动和结束都是比较消耗时间和占用资源的。</p>
<p>如果在系统中用到了很多的线程，大量的启动和结束动作会导致系统的性能变卡，响应变慢。</p>
<p>为了解决这个问题，引入线程池这种设计思想。</p>
<p>线程池的模式很像<a href="https://how2j.cn/k/thread/thread-wait-notify/358.html#step2591">生产者消费者模式</a>，消费的对象是一个一个的能够运行的<strong>任务</strong></p>
<h3 id="线程池设计思路"><a href="#线程池设计思路" class="headerlink" title="线程池设计思路"></a>线程池设计思路</h3><p>线程池的思路和<a href="https://how2j.cn/k/thread/thread-wait-notify/358.html#step2591">生产者消费者模型</a>是很接近的。 \1. 准备一个任务容器 \2. 一次性启动10个 消费者线程 \3. 刚开始任务容器是空的，所以线程都<strong>wait</strong>在上面。 \4. 直到一个外部线程往这个任务容器中扔了一个“任务”，就会有一个消费者线程被<a href="https://how2j.cn/k/thread/thread-wait-notify/358.html#step796">唤醒notify</a> \5. 这个消费者线程取出“任务”，并且<strong>执行这个任务</strong>，执行完毕后，继续等待下一次任务的到来。 \6. 如果短时间内，有较多的任务加入，那么就会有多个线程被<strong>唤醒</strong>，去执行这些任务。</p>
<p>在整个过程中，都不需要创建新的线程，而是<strong>循环使用这些已经存在的线程</strong></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220112214357660.png" alt="image-20220112214357660"></p>
<h3 id="开发一个自定义线程池"><a href="#开发一个自定义线程池" class="headerlink" title="开发一个自定义线程池"></a>开发一个自定义线程池</h3><p>这是一个自定义的线程池，虽然不够完善和健壮，但是已经足以说明线程池的工作原理</p>
<p>缓慢的给这个线程池添加任务，会看到有多条线程来执行这些任务。 线程7执行完毕任务后，<strong>又回到池子里</strong>，下一次任务来的时候，线程7又来执行新的任务。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPool</span> &#123;</span><br><span class="line">    <span class="comment">// 线程池大小</span></span><br><span class="line">    <span class="type">int</span> threadPoolSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 任务容器</span></span><br><span class="line">    LinkedList&lt;Runnable&gt; tasks = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 试图消费任务的线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadPool</span><span class="params">()</span> &#123;</span><br><span class="line">        threadPoolSize = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 启动10个任务消费者线程</span></span><br><span class="line">        <span class="keyword">synchronized</span> (tasks) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; threadPoolSize; i++) &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">TaskConsumeThread</span>(<span class="string">&quot;任务消费者线程 &quot;</span> + i).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (tasks) &#123;</span><br><span class="line">            tasks.add(r);</span><br><span class="line">            <span class="comment">// 唤醒等待的任务消费者线程</span></span><br><span class="line">            tasks.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">TaskConsumeThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TaskConsumeThread</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Runnable task;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;启动： &quot;</span> + <span class="built_in">this</span>.getName());</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (tasks) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (tasks.isEmpty()) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            tasks.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    task = tasks.removeLast();</span><br><span class="line">                    <span class="comment">// 允许添加任务的线程可以继续添加任务</span></span><br><span class="line">                    tasks.notifyAll();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="built_in">this</span>.getName() + <span class="string">&quot; 获取到任务，并执行&quot;</span>);</span><br><span class="line">                task.run();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPool</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;执行任务&quot;</span>);</span><br><span class="line">                    <span class="comment">//任务可能是打印一句话</span></span><br><span class="line">                    <span class="comment">//可能是访问文件</span></span><br><span class="line">                    <span class="comment">//可能是做排序</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            pool.add(task);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试线程池"><a href="#测试线程池" class="headerlink" title="测试线程池"></a>测试线程池</h3><p>创造一个情景，每个任务执行的时间都是1秒 刚开始是间隔1秒钟向线程池中添加任务</p>
<p>然后间隔时间越来越短，执行任务的线程还没有来得及结束，新的任务又来了。 就会观察到线程池里的其他线程被唤醒来执行这些任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPool</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sleep</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            pool.add(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;执行任务&quot;);</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(sleep);</span><br><span class="line">                sleep = sleep &gt; <span class="number">100</span> ? sleep-<span class="number">100</span> : sleep;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用java自带线程池"><a href="#使用java自带线程池" class="headerlink" title="使用java自带线程池"></a>使用java自带线程池</h3><p>java提供自带的线程池，而不需要自己去开发一个自定义线程池了。</p>
<p>线程池类<strong>ThreadPoolExecutor</strong>在包<strong>java.util.concurrent</strong>下</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">ThreadPoolExecutor threadPool= <span class="keyword">new</span> <span class="type">ThreadPoolExecutor</span>(<span class="number">10</span>, <span class="number">15</span>, <span class="number">60</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="type">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br></pre></td></tr></table></figure>

<p><strong>第一个</strong>参数10 表示这个线程池<strong>初始化了10个</strong>线程在里面工作 <strong>第二个</strong>参数15 表示如果10个线程不够用了，就会自动增加到<strong>最多15个线程</strong> <strong>第三个</strong>参数60 结合第四个参数TimeUnit.SECONDS，表示经过<strong>60秒</strong>，多出来的线程还没有接到活儿，就会回收，最后保持池子里就10个 <strong>第四个</strong>参数TimeUnit.SECONDS 如上 <strong>第五个</strong>参数 new LinkedBlockingQueue() 用来放任务的集合</p>
<p><strong>execute</strong>方法用于添加新的任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">10</span>, <span class="number">15</span>, <span class="number">60</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;Runnable&gt;());</span><br><span class="line">        threadPoolExecutor.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;任务1&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Lock对象"><a href="#Lock对象" class="headerlink" title="Lock对象"></a>Lock对象</h2><h3 id="回忆-synchronized-同步的方式"><a href="#回忆-synchronized-同步的方式" class="headerlink" title="回忆 synchronized 同步的方式"></a>回忆 synchronized 同步的方式</h3><p>首先回忆一下 <a href="https://how2j.cn/k/thread/thread-synchronized/355.html#step789">synchronized 同步对象</a>的方式</p>
<p>当一个线程占用 synchronized 同步对象，其他线程就不能占用了，直到释放这个同步对象为止</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220112225748278.png" alt="image-20220112225748278"></p>
<h3 id="使用Lock对象实现同步效果"><a href="#使用Lock对象实现同步效果" class="headerlink" title="使用Lock对象实现同步效果"></a>使用Lock对象实现同步效果</h3><p>Lock是一个接口，为了使用一个Lock对象，需要用到</p>
<figure class="highlight cos"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Lock</span> <span class="keyword">lock</span> = <span class="keyword">new</span> ReentrantLock()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>与 <strong>synchronized (someObject)</strong> 类似的，<strong>lock()<strong>方法，表示当前线程占用lock对象，一旦占用，其他线程就不能占用了。 与 <strong>synchronized</strong> 不同的是，一旦synchronized 块结束，就会自动释放对</strong>someObject</strong>的占用。 lock却必须调用<strong>unlock</strong>方法进行手动释放，为了保证释放的执行，往往会把unlock() 放在finally中进行。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.<span class="keyword">Lock</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestThread &#123;</span><br><span class="line">    <span class="built_in">public</span> static String now() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span> SimpleDateFormat(&quot;HH:mm:ss&quot;).format(<span class="built_in">new</span> <span class="type">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> log(String msg) &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.printf(&quot;%s %s %s %n&quot;, now(), Thread.currentThread().getName(), msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="keyword">Lock</span> <span class="keyword">lock</span> = <span class="built_in">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="built_in">new</span> Thread() &#123;</span><br><span class="line">            <span class="built_in">public</span> <span class="type">void</span> run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    log(&quot;线程启动&quot;);</span><br><span class="line">                    log(&quot;试图占有对象：lock&quot;);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">lock</span>.<span class="keyword">lock</span>();</span><br><span class="line">                    </span><br><span class="line">                    log(&quot;占有对象：lock&quot;);</span><br><span class="line">                    log(&quot;进行5秒的业务操作&quot;);</span><br><span class="line">                    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                    log(&quot;释放对象：lock&quot;);</span><br><span class="line">                    <span class="keyword">lock</span>.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">                log(&quot;线程结束&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        t1.setName(&quot;t1&quot;);</span><br><span class="line">        t1.<span class="keyword">start</span>();</span><br><span class="line">        try &#123;</span><br><span class="line">            //先让t1飞<span class="number">2</span>秒</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; catch (InterruptedException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread t2 = <span class="built_in">new</span> Thread() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">public</span> <span class="type">void</span> run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    log(&quot;线程启动&quot;);</span><br><span class="line">                    log(&quot;试图占有对象：lock&quot;);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">lock</span>.<span class="keyword">lock</span>();</span><br><span class="line"></span><br><span class="line">                    log(&quot;占有对象：lock&quot;);</span><br><span class="line">                    log(&quot;进行5秒的业务操作&quot;);</span><br><span class="line">                    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                    log(&quot;释放对象：lock&quot;);</span><br><span class="line">                    <span class="keyword">lock</span>.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">                log(&quot;线程结束&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t2.setName(&quot;t2&quot;);</span><br><span class="line">        t2.<span class="keyword">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="trylock方法"><a href="#trylock方法" class="headerlink" title="trylock方法"></a>trylock方法</h3><p>synchronized 是<strong>不占用到手不罢休</strong>的，会一直试图占用下去。 与 synchronized 的<strong>钻牛角尖</strong>不一样，Lock接口还提供了一个trylock方法。 trylock会在指定时间范围内<strong>试图占用</strong>，占成功了，就啪啪啪。 如果时间到了，还占用不成功，扭头就走~</p>
<p>注意： 因为使用trylock有可能成功，有可能失败，所以后面unlock释放锁的时候，需要判断是否占用成功了，如果没占用成功也unlock,就会抛出异常</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.<span class="keyword">Lock</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestThread &#123;</span><br><span class="line">    <span class="built_in">public</span> static String now() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span> SimpleDateFormat(&quot;HH:mm:ss&quot;).format(<span class="built_in">new</span> <span class="type">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> log(String msg) &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.printf(&quot;%s %s %s %n&quot;, now(), Thread.currentThread().getName(), msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="keyword">Lock</span> <span class="keyword">lock</span> = <span class="built_in">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="built_in">new</span> Thread() &#123;</span><br><span class="line">            <span class="built_in">public</span> <span class="type">void</span> run() &#123;</span><br><span class="line">                <span class="type">boolean</span> locked = <span class="keyword">false</span>;</span><br><span class="line">                try &#123;</span><br><span class="line">                    log(&quot;线程启动&quot;);</span><br><span class="line">                    log(&quot;试图占有对象：lock&quot;);</span><br><span class="line"></span><br><span class="line">                    locked = <span class="keyword">lock</span>.tryLock(<span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (locked) &#123;</span><br><span class="line">                        log(&quot;占有对象：lock&quot;);</span><br><span class="line">                        log(&quot;进行5秒的业务操作&quot;);</span><br><span class="line">                        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        log(&quot;经过1秒钟的努力，还没有占有对象，放弃占有&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (locked) &#123;</span><br><span class="line">                        log(&quot;释放对象：lock&quot;);</span><br><span class="line">                        <span class="keyword">lock</span>.unlock();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log(&quot;线程结束&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        t1.setName(&quot;t1&quot;);</span><br><span class="line">        t1.<span class="keyword">start</span>();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            //先让t1飞<span class="number">2</span>秒</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; catch (InterruptedException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="built_in">new</span> Thread() &#123;</span><br><span class="line">            <span class="built_in">public</span> <span class="type">void</span> run() &#123;</span><br><span class="line">                <span class="type">boolean</span> locked = <span class="keyword">false</span>;</span><br><span class="line">                try &#123;</span><br><span class="line">                    log(&quot;线程启动&quot;);</span><br><span class="line">                    log(&quot;试图占有对象：lock&quot;);</span><br><span class="line"></span><br><span class="line">                    locked = <span class="keyword">lock</span>.tryLock(<span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (locked) &#123;</span><br><span class="line">                        log(&quot;占有对象：lock&quot;);</span><br><span class="line">                        log(&quot;进行5秒的业务操作&quot;);</span><br><span class="line">                        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        log(&quot;经过1秒钟的努力，还没有占有对象，放弃占有&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (locked) &#123;</span><br><span class="line">                        log(&quot;释放对象：lock&quot;);</span><br><span class="line">                        <span class="keyword">lock</span>.unlock();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                log(&quot;线程结束&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t2.setName(&quot;t2&quot;);</span><br><span class="line">        t2.<span class="keyword">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程交互"><a href="#线程交互" class="headerlink" title="线程交互"></a>线程交互</h3><p>使用synchronized方式进行线程交互，用到的是同步对象的wait,notify和notifyAll方法</p>
<p>Lock也提供了类似的解决办法，首先通过lock对象得到一个Condition对象，然后分别调用这个Condition对象的：<strong>await</strong>, <strong>signal</strong>,<strong>signalAll</strong> 方法</p>
<p><strong>注意</strong>： 不是Condition对象的wait,nofity,notifyAll方法,是await,signal,signalAll</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.<span class="keyword">Lock</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestThread &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static String now() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">new</span> SimpleDateFormat(&quot;HH:mm:ss&quot;).format(<span class="built_in">new</span> <span class="type">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> log(String msg) &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.printf(&quot;%s %s %s %n&quot;, now(), Thread.currentThread().getName(), msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Lock</span> <span class="keyword">lock</span> = <span class="built_in">new</span> ReentrantLock();</span><br><span class="line">        Condition condition = <span class="keyword">lock</span>.newCondition();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="built_in">new</span> Thread() &#123;</span><br><span class="line">            <span class="built_in">public</span> <span class="type">void</span> run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    log(&quot;线程启动&quot;);</span><br><span class="line">                    log(&quot;试图占有对象：lock&quot;);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">lock</span>.<span class="keyword">lock</span>();</span><br><span class="line"></span><br><span class="line">                    log(&quot;占有对象：lock&quot;);</span><br><span class="line">                    log(&quot;进行5秒的业务操作&quot;);</span><br><span class="line">                    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">                    log(&quot;临时释放对象 lock， 并等待&quot;);</span><br><span class="line">                    condition.await();</span><br><span class="line">                    log(&quot;重新占有对象 lock，并进行5秒的业务操作&quot;);</span><br><span class="line"></span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                    log(&quot;释放对象：lock&quot;);</span><br><span class="line">                    <span class="keyword">lock</span>.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">                log(&quot;线程结束&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        t1.setName(&quot;t1&quot;);</span><br><span class="line">        t1.<span class="keyword">start</span>();</span><br><span class="line">        try &#123;</span><br><span class="line">            //先让t1飞<span class="number">2</span>秒</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; catch (InterruptedException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread t2 = <span class="built_in">new</span> Thread() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">public</span> <span class="type">void</span> run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    log(&quot;线程启动&quot;);</span><br><span class="line">                    log(&quot;试图占有对象：lock&quot;);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">lock</span>.<span class="keyword">lock</span>();</span><br><span class="line"></span><br><span class="line">                    log(&quot;占有对象：lock&quot;);</span><br><span class="line">                    log(&quot;进行5秒的业务操作&quot;);</span><br><span class="line">                    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                    log(&quot;唤醒等待中的线程&quot;);</span><br><span class="line">                    condition.signal();</span><br><span class="line"></span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; finally &#123;</span><br><span class="line">                    log(&quot;释放对象：lock&quot;);</span><br><span class="line">                    <span class="keyword">lock</span>.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">                log(&quot;线程结束&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t2.setName(&quot;t2&quot;);</span><br><span class="line">        t2.<span class="keyword">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结Lock和synchronized的区别"><a href="#总结Lock和synchronized的区别" class="headerlink" title="总结Lock和synchronized的区别"></a>总结Lock和synchronized的区别</h3><p>\1. Lock是一个接口，而synchronized是Java中的关键字，synchronized是内置的语言实现，Lock是代码层面的实现。</p>
<p>\2. Lock可以选择性的获取锁，如果一段时间获取不到，可以放弃。synchronized不行，会一根筋一直获取下去。 借助Lock的这个特性，就能够规避死锁，synchronized必须通过谨慎和良好的设计，才能减少死锁的发生。</p>
<p>\3. synchronized在发生异常和同步块结束的时候，会自动释放锁。而Lock必须手动释放， 所以如果忘记了释放锁，一样会造成死锁。</p>
<h2 id="原子访问"><a href="#原子访问" class="headerlink" title="原子访问"></a>原子访问</h2><h3 id="原子性操作概念"><a href="#原子性操作概念" class="headerlink" title="原子性操作概念"></a>原子性操作概念</h3><p>所谓的<strong>原子性操作</strong>即不可中断的操作，比如赋值操作</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">int i <span class="operator">=</span> <span class="number">5</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p><strong>原子性操作本身是线程安全的</strong> 但是 i++ 这个行为，事实上是有3个原子性操作组成的。 步骤 1. 取 i 的值 步骤 2. i + 1 步骤 3. 把新的值赋予i 这三个步骤，每一步都是一个原子操作，但是合在一起，就不是原子操作。就<strong>不是线程安全</strong>的。 换句话说，一个线程在步骤1 取i 的值结束后，还没有来得及进行步骤2，另一个线程也可以取 i的值了。 这也是<a href="https://how2j.cn/k/thread/thread-synchronized/355.html#step787">分析同步问题产生的原因</a> 中的原理。 i++ ，i–， i &#x3D; i+1 这些都是非原子性操作。 只有int i &#x3D; 1,这个赋值操作是原子性的。</p>
<h3 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h3><p>JDK6 以后，新增加了一个包<strong>java.util.concurrent.atomic</strong>，里面有各种原子类，比如<strong>AtomicInteger</strong>。 而AtomicInteger提供了各种自增，自减等方法，这些方法都是原子性的。 换句话说，自增方法 <strong>incrementAndGet</strong> 是线程安全的，同一个时间，只有一个线程可以调用这个方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> atomicInteger.decrementAndGet();</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> atomicInteger.incrementAndGet();</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> atomicInteger.addAndGet(<span class="number">3</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(j);</span><br><span class="line">        System.out.println(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="同步测试"><a href="#同步测试" class="headerlink" title="同步测试"></a>同步测试</h3><p>分别使用基本变量的非原子性的**++<strong>运算符和 原子性的</strong>AtomicInteger对象的 incrementAndGet** 来进行多线程测试。 测试结果如图所示</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package multiplethread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">concurrent</span>.<span class="property">atomic</span>.<span class="property">AtomicInteger</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> int value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="title class_">AtomicInteger</span> atomicValue = <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        int <span class="built_in">number</span> = <span class="number">100000</span>;</span><br><span class="line">        <span class="title class_">Thread</span>[] ts1 = <span class="keyword">new</span> <span class="title class_">Thread</span>[<span class="built_in">number</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="built_in">number</span>; i++) &#123;</span><br><span class="line">            <span class="title class_">Thread</span> t = <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">              <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">                  value++;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            t.<span class="title function_">start</span>();</span><br><span class="line">            ts1[i] = t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等待这些线程全部结束</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="title class_">Thread</span> t : ts1) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.<span class="title function_">join</span>();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="title class_">InterruptedException</span> e) &#123;</span><br><span class="line">                e.<span class="title function_">printStackTrace</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">printf</span>(<span class="string">&quot;%d个线程进行value++后，value的值变成:%d%n&quot;</span>, <span class="built_in">number</span>,value);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Thread</span>[] ts2 = <span class="keyword">new</span> <span class="title class_">Thread</span>[<span class="built_in">number</span>];</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="built_in">number</span>; i++) &#123;</span><br><span class="line">            <span class="title class_">Thread</span> t =<span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    atomicValue.<span class="title function_">incrementAndGet</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            t.<span class="title function_">start</span>();</span><br><span class="line">            ts2[i] = t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等待这些线程全部结束</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="title class_">Thread</span> t : ts2) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.<span class="title function_">join</span>();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="title class_">InterruptedException</span> e) &#123;</span><br><span class="line">                e.<span class="title function_">printStackTrace</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">printf</span>(<span class="string">&quot;%d个线程进行atomicValue.incrementAndGet();后，atomicValue的值变成:%d%n&quot;</span>, <span class="built_in">number</span>,atomicValue.<span class="title function_">intValue</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line"><span class="number">100000</span>个线程进行value++后，value的值变成:<span class="number">99996</span></span><br><span class="line"><span class="number">100000</span>个线程进行atomicValue.<span class="title function_">incrementAndGet</span>();后，atomicValue的值变成:<span class="number">100000</span> </span><br></pre></td></tr></table></figure>

<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="Hello-JDBC"><a href="#Hello-JDBC" class="headerlink" title="Hello JDBC"></a>Hello JDBC</h2><h3 id="为项目导入mysql-jdbc的jar包"><a href="#为项目导入mysql-jdbc的jar包" class="headerlink" title="为项目导入mysql-jdbc的jar包"></a>为项目导入mysql-jdbc的jar包</h3><h3 id="初始化驱动"><a href="#初始化驱动" class="headerlink" title="初始化驱动"></a>初始化驱动</h3><p>通过<strong>Class.forName</strong>(“com.mysql.jdbc.Driver”); 初始化驱动类<strong>com.mysql.jdbc.Driver</strong> 就在 mysql-connector-java-5.0.8-bin.jar中 如果忘记了<a href="https://how2j.cn/k/jdbc/jdbc-statement/387.html#step856">第一个步骤的导包</a>，就会抛出ClassNotFoundException</p>
<p><strong>Class.forName是把这个类加载到JVM中，加载的时候，就会执行其中的静态初始化块，完成驱动的初始化的相关工作。</strong></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> TestJDBC &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="comment">//初始化驱动</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//驱动类com.mysql.jdbc.Driver</span></span><br><span class="line">            <span class="comment">//就在 mysql-connector-java-5.0.8-bin.jar中</span></span><br><span class="line">            <span class="comment">//如果忘记了第一个步骤的导包，就会抛出ClassNotFoundException</span></span><br><span class="line">            <span class="keyword">Class</span>.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.<span class="keyword">println</span>(<span class="string">&quot;数据库驱动加载成功 ！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="建立与数据库的连接"><a href="#建立与数据库的连接" class="headerlink" title="建立与数据库的连接"></a>建立与数据库的连接</h3><p>建立与数据库的Connection连接 这里需要提供： 数据库所处于的ip:127.0.0.1 (本机) 数据库的端口号： 3306 （mysql专用端口号） 数据库名称 how2java 编码方式 UTF-8 账号 root 密码 admin</p>
<p>注： 这一步要成功执行，必须建立在mysql中有数据库how2java的基础上，如果没有，点击<a href="https://how2j.cn/k/mysql/mysql-createdatabase/379.html">创建数据库</a>查看如何进行数据库的创建。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJDBC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 建立与数据库的Connection连接</span></span><br><span class="line">            <span class="comment">// 这里需要提供：</span></span><br><span class="line">            <span class="comment">// 数据库所处于的ip:127.0.0.1 (本机)</span></span><br><span class="line">            <span class="comment">// 数据库的端口号： 3306 （mysql专用端口号）</span></span><br><span class="line">            <span class="comment">// 数据库名称 how2java</span></span><br><span class="line">            <span class="comment">// 编码方式 UTF-8</span></span><br><span class="line">            <span class="comment">// 账号 root</span></span><br><span class="line">            <span class="comment">// 密码 admin</span></span><br><span class="line"></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> DriverManager</span><br><span class="line">                    .getConnection(</span><br><span class="line">                            <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;连接成功，获取连接对象： &quot;</span> + c);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建Statement"><a href="#创建Statement" class="headerlink" title="创建Statement"></a>创建Statement</h3><p>Statement是用于执行SQL语句的，比如增加，删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJDBC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Statement</span> <span class="variable">s</span> <span class="operator">=</span> c.createStatement();</span><br><span class="line">            System.out.println(<span class="string">&quot;获取 Statement对象： &quot;</span> + s);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="执行SQL语句"><a href="#执行SQL语句" class="headerlink" title="执行SQL语句"></a>执行SQL语句</h3><p>s.execute执行sql语句 执行成功后，用mysql-front进行查看，明确插入成功</p>
<p>执行SQL语句之前要确保数据库how2java中有表hero的存在，如果没有，需要事先<a href="https://how2j.cn/k/mysql/mysql-createtable/380.html">创建表</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJDBC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Statement</span> <span class="variable">s</span> <span class="operator">=</span> c.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 准备sql语句</span></span><br><span class="line">            <span class="comment">// 注意： 字符串要用单引号&#x27;</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span><span class="string">&quot;insert into hero values(null, &quot;</span>+<span class="string">&quot;&#x27;提莫&#x27;&quot;</span>+<span class="string">&quot;,&quot;</span>+<span class="number">313.0f</span>+<span class="string">&quot;,&quot;</span>+<span class="number">50</span>+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">            s.execute(sql);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;执行插入语句成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a>关闭连接</h3><p>数据库的连接是有限资源，相关操作结束后，养成关闭数据库的好习惯 先关闭Statement 后关闭Connection</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJDBC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">            c = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">            s = c.createStatement();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 准备sql语句</span></span><br><span class="line">            <span class="comment">// 注意： 字符串要用单引号&#x27;</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span><span class="string">&quot;insert into hero values(null, &quot;</span>+<span class="string">&quot;&#x27;提莫&#x27;&quot;</span>+<span class="string">&quot;,&quot;</span>+<span class="number">313.0f</span>+<span class="string">&quot;,&quot;</span>+<span class="number">50</span>+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">            s.execute(sql);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;执行插入语句成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 数据库的连接时有限资源，相关操作结束后，养成关闭数据库的好习惯</span></span><br><span class="line">            <span class="comment">// 先关闭Statement</span></span><br><span class="line">            <span class="keyword">if</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    s.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 后关闭Connection</span></span><br><span class="line">            <span class="keyword">if</span> (c != <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    c.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用try-with-resource的方式自动关闭连接"><a href="#使用try-with-resource的方式自动关闭连接" class="headerlink" title="使用try-with-resource的方式自动关闭连接"></a>使用try-with-resource的方式自动关闭连接</h3><p>如果觉得上一步的关闭连接的方式很麻烦，可以参考<a href="https://how2j.cn/k/io/io-closestream/682.html#step2396">关闭流</a> 的方式，使用<strong>try-with-resource</strong>的方式自动关闭连接，因为Connection和Statement都实现了AutoCloseable接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJDBC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Statement</span> <span class="variable">s</span> <span class="operator">=</span> c.createStatement();</span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span><span class="string">&quot;insert into hero values(null, &quot;</span>+<span class="string">&quot;&#x27;提莫&#x27;&quot;</span>+<span class="string">&quot;,&quot;</span>+<span class="number">313.0f</span>+<span class="string">&quot;,&quot;</span>+<span class="number">50</span>+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">            s.execute(sql);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;执行插入语句成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="增、删、改"><a href="#增、删、改" class="headerlink" title="增、删、改"></a>增、删、改</h2><p>CRUD是最常见的数据库操作，即增删改查 <strong>C</strong> 增加(Create) <strong>R</strong> 读取查询(Retrieve) <strong>U</strong> 更新(Update) <strong>D</strong> 删除(Delete)</p>
<p>在JDBC中增加，删除，修改的操作都很类似，只是传递不同的SQL语句就行了。</p>
<p>查询因为要返回数据，所以和上面的不一样，将在<a href="https://how2j.cn/k/jdbc/jdbc-resultset/390.html">查询</a>章节讲解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJDBC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Statement</span> <span class="variable">s</span> <span class="operator">=</span> c.createStatement();</span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span><span class="string">&quot;insert into hero values(null, &quot;</span>+<span class="string">&quot;&#x27;提莫&#x27;&quot;</span>+<span class="string">&quot;,&quot;</span>+<span class="number">313.0f</span>+<span class="string">&quot;,&quot;</span>+<span class="number">50</span>+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">            s.execute(sql);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;执行插入语句成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><p>删除和增加很类似，只不过是执行的SQL语句不一样罢了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJDBC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Statement</span> <span class="variable">s</span> <span class="operator">=</span> c.createStatement();</span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from hero where id = 5&quot;</span>;</span><br><span class="line">            s.execute(sql);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>修改也一样，执行另一条SQL语句就可以了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJDBC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Statement</span> <span class="variable">s</span> <span class="operator">=</span> c.createStatement();</span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update hero set name = &#x27;name 5&#x27; where id = 3&quot;</span>;</span><br><span class="line">            s.execute(sql);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>执行查询SQL语句</p>
<h3 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h3><p>executeQuery 执行SQL查询语句</p>
<p><strong>注意：</strong> 在取第二列的数据的时候，用的是rs.get(2) ，而不是get(1). 这个是整个Java自带的api里<strong>唯二</strong>的地方，使用<strong>基1</strong>的，即2就代表第二个。</p>
<p>另一个地方是在<a href="https://how2j.cn/k/jdbc/jdbc-preparedstatement/388.html">PreparedStatement</a>这里</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJDBC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Statement</span> <span class="variable">s</span> <span class="operator">=</span> c.createStatement();</span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from hero&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行查询语句，并把结果集返回给ResultSet</span></span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> s.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);<span class="comment">// 可以使用字段名</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="number">2</span>);<span class="comment">// 也可以使用字段的顺序</span></span><br><span class="line">                <span class="type">float</span> <span class="variable">hp</span> <span class="operator">=</span> rs.getFloat(<span class="string">&quot;hp&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">damage</span> <span class="operator">=</span> rs.getInt(<span class="number">4</span>);</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t%s\t%f\t%d%n&quot;</span>, id, name, hp, damage);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不一定要在这里关闭ReultSet，因为Statement关闭的时候，会自动关闭ResultSet</span></span><br><span class="line">            <span class="comment">// rs.close();</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    <span class="number">1</span>	提莫	<span class="number">313.000000</span>	<span class="number">50</span></span><br><span class="line">    <span class="number">3</span>	name <span class="number">5</span>	<span class="number">313.000000</span>	<span class="number">50</span></span><br><span class="line">    <span class="number">4</span>	提莫	<span class="number">313.000000</span>	<span class="number">50</span></span><br><span class="line">    <span class="number">6</span>	提莫莫	<span class="number">313.000000</span>	<span class="number">50</span></span><br><span class="line">    <span class="number">7</span>	提莫莫	<span class="number">313.000000</span>	<span class="number">50</span></span><br><span class="line">    <span class="number">8</span>	提莫莫	<span class="number">313.000000</span>	<span class="number">50</span></span><br></pre></td></tr></table></figure>

<h3 id="SQL语句判断账号密码是否正确"><a href="#SQL语句判断账号密码是否正确" class="headerlink" title="SQL语句判断账号密码是否正确"></a>SQL语句判断账号密码是否正确</h3><p>\1. 创建一个用户表，有字段name,password \2. 插入一条数据</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">&#x27;dashen&#x27;</span>,<span class="string">&#x27;thisispassword&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>\3. SQL语句判断账号密码是否正确</p>
<p>判断账号密码的<strong>正确方式</strong>是根据账号和密码到表中去找数据，如果有数据，就表明密码正确了，如果没数据，就表明密码错误。</p>
<p><strong>不恰当的方式</strong> 是把uers表的数据全部查到内存中，挨个进行比较。 如果users表里有100万条数据呢？ 内存都不够用的。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">  id <span class="type">int</span>(<span class="number">11</span>) AUTO_INCREMENT,</span><br><span class="line">  <span class="type">name</span> <span class="type">varchar</span>(<span class="number">30</span>) ,</span><br><span class="line">  <span class="keyword">password</span> <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (id)</span><br><span class="line">) ;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;dashen&#x27;</span>,<span class="string">&#x27;thisispassword&#x27;</span>);</span><br><span class="line">package jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.*;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> TestJDBC &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            <span class="keyword">Class</span>.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        try (</span><br><span class="line">            <span class="keyword">Connection</span> c = DriverManager.getConnection(&quot;jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&quot;,</span><br><span class="line">                    &quot;root&quot;, &quot;admin&quot;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">Statement</span> s = c.createStatement();</span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">            String <span class="type">name</span> = &quot;dashen&quot;;</span><br><span class="line">            //正确的密码是：thisispassword</span><br><span class="line">            String <span class="keyword">password</span> = &quot;thisispassword1&quot;;</span><br><span class="line"></span><br><span class="line">            String <span class="keyword">sql</span> = &quot;select * from user where name = &#x27;&quot; + <span class="type">name</span> +&quot;&#x27; and password = &#x27;&quot; + <span class="keyword">password</span> +&quot;&#x27;&quot;;</span><br><span class="line"></span><br><span class="line">            // 执行查询语句，并把结果集返回给ResultSet</span><br><span class="line">            ResultSet rs = s.executeQuery(<span class="keyword">sql</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(rs.next())</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;账号密码正确&quot;);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;账号密码错误&quot;);</span><br><span class="line"></span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取总数"><a href="#获取总数" class="headerlink" title="获取总数"></a>获取总数</h3><p>执行的sql语句为</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> hero</span><br></pre></td></tr></table></figure>

<p>然后通过ResultSet获取出来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJDBC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Statement</span> <span class="variable">s</span> <span class="operator">=</span> c.createStatement();</span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;dashen&quot;</span>;</span><br><span class="line">            <span class="comment">//正确的密码是：thisispassword</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;thisispassword1&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(*) from hero&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> s.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                total = rs.getInt(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;表Hero中总共有:&quot;</span> + total +<span class="string">&quot; 条数据&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="预编译Statement"><a href="#预编译Statement" class="headerlink" title="预编译Statement"></a>预编译Statement</h2><h3 id="使用PreparedStatement"><a href="#使用PreparedStatement" class="headerlink" title="使用PreparedStatement"></a>使用PreparedStatement</h3><p>和 Statement一样，PreparedStatement也是用来执行sql语句的 与创建Statement不同的是，需要根据sql语句创建PreparedStatement 除此之外，还能够通过设置参数，指定相应的值，而不是Statement那样使用字符串拼接</p>
<p>注： 这是JAVA里唯二的基1的地方，另一个是<a href="https://how2j.cn/k/jdbc/jdbc-resultset/390.html#step866">查询语句</a>中的ResultSet也是基1的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJDBC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into hero values(null,?,?,?)&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> c.prepareStatement(sql);</span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置参数</span></span><br><span class="line">            ps.setString(<span class="number">1</span>, <span class="string">&quot;提莫&quot;</span>);</span><br><span class="line">            ps.setFloat(<span class="number">2</span>, <span class="number">313.0f</span>);</span><br><span class="line">            ps.setInt(<span class="number">3</span>, <span class="number">50</span>);</span><br><span class="line">            <span class="comment">// 执行</span></span><br><span class="line">            ps.execute();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PreparedStatement的优点1-参数设置"><a href="#PreparedStatement的优点1-参数设置" class="headerlink" title="PreparedStatement的优点1-参数设置"></a>PreparedStatement的优点1-参数设置</h3><p><strong>Statement</strong> 需要进行字符串拼接，可读性和维护性比较差</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">String sql = &quot;<span class="keyword">insert</span> <span class="keyword">into</span> hero <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">&quot;+&quot;</span><span class="string">&#x27;提莫&#x27;</span><span class="string">&quot;+&quot;</span>,<span class="string">&quot;+313.0f+&quot;</span>,<span class="string">&quot;+50+&quot;</span>)<span class="string">&quot;;</span></span><br></pre></td></tr></table></figure>

<p><strong>PreparedStatement</strong> 使用参数设置，可读性好，不易犯错</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">String sql = &quot;<span class="keyword">insert</span> <span class="keyword">into</span> hero <span class="keyword">values</span>(<span class="literal">null</span>,?,?,?)<span class="string">&quot;;</span></span><br></pre></td></tr></table></figure>

<h3 id="PreparedStatement的优点2-性能表现"><a href="#PreparedStatement的优点2-性能表现" class="headerlink" title="PreparedStatement的优点2-性能表现"></a>PreparedStatement的优点2-性能表现</h3><p>PreparedStatement有预编译机制，性能比Statement更快</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJDBC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into hero values(null,?,?,?)&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&quot;</span>,<span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">             <span class="type">Statement</span> <span class="variable">s</span> <span class="operator">=</span> c.createStatement();</span><br><span class="line">             <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> c.prepareStatement(sql);</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="comment">// Statement执行10次，需要10次把SQL语句传输到数据库端</span></span><br><span class="line">            <span class="comment">// 数据库要对每一次来的SQL语句进行编译处理</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">sql0</span> <span class="operator">=</span> <span class="string">&quot;insert into hero values(null,&quot;</span> + <span class="string">&quot;&#x27;提莫&#x27;&quot;</span> + <span class="string">&quot;,&quot;</span></span><br><span class="line">                        + <span class="number">313.0f</span> + <span class="string">&quot;,&quot;</span> + <span class="number">50</span> + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">                s.execute(sql0);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// PreparedStatement 执行10次，只需要1次把SQL语句传输到数据库端</span></span><br><span class="line">            <span class="comment">// 数据库对带?的SQL进行预编译</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 每次执行，只需要传输参数到数据库端</span></span><br><span class="line">            <span class="comment">// 1. 网络传输量比Statement更小</span></span><br><span class="line">            <span class="comment">// 2. 数据库不需要再进行编译，响应更快</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                ps.setString(<span class="number">1</span>, <span class="string">&quot;提莫&quot;</span>);</span><br><span class="line">                ps.setFloat(<span class="number">2</span>, <span class="number">313.0f</span>);</span><br><span class="line">                ps.setInt(<span class="number">3</span>, <span class="number">50</span>);</span><br><span class="line">                ps.execute();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PreparedStatement的优点3-防止SQL注入式攻击"><a href="#PreparedStatement的优点3-防止SQL注入式攻击" class="headerlink" title="PreparedStatement的优点3-防止SQL注入式攻击"></a>PreparedStatement的优点3-防止SQL注入式攻击</h3><p>假设name是用户提交来的数据</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">String name <span class="operator">=</span> <span class="string">&quot;&#x27;盖伦&#x27; OR 1=1&quot;</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>使用Statement就需要进行字符串拼接 拼接出来的语句是：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> hero <span class="keyword">where</span> <span class="type">name</span> = <span class="string">&#x27;盖伦&#x27;</span> <span class="keyword">OR</span> <span class="number">1</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>因为有OR 1&#x3D;1，这是恒成立的 那么就会把所有的英雄都查出来，而不只是盖伦 如果Hero表里的数据是海量的，比如几百万条，<strong>把这个表里的数据全部查出来</strong> 会让数据库负载变高，CPU100%，内存消耗光，<strong>响应变得极其缓慢</strong></p>
<p>而PreparedStatement使用的是<strong>参数设置</strong>，就不会有这个问题</p>
<h2 id="execute与executeUpdate的区别"><a href="#execute与executeUpdate的区别" class="headerlink" title="execute与executeUpdate的区别"></a>execute与executeUpdate的区别</h2><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><p><strong>execute</strong>与<strong>executeUpdate</strong>的相同点：都可以执行增加，删除，修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJDBC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&quot;</span>,<span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">            <span class="type">Statement</span> <span class="variable">s</span> <span class="operator">=</span> c.createStatement();) &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="type">String</span> <span class="variable">sqlInsert</span> <span class="operator">=</span> <span class="string">&quot;insert into Hero values (null,&#x27;盖伦&#x27;,616,100)&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sqlDelete</span> <span class="operator">=</span> <span class="string">&quot;delete from Hero where id = 100&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sqlUpdate</span> <span class="operator">=</span> <span class="string">&quot;update Hero set hp = 300 where id = 100&quot;</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 相同点：都可以执行增加，删除，修改</span></span><br><span class="line"> </span><br><span class="line">            s.execute(sqlInsert);</span><br><span class="line">            s.execute(sqlDelete);</span><br><span class="line">            s.execute(sqlUpdate);</span><br><span class="line">            s.executeUpdate(sqlInsert);</span><br><span class="line">            s.executeUpdate(sqlDelete);</span><br><span class="line">            s.executeUpdate(sqlUpdate);</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><p><strong>不同1：</strong> execute<strong>可以执行查询语句</strong> 然后通过getResultSet，把结果集取出来 executeUpdate<strong>不能执行查询语句</strong> <strong>不同2:</strong> execute<strong>返回boolean类型</strong>，true表示执行的是查询语句，false表示执行的是insert,delete,update等等 executeUpdate<strong>返回的是int</strong>，表示有多少条数据受到了影响</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJDBC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&quot;</span>,<span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">             <span class="type">Statement</span> <span class="variable">s</span> <span class="operator">=</span> c.createStatement();) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不同1：execute可以执行查询语句</span></span><br><span class="line">            <span class="comment">// 然后通过getResultSet，把结果集取出来</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sqlSelect</span> <span class="operator">=</span> <span class="string">&quot;select * from hero&quot;</span>;</span><br><span class="line"></span><br><span class="line">            s.execute(sqlSelect);</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> s.getResultSet();</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                System.out.println(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// executeUpdate不能执行查询语句</span></span><br><span class="line">            <span class="comment">// s.executeUpdate(sqlSelect);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不同2:</span></span><br><span class="line">            <span class="comment">// execute返回boolean类型，true表示执行的是查询语句，false表示执行的是insert,delete,update等等</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isSelect</span> <span class="operator">=</span> s.execute(sqlSelect);</span><br><span class="line">            System.out.println(isSelect);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// executeUpdate返回的是int，表示有多少条数据受到了影响</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sqlUpdate</span> <span class="operator">=</span> <span class="string">&quot;update Hero set hp = 300 where id &lt; 100&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> s.executeUpdate(sqlUpdate);</span><br><span class="line">            System.out.println(number);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="特殊操作"><a href="#特殊操作" class="headerlink" title="特殊操作"></a>特殊操作</h3><h3 id="获取自增长id"><a href="#获取自增长id" class="headerlink" title="获取自增长id"></a>获取自增长id</h3><p>在Statement通过execute或者executeUpdate执行完插入语句后，MySQL会为新插入的数据分配一个自增长id，(前提是这个表的id设置为了自增长,在Mysql创建表的时候，AUTO_INCREMENT就表示自增长)</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> hero (</span><br><span class="line">  id <span class="meta">int</span>(11) AUTO_INCREMENT,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是无论是execute还是executeUpdate都不会返回这个自增长id是多少。需要通过<strong>Statement</strong>的<strong>getGeneratedKeys</strong>获取该id <strong>注：</strong> 第20行的代码，后面加了个<strong>Statement.RETURN_GENERATED_KEYS</strong>参数，以确保会返回自增长ID。 通常情况下不需要加这个，有的时候需要加，所以先加上，保险一些</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> c.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);</span><br><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJDBC</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into hero values(null,?,?,?)&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&quot;</span>,<span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">             <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> c.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);</span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">            ps.setString(<span class="number">1</span>, <span class="string">&quot;盖伦&quot;</span>);</span><br><span class="line">            ps.setFloat(<span class="number">2</span>, <span class="number">616</span>);</span><br><span class="line">            ps.setInt(<span class="number">3</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行插入语句</span></span><br><span class="line">            ps.execute();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 在执行完插入语句后，MySQL会为新插入的数据分配一个自增长id</span></span><br><span class="line">            <span class="comment">// JDBC通过getGeneratedKeys获取该id</span></span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> ps.getGeneratedKeys();</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="number">1</span>);</span><br><span class="line">                System.out.println(id);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取表的元数据"><a href="#获取表的元数据" class="headerlink" title="获取表的元数据"></a>获取表的元数据</h3><p>元数据概念： 和数据库服务器相关的数据，比如数据库版本，有哪些表，表有哪些字段，字段类型是什么等等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DatabaseMetaData;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJDBC</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&quot;</span>,<span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>);) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 查看数据库层面的元数据</span></span><br><span class="line">            <span class="comment">// 即数据库服务器版本，驱动版本，都有哪些数据库等等</span></span><br><span class="line"></span><br><span class="line">            <span class="type">DatabaseMetaData</span> <span class="variable">dbmd</span> <span class="operator">=</span> c.getMetaData();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取数据库服务器产品名称</span></span><br><span class="line">            System.out.println(<span class="string">&quot;数据库产品名称:\t&quot;</span>+dbmd.getDatabaseProductName());</span><br><span class="line">            <span class="comment">// 获取数据库服务器产品版本号</span></span><br><span class="line">            System.out.println(<span class="string">&quot;数据库产品版本:\t&quot;</span>+dbmd.getDatabaseProductVersion());</span><br><span class="line">            <span class="comment">// 获取数据库服务器用作类别和表名之间的分隔符 如test.user</span></span><br><span class="line">            System.out.println(<span class="string">&quot;数据库和表分隔符:\t&quot;</span>+dbmd.getCatalogSeparator());</span><br><span class="line">            <span class="comment">// 获取驱动版本</span></span><br><span class="line">            System.out.println(<span class="string">&quot;驱动版本:\t&quot;</span>+dbmd.getDriverVersion());</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;可用的数据库列表：&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取数据库名称</span></span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> dbmd.getCatalogs();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;数据库名称:\t&quot;</span>+rs.getString(<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="不使用事务的情况"><a href="#不使用事务的情况" class="headerlink" title="不使用事务的情况"></a>不使用事务的情况</h3><p><strong>没有事务的前提下</strong> 假设业务操作是：加血，减血各做一次 结束后，英雄的血量不变 而减血的SQL 不小心写错写成了 updat<strong>a</strong>(而非update) 那么最后结果是血量增加了，而非期望的不变</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJDBC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&quot;</span>,<span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">            <span class="type">Statement</span> <span class="variable">s</span> <span class="operator">=</span> c.createStatement();) &#123;</span><br><span class="line">  </span><br><span class="line">            <span class="comment">//没有事务的前提下</span></span><br><span class="line">            <span class="comment">//假设业务操作时，加血，减血各做一次</span></span><br><span class="line">            <span class="comment">//结束后，英雄的血量不变</span></span><br><span class="line">              </span><br><span class="line">            <span class="comment">//加血的SQL</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update hero set hp = hp +1 where id = 22&quot;</span>;</span><br><span class="line">            s.execute(sql1);</span><br><span class="line">              </span><br><span class="line">            <span class="comment">//减血的SQL</span></span><br><span class="line">            <span class="comment">//不小心写错写成了 updata(而非update)</span></span><br><span class="line">              </span><br><span class="line">            <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;updata hero set hp = hp -1 where id = 22&quot;</span>;</span><br><span class="line">            s.execute(sql2);</span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用事务"><a href="#使用事务" class="headerlink" title="使用事务"></a>使用事务</h3><p>在事务中的多个操作，<strong>要么都成功，要么都失败</strong> 通过 c.setAutoCommit(false);<strong>关闭自动提交</strong> 使用 c.commit();进行<strong>手动提交</strong> 在22行-35行之间的数据库操作，就处于同一个事务当中，要么都成功，要么都失败 所以，虽然第一条SQL语句是可以执行的，但是第二条SQL语句有错误，其结果就是两条SQL语句<strong>都没有被提交</strong>。 除非两条SQL语句都是正确的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJDBC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&quot;</span>,<span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">            <span class="type">Statement</span> <span class="variable">s</span> <span class="operator">=</span> c.createStatement();) &#123;</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 有事务的前提下</span></span><br><span class="line">            <span class="comment">// 在事务中的多个操作，要么都成功，要么都失败</span></span><br><span class="line">  </span><br><span class="line">            c.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 加血的SQL</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update hero set hp = hp +1 where id = 22&quot;</span>;</span><br><span class="line">            s.execute(sql1);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 减血的SQL</span></span><br><span class="line">            <span class="comment">// 不小心写错写成了 updata(而非update)</span></span><br><span class="line">  </span><br><span class="line">            <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;updata hero set hp = hp -1 where id = 22&quot;</span>;</span><br><span class="line">            s.execute(sql2);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 手动提交</span></span><br><span class="line">            c.commit();</span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="MYSQL-表的类型必须是INNODB才支持事务"><a href="#MYSQL-表的类型必须是INNODB才支持事务" class="headerlink" title="MYSQL 表的类型必须是INNODB才支持事务"></a>MYSQL 表的类型必须是INNODB才支持事务</h3><p>在Mysql中，只有当表的类型是INNODB的时候，才支持事务，所以需要把表的类型设置为INNODB,否则无法观察到事务.</p>
<p>修改表的类型为INNODB的SQL：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">alter table hero ENGINE  <span class="operator">=</span> innodb<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>查看表的类型的SQL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> status <span class="keyword">from</span> how2java; </span><br></pre></td></tr></table></figure>

<p>不过有个前提，就是当前的MYSQL服务器本身要支持INNODB,如果不支持，请看 <a href="https://how2j.cn/k/mysql/mysql-innodb/1064.html">开启MYSQL INNODB的办法</a></p>
<h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>ORM&#x3D;Object Relationship Database Mapping</p>
<p>对象和关系数据库的映射</p>
<p>简单说，<strong>一个对象</strong>，对应数据库里的<strong>一条记录</strong></p>
<h3 id="根据id返回一个Hero对象"><a href="#根据id返回一个Hero对象" class="headerlink" title="根据id返回一个Hero对象"></a>根据id返回一个Hero对象</h3><p>提供方法get(int id) 返回一个Hero3对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJDBC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Hero3 <span class="title function_">get</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="type">Hero3</span> <span class="variable">hero3</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&quot;</span>,<span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">            <span class="type">Statement</span> <span class="variable">s</span> <span class="operator">=</span> c.createStatement();</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from hero where id = &quot;</span> + id;</span><br><span class="line"></span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> s.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 因为id是唯一的，ResultSet最多只能有一条记录</span></span><br><span class="line">            <span class="comment">// 所以使用if代替while</span></span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                hero3 = <span class="keyword">new</span> <span class="title class_">Hero3</span>();</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="number">2</span>);</span><br><span class="line">                <span class="type">float</span> <span class="variable">hp</span> <span class="operator">=</span> rs.getFloat(<span class="string">&quot;hp&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">damage</span> <span class="operator">=</span> rs.getInt(<span class="number">4</span>);</span><br><span class="line">                hero3.name = name;</span><br><span class="line">                hero3.hp = hp;</span><br><span class="line">                hero3.damage = damage;</span><br><span class="line">                hero3.id = id;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hero3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Hero3</span> <span class="variable">h</span> <span class="operator">=</span> get(<span class="number">22</span>);</span><br><span class="line">        System.out.println(h.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h2><p>DAO&#x3D;<strong>D</strong>ata<strong>A</strong>ccess <strong>O</strong>bject</p>
<p>数据访问对象</p>
<p>实际上就是运用了<a href="https://how2j.cn/k/jdbc/jdbc-orm/391.html#step2641">练习-ORM</a>中的思路，把数据库相关的操作都封装在这个类里面，其他地方看不到JDBC的代码</p>
<h3 id="DAO接口"><a href="#DAO接口" class="headerlink" title="DAO接口"></a>DAO接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DAO</span> &#123;</span><br><span class="line">    <span class="comment">//增加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Hero3 hero)</span>;</span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Hero3 hero)</span>;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    <span class="keyword">public</span> Hero3 <span class="title function_">get</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Hero3&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Hero3&gt; <span class="title function_">list</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> count)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HeroDAO"><a href="#HeroDAO" class="headerlink" title="HeroDAO"></a>HeroDAO</h3><p>设计类HeroDAO，实现接口<a href="https://how2j.cn/k/jdbc/jdbc-dao/392.html#step874">DAO</a></p>
<p>这个HeroDAO和<a href="https://how2j.cn/k/jdbc/jdbc-orm/391.html#step2642">答案-ORM</a>很接近，做了几个改进： \1. 把驱动的初始化放在了构造方法HeroDAO里：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HeroDAO</span>()</span> &#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为驱动初始化只需要执行一次，所以放在这里更合适，其他方法里也不需要写了，代码更简洁</p>
<p>\2. 提供了一个getConnection方法返回连接 所有的数据库操作都需要事先拿到一个数据库连接Connection，以前的做法每个方法里都会写一个，如果要改动密码，那么每个地方都需要修改。 通过这种方式，只需要修改这一个地方就可以了。 代码变得更容易维护，而且也更加简洁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DAO</span> &#123;</span><br><span class="line">    <span class="comment">//增加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Hero3 hero)</span>;</span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Hero3 hero)</span>;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    <span class="keyword">public</span> Hero3 <span class="title function_">get</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Hero3&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Hero3&gt; <span class="title function_">list</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> count)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeroDAO</span> <span class="keyword">implements</span> <span class="title class_">DAO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeroDAO</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&quot;</span>, <span class="string">&quot;root&quot;</span>,</span><br><span class="line">                <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTotal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> getConnection();</span><br><span class="line">                <span class="type">Statement</span> <span class="variable">s</span> <span class="operator">=</span> c.createStatement();</span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(*) from hero&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> s.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                total = rs.getInt(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;total:&quot;</span> + total);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Hero3 hero)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into hero values(null,?,?,?)&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> getConnection();</span><br><span class="line">                <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> c.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);</span><br><span class="line">        ) &#123;</span><br><span class="line"></span><br><span class="line">            ps.setString(<span class="number">1</span>, hero.name);</span><br><span class="line">            ps.setFloat(<span class="number">2</span>, hero.hp);</span><br><span class="line">            ps.setInt(<span class="number">3</span>, hero.damage);</span><br><span class="line"></span><br><span class="line">            ps.execute();</span><br><span class="line"></span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> ps.getGeneratedKeys();</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="number">1</span>);</span><br><span class="line">                hero.id = id;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Hero3 hero)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update hero set name= ?, hp = ? , damage = ? where id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> getConnection(); <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> c.prepareStatement(sql);) &#123;</span><br><span class="line"></span><br><span class="line">            ps.setString(<span class="number">1</span>, hero.name);</span><br><span class="line">            ps.setFloat(<span class="number">2</span>, hero.hp);</span><br><span class="line">            ps.setInt(<span class="number">3</span>, hero.damage);</span><br><span class="line">            ps.setInt(<span class="number">4</span>, hero.id);</span><br><span class="line"></span><br><span class="line">            ps.execute();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> getConnection(); <span class="type">Statement</span> <span class="variable">s</span> <span class="operator">=</span> c.createStatement();) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from hero where id = &quot;</span> + id;</span><br><span class="line"></span><br><span class="line">            s.execute(sql);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Hero3 <span class="title function_">get</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="type">Hero3</span> <span class="variable">hero</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> getConnection(); <span class="type">Statement</span> <span class="variable">s</span> <span class="operator">=</span> c.createStatement();) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from hero where id = &quot;</span> + id;</span><br><span class="line"></span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> s.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                hero = <span class="keyword">new</span> <span class="title class_">Hero3</span>();</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="number">2</span>);</span><br><span class="line">                <span class="type">float</span> <span class="variable">hp</span> <span class="operator">=</span> rs.getFloat(<span class="string">&quot;hp&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">damage</span> <span class="operator">=</span> rs.getInt(<span class="number">4</span>);</span><br><span class="line">                hero.name = name;</span><br><span class="line">                hero.hp = hp;</span><br><span class="line">                hero.damage = damage;</span><br><span class="line">                hero.id = id;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hero;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Hero3&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list(<span class="number">0</span>, Short.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Hero3&gt; <span class="title function_">list</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> count)</span> &#123;</span><br><span class="line">        List&lt;Hero3&gt; heros = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Hero3&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from hero order by id desc limit ?,? &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> getConnection(); <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> c.prepareStatement(sql);) &#123;</span><br><span class="line"></span><br><span class="line">            ps.setInt(<span class="number">1</span>, start);</span><br><span class="line">            ps.setInt(<span class="number">2</span>, count);</span><br><span class="line"></span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> ps.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="type">Hero3</span> <span class="variable">hero</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero3</span>();</span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="number">1</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="number">2</span>);</span><br><span class="line">                <span class="type">float</span> <span class="variable">hp</span> <span class="operator">=</span> rs.getFloat(<span class="string">&quot;hp&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">damage</span> <span class="operator">=</span> rs.getInt(<span class="number">4</span>);</span><br><span class="line">                hero.id = id;</span><br><span class="line">                hero.name = name;</span><br><span class="line">                hero.hp = hp;</span><br><span class="line">                hero.damage = damage;</span><br><span class="line">                heros.add(hero);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> heros;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据库线程池"><a href="#数据库线程池" class="headerlink" title="数据库线程池"></a>数据库线程池</h2><p>与<a href="https://how2j.cn/k/thread/thread-threadpool/357.html">线程池</a>类似的，数据库也有一个数据库连接池。 不过他们的实现思路是不一样的。 本章节讲解了自定义数据库连接池类：ConnectionPool，虽然不是很完善和健壮，但是足以帮助大家理解ConnectionPool的基本原理。</p>
<h3 id="数据库连接池原理-传统方式"><a href="#数据库连接池原理-传统方式" class="headerlink" title="数据库连接池原理-传统方式"></a>数据库连接池原理-传统方式</h3><p>当有多个线程，每个线程都需要连接数据库执行SQL语句的话，那么每个线程都会创建一个连接，并且在使用完毕后，关闭连接。</p>
<p>创建连接和关闭连接的过程也是比较消耗时间的，当多线程并发的时候，系统就会变得很卡顿。</p>
<p>同时，一个数据库同时支持的连接总数也是有限的，如果多线程并发量很大，那么数据库连接的总数就会被消耗光，后续线程发起的数据库连接就会失败。</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220113155614547.png" alt="image-20220113155614547"></p>
<h3 id="数据库连接池原理-使用池"><a href="#数据库连接池原理-使用池" class="headerlink" title="数据库连接池原理-使用池"></a>数据库连接池原理-使用池</h3><p>与传统方式不同，连接池在使用之前，就会创建好一定数量的连接。 如果有任何线程需要使用连接，那么就从连接池里面<strong>借用</strong>，<strong>而不是自己重新创建</strong>. 使用完毕后，又把这个连接<strong>归还</strong>给连接池供下一次或者其他线程使用。 倘若发生多线程并发情况，连接池里的连接被<strong>借用光</strong>了，那么其他线程就会临时等待，直到有连接被<strong>归还</strong>回来，再继续使用。 整个过程，这些连接都<strong>不会被关闭</strong>，而是不断的被循环使用，从而节约了启动和关闭连接的时间。</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220113155704901.png" alt="image-20220113155704901"></p>
<h3 id="ConnectionPool构造方法和初始化"><a href="#ConnectionPool构造方法和初始化" class="headerlink" title="ConnectionPool构造方法和初始化"></a>ConnectionPool构造方法和初始化</h3><p>\1. ConnectionPool() 构造方法约定了这个连接池一共有多少连接</p>
<p>\2. 在init() 初始化方法中，创建了size条连接。 注意，这里不能使用try-with-resource这种自动关闭连接的方式，因为连接恰恰需要保持不关闭状态，供后续循环使用</p>
<p>\3. getConnection， 判断是否为空，如果是空的就wait等待，否则就借用一条连接出去</p>
<p>\4. returnConnection， 在使用完毕后，归还这个连接到连接池，并且在归还完毕后，调用notifyAll，通知那些等待的线程，有新的连接可以借用了。</p>
<p>注：连接池设计用到了多线程的wait和notifyAll，这些内容可以在<a href="https://how2j.cn/k/thread/thread-wait-notify/358.html">多线程交互</a>章节查阅学习。</p>
<p>代码比较复制代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConnectionPool</span> &#123;</span><br><span class="line">    List&lt;Connection&gt; cs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConnectionPool</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//这里恰恰不能使用try-with-resource的方式，因为这些连接都需要是&quot;活&quot;的，不要被自动关闭了</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">                cs.add(c);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (cs.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> cs.remove(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">returnConnection</span><span class="params">(Connection c)</span> &#123;</span><br><span class="line">        cs.add(c);</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><p>首先初始化一个有3条连接的数据库连接池 然后创建100个线程，每个线程都会从连接池中<strong>借用连接</strong>，并且在借用之后，归还连接。 拿到连接之后，执行一个耗时1秒的SQL语句。</p>
<p>运行程序，就可以观察到如图所示的效果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestConnectionPool</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConnectionPool</span> <span class="variable">cp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionPool</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">WorkingThread</span>(<span class="string">&quot;working thread&quot;</span> + i, cp).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WorkingThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ConnectionPool cp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WorkingThread</span><span class="params">(String name, ConnectionPool cp)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.cp = cp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> cp.getConnection();</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.getName()+ <span class="string">&quot;:\t 获取了一根连接，并开始工作&quot;</span>  );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Statement</span> <span class="variable">st</span> <span class="operator">=</span> c.createStatement())&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//模拟时耗１秒的数据库SQL语句</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            st.execute(<span class="string">&quot;select * from hero&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        cp.returnConnection(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="IP地址-端口"><a href="#IP地址-端口" class="headerlink" title="IP地址 端口"></a>IP地址 端口</h2><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>在网络中每台计算机都必须有一个的IP地址； 32位，4个字节，常用点分十进制的格式表示，例如：192.168.1.100 127.0.0.1 是固定ip地址，代表当前计算机，相当于面向对象里的 “<strong>this</strong>“</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220113000806547.png" alt="image-20220113000806547"></p>
<h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>两台计算机进行连接，总有一台服务器，一台客户端。 服务器和客户端之间的通信通过端口进行。如图：</p>
<p>ip地址是 192.168.1.100的服务器通过端口 8080 与ip地址是192.168.1.189的客户端 的1087端口通信</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220113000900004.png" alt="image-20220113000900004"></p>
<h3 id="获取本机IP地址"><a href="#获取本机IP地址" class="headerlink" title="获取本机IP地址"></a>获取本机IP地址</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSocket</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">host</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> host.getHostAddress();</span><br><span class="line">        System.out.println(<span class="string">&quot;本机ip地址：&quot;</span> + ip);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h3><p>使用ping判断一个地址是否能够到达 ping不是java的api，是windows中的一个小工具，用于判断一个地址的响应时间</p>
<p>如图 ping 192.168.2.106 可以返回这个地址的响应时间 time&lt;1ms表示很快，局域网一般就是这个响应时间</p>
<p>ping 192.168.2.206 返回Request timed out表示时间较久都没有响应返回，基本判断这个地址不可用</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220113001616191.png" alt="image-20220113001616191"></p>
<h3 id="使用java-执行ping命令"><a href="#使用java-执行ping命令" class="headerlink" title="使用java 执行ping命令"></a>使用java 执行ping命令</h3><p>借助 Runtime.getRuntime().exec() 可以运行一个windows的exe程序 如图，使用java运行 <strong>ping 192.168.2.106</strong>，返回这样的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> Runtime.getRuntime().exec(<span class="string">&quot;ping &quot;</span> + <span class="string">&quot;192.168.2.106&quot;</span>);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(p.getInputStream(), <span class="string">&quot;GBK&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (line.length() != <span class="number">0</span>)</span><br><span class="line">                sb.append(line + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;本次指令返回的消息是：&quot;</span>);</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    本次指令返回的消息是：</span><br><span class="line">    正在 Ping <span class="number">192.168</span><span class="number">.2</span><span class="number">.106</span> 具有 <span class="number">32</span> 字节的数据:</span><br><span class="line">    请求超时。</span><br><span class="line">    请求超时。</span><br><span class="line">    请求超时。</span><br><span class="line">    请求超时。</span><br><span class="line">    <span class="number">192.168</span><span class="number">.2</span><span class="number">.106</span> 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 = <span class="number">4</span>，已接收 = <span class="number">0</span>，丢失 = <span class="number">4</span> (<span class="number">100</span>% 丢失)，</span><br></pre></td></tr></table></figure>

<h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><p>使用 Socket(套接字)进行不同的程序之间的通信</p>
<h3 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h3><p>\1. 服务端开启8888端口，并监听着，时刻等待着客户端的连接请求 \2. 客户端知道服务端的ip地址和监听端口号，发出请求到服务端 客户端的端口地址是系统分配的，通常都会大于1024 一旦建立了连接，服务端会得到一个新的Socket对象，该对象负责与客户端进行通信。 <strong>注意：</strong> 在开发调试的过程中，如果修改过了服务器Server代码，要关闭启动的Server,否则新的Server不能启动，因为8888端口被占用了</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Java.assets/image-20220113130018743.png" alt="image-20220113130018743"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//服务端打开端口8888</span></span><br><span class="line">            <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//在8888端口上监听，看是否有连接请求过来</span></span><br><span class="line">            System.out.println(<span class="string">&quot;监听在端口号:8888&quot;</span>);</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;有连接过来&quot;</span> + s);</span><br><span class="line"></span><br><span class="line">            s.close();</span><br><span class="line">            ss.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//连接到本机的8888端口</span></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">            s.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="收发数字"><a href="#收发数字" class="headerlink" title="收发数字"></a>收发数字</h3><p>一旦建立了连接，服务端和客户端就可以通过Socket进行通信了 \1. 客户端打开输出流，并发送数字 110 \2. 服务端打开输入流，接受数字 110，并打印</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//服务端打开端口8888</span></span><br><span class="line">            <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//在8888端口上监听，看是否有连接请求过来</span></span><br><span class="line">            System.out.println(<span class="string">&quot;监听在端口号:8888&quot;</span>);</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//打开输入流</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> s.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读取客户端发送的数据</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">msg</span> <span class="operator">=</span> is.read();</span><br><span class="line">            <span class="comment">//打印出来</span></span><br><span class="line">            System.out.println(msg);</span><br><span class="line">            is.close();</span><br><span class="line"></span><br><span class="line">            s.close();</span><br><span class="line">            ss.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//连接到本机的8888端口</span></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 打开输出流</span></span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> s.getOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发送数字110到服务端</span></span><br><span class="line">            os.write(<span class="number">110</span>);</span><br><span class="line">            os.close();</span><br><span class="line"></span><br><span class="line">            s.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="收发字符串"><a href="#收发字符串" class="headerlink" title="收发字符串"></a>收发字符串</h3><p>直接使用字节流收发字符串比较麻烦，使用<a href="https://how2j.cn/k/io/io-datastream/350.html#step771">数据流</a>对字节流进行封装，这样收发字符串就容易了 \1. 把输出流封装在DataOutputStream中 使用writeUTF发送字符串 “Legendary!” \2. 把输入流封装在DataInputStream 使用readUTF读取字符串,并打印</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//服务端打开端口8888</span></span><br><span class="line">            <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//在8888端口上监听，看是否有连接请求过来</span></span><br><span class="line">            System.out.println(<span class="string">&quot;监听在端口号:8888&quot;</span>);</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//打开输入流</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> s.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把输入流封装在DataInputStream</span></span><br><span class="line">            <span class="type">DataInputStream</span> <span class="variable">dis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(is);</span><br><span class="line">            <span class="comment">//使用readUTF读取字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> dis.readUTF();</span><br><span class="line">            <span class="comment">//打印</span></span><br><span class="line">            System.out.println(msg);</span><br><span class="line"></span><br><span class="line">            dis.close();</span><br><span class="line">            s.close();</span><br><span class="line">            ss.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//连接到本机的8888端口</span></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 打开输出流</span></span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> s.getOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把输出流封装在DataOutputStream中</span></span><br><span class="line">            <span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(os);</span><br><span class="line">            <span class="comment">//使用writeUTF发送字符串</span></span><br><span class="line">            dos.writeUTF(<span class="string">&quot;Legendary!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            dos.close();</span><br><span class="line">            s.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用Scanner"><a href="#使用Scanner" class="headerlink" title="使用Scanner"></a>使用Scanner</h3><p>在上个步骤中，每次要发不同的数据都需要修改代码 可以使用<a href="https://how2j.cn/k/io/io-system-in/352.html#step774">Scanner</a>读取控制台的输入，并发送到服务端，这样每次都可以发送不同的数据了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//连接到本机的8888端口</span></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 打开输出流</span></span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> s.getOutputStream();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把输出流封装在DataOutputStream中</span></span><br><span class="line">            <span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(os);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用Scanner读取控制台的输入，并发送到服务端</span></span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用writeUTF发送字符串</span></span><br><span class="line">            dos.writeUTF(str);</span><br><span class="line"></span><br><span class="line">            dos.close();</span><br><span class="line">            s.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="服务端和客户端互聊"><a href="#服务端和客户端互聊" class="headerlink" title="服务端和客户端互聊"></a>服务端和客户端互聊</h3><p>前面部分的学习效果是服务端接受数据，客户端发送数据。</p>
<p>做相应的改动，使得服务端也能发送数据，客户端也能接受数据，并且可以一直持续下去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//服务端打开端口8888</span></span><br><span class="line">            <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//在8888端口上监听，看是否有连接请求过来</span></span><br><span class="line">            System.out.println(<span class="string">&quot;监听在端口号:8888&quot;</span>);</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> s.getInputStream();</span><br><span class="line">            <span class="type">DataInputStream</span> <span class="variable">dis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(is);</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> s.getOutputStream();</span><br><span class="line">            <span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(os);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> dis.readUTF();</span><br><span class="line">                System.out.println(<span class="string">&quot;收到客户端信息&quot;</span>+msg);</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line">                dos.writeUTF(str);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//连接到本机的8888端口</span></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> s.getOutputStream();</span><br><span class="line">            <span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(os);</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> s.getInputStream();</span><br><span class="line">            <span class="type">DataInputStream</span> <span class="variable">dis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(is);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line">                dos.writeUTF(str);</span><br><span class="line">                <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> dis.readUTF();</span><br><span class="line">                System.out.println(<span class="string">&quot;收到服务端信息&quot;</span>+msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多线程聊天"><a href="#多线程聊天" class="headerlink" title="多线程聊天"></a>多线程聊天</h2><p>如果使用单线程开发Socket应用，那么同一时间，要么收消息，要么发消息，不能同时进行。</p>
<p>为了实现<strong>同时收发消息</strong>，就需要用到多线程</p>
<p>在<a href="https://how2j.cn/k/socket/socket-socket/400.html#step2737">练习-服务端和客户端互聊</a> 中，只能一人说一句，说了之后，必须等待另一个人的回复，才能说下一句。</p>
<p>这是因为接受和发送都在主线程中，不能同时进行。 为了实现同时收发消息，基本设计思路是把收发分别放在不同的线程中进行</p>
<p>\1. SendThread 发送消息线程 \2. RecieveThread 接受消息线程 \3. Server一旦接受到连接，就启动收发两个线程 \4. Client 一旦建立了连接，就启动收发两个线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Socket s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SendThread</span><span class="params">(Socket s)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> s.getOutputStream();</span><br><span class="line">            <span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(os);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line">                dos.writeUTF(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecieveThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Socket s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RecieveThread</span><span class="params">(Socket s)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> s.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="type">DataInputStream</span> <span class="variable">dis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(is);</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> dis.readUTF();</span><br><span class="line">                System.out.println(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;监听在端口号:8888&quot;</span>);</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//启动发送消息线程</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">SendThread</span>(s).start();</span><br><span class="line">            <span class="comment">//启动接受消息线程</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">RecieveThread</span>(s).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 启动发送消息线程</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">SendThread</span>(s).start();</span><br><span class="line">            <span class="comment">// 启动接受消息线程</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">RecieveThread</span>(s).start();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>语言学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot红包小程序</title>
    <url>/2022/04/08/Spring-Boot%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>软件版本：java1.8，maven3.5.0，mysql5.7.25</p>
<ol>
<li><p>安装maven3.5.0</p>
<blockquote>
<p><a href="https://how2j.cn/k/maven/maven-download-config/1329.html">Maven系列教材 （二）- 下载与配置Maven (how2j.cn)</a></p>
</blockquote>
<span id="more"></span>
</li>
<li><p>新建项目</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Spring-Boot%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20220819105029040.png" alt="image-20220819105029040"></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Spring-Boot%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20220819105105212.png" alt="image-20220819105105212"></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Spring-Boot%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20220819105304989.png" alt="image-20220819105304989"></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Spring-Boot%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20220819105336611.png" alt="image-20220819105336611"></p>
</li>
<li><p><code>D:\apache-maven-3.5.0\conf\settings.xml</code>更改成阿里云的下载地址</p>
</li>
<li><p>重新引入一下</p>
<img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/Spring-Boot%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20220819105859291.png" alt="image-20220819105859291" style="zoom:67%;" /></li>
</ol>
<h2 id="第一次启动"><a href="#第一次启动" class="headerlink" title="第一次启动"></a>第一次启动</h2><p>注意Test可能报错类不存在，是因为test的包名错了</p>
<p>改成<code>import org.junit.Test;</code></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Spring-Boot%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20220819111323585.png" alt="image-20220819111323585"></p>
<p>什么都没有，因为什么都没写</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Spring-Boot%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20220819111525689.png" alt="image-20220819111525689"></p>
<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><ol>
<li><p><strong>@SpringBootApplication：申明让spring boot自动给程序进行必要的配置</strong></p>
<p>一般用在main方法所在的类上面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LuckymoneyApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(LuckymoneyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>@Controller：</strong>处理http请求</p>
</li>
<li><p><strong>@RestController：用于标注控制层组件</strong></p>
<p>一般在实施具体逻辑的类上面，Spring4之后新加的注解，原来返回json需要@ResponseBody配合@Controller</p>
</li>
<li><p><strong>@GetMapping：只支持GET请求访问</strong></p>
<p>一般放到@RestControlle标注的类的方法上面，通过return值，将内容展示出来</p>
<p>例如@GetMapping(“&#x2F;hello”)，就是可以用GET请求访问<a href="http://localhost:8080/hello">http://localhost:8080/hello</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello SpringBoot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>@Value()，单个配置载入</strong>，用在变量上</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;minMoney&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> BigDecimal minMoney;</span><br></pre></td></tr></table></figure>
</li>
<li><p>**将类连接yml配置，@Component和@ConfigurationProperties()**，放在类上面，参考后文的 多个配置载入</p>
</li>
<li><p><strong>@Autowired</strong> 参考后文的 多个配置载入</p>
</li>
<li><p><strong>@Entity</strong> 表明这是一个实体类，要与数据库做orm映射，默认表的名字就是类名，表中的字段就是类中的属性</p>
</li>
<li><p><strong>@Id</strong> 标注用于声明一个实体类的属性映射为数据库的主键列</p>
</li>
<li><p><strong>@GeneratedValue</strong> 表示自增</p>
</li>
<li><p><strong>@PostMapping(“”)</strong> 类似@GetMapping，支持POST请求，并且可以指定访问路径</p>
</li>
<li><p><strong>@RequestParam(“produce”) String produce</strong> 获取请求参数的值。请求参数，谁创建的红包，发了多少钱</p>
</li>
<li><p><strong>@PathVariable(“id”) Integer id</strong> 获取url中的数据。一般是接受@GetMapping(“&#x2F;luckymoneys&#x2F;{id}”)或者@PutMapping(“&#x2F;luckymoneys&#x2F;{id}”)里面的参数{id}的</p>
</li>
<li><p><strong>@PutMapping</strong> </p>
</li>
<li><p><strong>@Service</strong> 注解用于类上，标记当前类是一个service类，加上该注解会将当前类自动注入到spring容器中，不需要再在applicationContext.xml文件定义bean了</p>
</li>
<li><p><strong>@Transactional</strong> 相当于事务的注解，**@Transactional只能保证java一同给你提交，也就是只是在java层面支持事务，但是不代表数据库本身支持事务，数据库引擎要更换成InnoDB才支持事务**</p>
</li>
</ol>
<h1 id="项目启动方式"><a href="#项目启动方式" class="headerlink" title="项目启动方式"></a>项目启动方式</h1><h2 id="直接通过idea启动"><a href="#直接通过idea启动" class="headerlink" title="直接通过idea启动"></a>直接通过idea启动</h2><h2 id="mvn命令启动"><a href="#mvn命令启动" class="headerlink" title="mvn命令启动"></a>mvn命令启动</h2><p>进入项目包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users&gt;<span class="built_in">cd</span> /d D:\project\springboot_Luckymoney</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">mvn spring-root:<span class="built_in">run</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>如果使用maven命令打包报错：无效的目标发行版</p>
<p>可能是使用的jdk版本和maven中配置的jdk版本不一致</p>
<p>只需要在D:\apache-maven-3.5.0\conf目录下修改setting.xml配置文件，在<code>&lt;profiles&gt;</code>标签中添加以下内容</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;profile&gt;</span>    </span><br><span class="line">    <span class="section">&lt;id&gt;</span><span class="attribute">jdk</span>-<span class="number">1</span>.<span class="number">8</span>&lt;/id&gt;    </span><br><span class="line">    <span class="section">&lt;activation&gt;</span>    </span><br><span class="line">        <span class="section">&lt;activeByDefault&gt;</span><span class="attribute">true</span>&lt;/activeByDefault&gt;    </span><br><span class="line">        <span class="section">&lt;jdk&gt;</span><span class="attribute">1</span>.<span class="number">8</span>&lt;/jdk&gt;    </span><br><span class="line">    <span class="section">&lt;/activation&gt;</span>    </span><br><span class="line">    <span class="section">&lt;properties&gt;</span>    </span><br><span class="line">        <span class="section">&lt;maven.compiler.source&gt;</span><span class="attribute">1</span>.<span class="number">8</span>&lt;/maven.compiler.source&gt;    </span><br><span class="line">        <span class="section">&lt;maven.compiler.target&gt;</span><span class="attribute">1</span>.<span class="number">8</span>&lt;/maven.compiler.target&gt;    </span><br><span class="line">        <span class="section">&lt;maven.compiler.compilerVersion&gt;</span><span class="attribute">1</span>.<span class="number">8</span>&lt;/maven.compiler.compilerVersion&gt;    </span><br><span class="line">    <span class="section">&lt;/properties&gt;</span>    </span><br><span class="line"><span class="section">&lt;/profile&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="mvn打包后启动"><a href="#mvn打包后启动" class="headerlink" title="mvn打包后启动"></a>mvn打包后启动</h2><p>打包：mvn clean package</p>
<p>启动：java -jar target&#x2F;luckymoney-0.0.1-SNAPSHOT.jar</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="配置端口及path"><a href="#配置端口及path" class="headerlink" title="配置端口及path"></a>配置端口及path</h2><p><strong>方式一：</strong></p>
<p>配置都写在<code>D:\project\springboot_Luckymoney\src\main\resources\application.properties</code>里面</p>
<p>改变端口：</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="title">server</span>.<span class="keyword">port</span>=8081</span><br></pre></td></tr></table></figure>

<p>增加一个路径：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.servlet.context-path</span>=/luckymoney</span><br></pre></td></tr></table></figure>

<p>这样<code>http://localhost:8080/hello</code>就不能访问了，要访问<code>http://localhost:8081/luckymoney/hello</code></p>
<p><strong>方式二：</strong></p>
<p>在<code>application.properties</code>同文件，创建一个<code>application.yml</code>，文件，然后删除<code>application.properties</code>，在<code>application.yml</code>文件里面配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/luckymoney</span></span><br></pre></td></tr></table></figure>

<h2 id="配置红包最小金额"><a href="#配置红包最小金额" class="headerlink" title="配置红包最小金额"></a>配置红包最小金额</h2><p>在<code>application.yml</code>文件里面添加</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">minMoney</span>: <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="单个配置载入"><a href="#单个配置载入" class="headerlink" title="单个配置载入"></a>单个配置载入</h3><p>单个配置直接用@Value()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.luckymoney;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minMoney&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal minMoney;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;minMoney:&quot;</span> + minMoney;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置发红包说明"><a href="#配置发红包说明" class="headerlink" title="配置发红包说明"></a>配置发红包说明</h2><p>在<code>application.yml</code>文件里面添加</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">description:</span> 最少要发一元</span><br></pre></td></tr></table></figure>

<p>配置载入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.luckymoney;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minMoney&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal minMoney;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;description&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;minMoney:&quot;</span> + minMoney + <span class="string">&quot;，说明:&quot;</span> + description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Spring-Boot%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20220819140112581.png" alt="image-20220819140112581"></p>
<p>在配置里面使用配置：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">minMoney</span>: <span class="number">2</span></span><br><span class="line"><span class="comment">#在配置里面使用配置</span></span><br><span class="line"><span class="attribute">description</span>: 最少要发<span class="variable">$&#123;minMoney&#125;</span>元</span><br></pre></td></tr></table></figure>

<h2 id="多个配置载入，使用对象配置"><a href="#多个配置载入，使用对象配置" class="headerlink" title="多个配置载入，使用对象配置"></a>多个配置载入，使用对象配置</h2><p>配置很多，并且配置之间有联系，则把配置放到类里面去，通过这个类的对象调用变量</p>
<p>1.更改 .yml 文件，加前缀 limit</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">limit:</span></span><br><span class="line">  <span class="attr">minMoney:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">maxMoney:</span> <span class="number">9999</span></span><br><span class="line">  <span class="comment">#在配置里面使用配置</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">最少要发$&#123;minMoney&#125;元</span></span><br></pre></td></tr></table></figure>

<p>2.然后使用@Component，以及将类连接yml配置@ConfigurationProperties，并且LimitConfig这个类里面的变量名必须和配置变量名一致，例如配置中的maxMoney: 9999就对应LimitConfig的private BigDecimal maxMoney;</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = <span class="string">&quot;limit&quot;</span>)</span>的意思就是连接limit这个前缀的配置</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.luckymoney;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;limit&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LimitConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal minMoney;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal maxMoney;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BigDecimal <span class="title function_">getMinMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> minMoney;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMinMoney</span><span class="params">(BigDecimal minMoney)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.minMoney = minMoney;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BigDecimal <span class="title function_">getMaxMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> maxMoney;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaxMoney</span><span class="params">(BigDecimal maxMoney)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxMoney = maxMoney;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.HelloController类，通过@Autowired自动接线，连接LimitConfig，得到LimitConfig对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.luckymoney;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LimitConfig limitConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;说明:&quot;</span> + limitConfig.getDescription();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="分离开发和上线环境"><a href="#分离开发和上线环境" class="headerlink" title="分离开发和上线环境"></a>分离开发和上线环境</h1><p>让测试的时候，最小金额是1分钱，上线以后，最小金额是1元钱</p>
<p>复制application.yml文件，变成开发环境配置application-dev.yml，和上线配置application-prod.yml</p>
<p><strong>application-dev.yml：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/luckymoney</span></span><br><span class="line"></span><br><span class="line"><span class="attr">limit:</span></span><br><span class="line">  <span class="attr">minMoney:</span> <span class="number">0.01</span></span><br><span class="line">  <span class="attr">maxMoney:</span> <span class="number">9999</span></span><br><span class="line">  <span class="comment">#在配置里面使用配置</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">最少要发$&#123;limit.minMoney&#125;元，最多要发$&#123;limit.maxMoney&#125;元</span></span><br></pre></td></tr></table></figure>

<p><strong>application-prod.yml：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/luckymoney</span></span><br><span class="line"></span><br><span class="line"><span class="attr">limit:</span></span><br><span class="line">  <span class="attr">minMoney:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">maxMoney:</span> <span class="number">9999</span></span><br><span class="line">  <span class="comment">#在配置里面使用配置</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">最少要发$&#123;limit.minMoney&#125;元，最多要发$&#123;limit.maxMoney&#125;元</span></span><br></pre></td></tr></table></figure>

<p><strong>application.yml：</strong></p>
<p>表示现在用的是dev，开发环境</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>

<p>测试结果：</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Spring-Boot%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20220819150559273.png" alt="image-20220819150559273"></p>
<p><strong>不通过idea应用不同配置的方法：</strong></p>
<p>打包：mvn clean package</p>
<p>启动：java -jar target&#x2F;luckymoney-0.0.1-SNAPSHOT.jar</p>
<p>启动prod配置：java -jar -Dspring.profiles.active&#x3D;prod target&#x2F;luckymoney-0.0.1-SNAPSHOT.jar</p>
<h1 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h1><img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/Spring-Boot%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20220819155417931.png" alt="image-20220819155417931" style="zoom:50%;" />

<img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/Spring-Boot%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20220819155424289.png" alt="image-20220819155424289" style="zoom:50%;" />

<h2 id="明确设计目标"><a href="#明确设计目标" class="headerlink" title="明确设计目标"></a>明确设计目标</h2><p>resful API设计</p>
<img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/Spring-Boot%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20220819155557638.png" alt="image-20220819155557638" style="zoom:50%;" />

<h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>在pom.xml文件中加入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这时，完整的依赖文件是</p>
<p><strong>pom.xml：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>luckymoney<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>luckymoney<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h2><p>application-dev.yml：</p>
<p><strong>注意：在<code>url</code>结尾一定要加<code>&amp;serverTimezone=Asia/Shanghai</code>，不然Spring Boot连接数据库的时候会报错</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/luckymoney</span></span><br><span class="line"></span><br><span class="line"><span class="attr">limit:</span></span><br><span class="line">  <span class="attr">minMoney:</span> <span class="number">0.01</span></span><br><span class="line">  <span class="attr">maxMoney:</span> <span class="number">9999</span></span><br><span class="line">  <span class="comment">#在配置里面使用配置</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">最少要发$&#123;limit.minMoney&#125;元，最多要发$&#123;limit.maxMoney&#125;元</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/luckymoney?characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">&#x27;admin&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="comment">#     create表示如果表存在，则删除这个表；update表示在原有表上更新</span></span><br><span class="line"><span class="comment">#     ddl-auto: create</span></span><br><span class="line"><span class="comment">#   是否在控制台展示sql语句</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="建库"><a href="#建库" class="headerlink" title="建库"></a>建库</h2><p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Spring-Boot%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20220819161137300.png" alt="image-20220819161137300"></p>
<h2 id="建表ORM映射"><a href="#建表ORM映射" class="headerlink" title="建表ORM映射"></a>建表ORM映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.luckymoney;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表明这是一个实体类，要与数据库做orm映射，默认表的名字就是类名，表中的字段就是类中的属性</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Luckymoney</span> &#123;</span><br><span class="line">    <span class="comment">// 标注用于声明一个实体类的属性映射为数据库的主键列</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="comment">// 表示自增</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal money;</span><br><span class="line">    <span class="comment">// 发送方</span></span><br><span class="line">    <span class="keyword">private</span> String produce;</span><br><span class="line">    <span class="comment">// 接收方</span></span><br><span class="line">    <span class="keyword">private</span> String consumer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Luckymoney</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BigDecimal <span class="title function_">getMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMoney</span><span class="params">(BigDecimal money)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProduce</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> produce;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProduce</span><span class="params">(String produce)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.produce = produce;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getConsumer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> consumer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setConsumer</span><span class="params">(String consumer)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.consumer = consumer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查询数据库的接口"><a href="#查询数据库的接口" class="headerlink" title="查询数据库的接口"></a>查询数据库的接口</h2><p>LuckmoneyRepository继承JpaRepository接口，主要是用来得到JpaRepository的方法，例如findAll()等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.luckymoney;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JpaRepository&lt;Luckymoney, Integer&gt; 第一个参数代表数据库的实体类，第二个参数是ID的类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LuckmoneyRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Luckymoney, Integer&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制红包数据库的类"><a href="#控制红包数据库的类" class="headerlink" title="控制红包数据库的类"></a>控制红包数据库的类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.luckymoney;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LuckymoneyController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LuckmoneyRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取红包列表</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/luckymoneys&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Luckymoney&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// findAll()查询所有Luckymoney列表</span></span><br><span class="line">        <span class="keyword">return</span> repository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用postman测试：<a href="http://localhost:8081/luckymoney/luckymoneys">http://localhost:8081/luckymoney/luckymoneys</a></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Spring-Boot%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20220819172623634.png" alt="image-20220819172623634"></p>
<h1 id="实现其他接口"><a href="#实现其他接口" class="headerlink" title="实现其他接口"></a>实现其他接口</h1><img src=" https://typora1321.oss-cn-beijing.aliyuncs.com/Spring-Boot%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20220819155557638.png" alt="image-20220819155557638" style="zoom:50%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.luckymoney;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LuckymoneyController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LuckmoneyRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取红包列表</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/luckymoneys&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Luckymoney&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// findAll()查询所有Luckymoney列表</span></span><br><span class="line">        <span class="keyword">return</span> repository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建红包(发红包)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/luckymoney&quot;)</span></span><br><span class="line">    <span class="comment">// @RequestParam(&quot;producer&quot;) String producer请求参数，谁创建的红包，发了多少钱</span></span><br><span class="line">    <span class="keyword">public</span> Luckymoney <span class="title function_">create</span><span class="params">(<span class="meta">@RequestParam(&quot;produce&quot;)</span> String produce,</span></span><br><span class="line"><span class="params">                             <span class="meta">@RequestParam(&quot;money&quot;)</span> BigDecimal money)</span> &#123;</span><br><span class="line">        <span class="type">Luckymoney</span> <span class="variable">luckymoney</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Luckymoney</span>();</span><br><span class="line">        luckymoney.setProduce(produce);</span><br><span class="line">        luckymoney.setMoney(money);</span><br><span class="line">        <span class="keyword">return</span> repository.save(luckymoney);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过ID查询红包</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/luckymoneys/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Luckymoney <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="comment">// orElse(null) 如果查不到，就返回null</span></span><br><span class="line">        <span class="keyword">return</span> repository.findById(id).orElse(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新红包(领红包)</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/luckymoneys/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="comment">// 更新的是comsumer，谁领了红包，传入id是因为id是主键，要通过主键定位</span></span><br><span class="line">    <span class="keyword">public</span> Luckymoney <span class="title function_">update</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class="line"><span class="params">                             <span class="meta">@RequestParam(&quot;consumer&quot;)</span> String consumer)</span> &#123;</span><br><span class="line">        <span class="comment">// 先把要更新的数据查询出来</span></span><br><span class="line">        Optional&lt;Luckymoney&gt; optional= repository.findById(id);</span><br><span class="line">        <span class="comment">// 如果有内容，再执行更新的操作</span></span><br><span class="line">        <span class="keyword">if</span> (optional.isPresent()) &#123;</span><br><span class="line">            <span class="type">Luckymoney</span> <span class="variable">luckymoney</span> <span class="operator">=</span> optional.get();</span><br><span class="line">            <span class="comment">// 查出来以后再更新</span></span><br><span class="line">            luckymoney.setConsumer(consumer);</span><br><span class="line">            <span class="keyword">return</span> repository.save(luckymoney);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>数据库事务，是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行</p>
<p><strong>@Transactional只能保证java一同给你提交，也就是只是在java层面支持事务，但是不代表数据库本身支持事务，数据库引擎要更换成InnoDB才支持事务</strong></p>
<p><strong>可以用于 扣库存 &gt; 创建订单 的同时性</strong></p>
<p>修改数据库的引擎，事务即可生效：</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/Spring-Boot%E5%B0%8F%E7%A8%8B%E5%BA%8F.assets/image-20220821184121229.png" alt="image-20220821184121229"></p>
<h2 id="LuckymoneyController"><a href="#LuckymoneyController" class="headerlink" title="LuckymoneyController"></a>LuckymoneyController</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.luckymoney;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LuckymoneyController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LuckmoneyRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LuckymoneyService service;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取红包列表</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/luckymoneys&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Luckymoney&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// findAll()查询所有Luckymoney列表</span></span><br><span class="line">        <span class="keyword">return</span> repository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建红包(发红包)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/luckymoney&quot;)</span></span><br><span class="line">    <span class="comment">// @RequestParam(&quot;producer&quot;) String producer请求参数，谁创建的红包，发了多少钱</span></span><br><span class="line">    <span class="keyword">public</span> Luckymoney <span class="title function_">create</span><span class="params">(<span class="meta">@RequestParam(&quot;produce&quot;)</span> String produce,</span></span><br><span class="line"><span class="params">                             <span class="meta">@RequestParam(&quot;money&quot;)</span> BigDecimal money)</span> &#123;</span><br><span class="line">        <span class="type">Luckymoney</span> <span class="variable">luckymoney</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Luckymoney</span>();</span><br><span class="line">        luckymoney.setProduce(produce);</span><br><span class="line">        luckymoney.setMoney(money);</span><br><span class="line">        <span class="keyword">return</span> repository.save(luckymoney);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过ID查询红包</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/luckymoneys/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Luckymoney <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="comment">// orElse(null) 如果查不到，就返回null</span></span><br><span class="line">        <span class="keyword">return</span> repository.findById(id).orElse(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新红包(领红包)</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/luckymoneys/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="comment">// 更新的是comsumer，谁领了红包，传入id是因为id是主键，要通过主键定位</span></span><br><span class="line">    <span class="keyword">public</span> Luckymoney <span class="title function_">update</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span><br><span class="line"><span class="params">                             <span class="meta">@RequestParam(&quot;consumer&quot;)</span> String consumer)</span> &#123;</span><br><span class="line">        <span class="comment">// 先把要更新的数据查询出来</span></span><br><span class="line">        Optional&lt;Luckymoney&gt; optional= repository.findById(id);</span><br><span class="line">        <span class="comment">// 如果有内容，再执行更新的操作</span></span><br><span class="line">        <span class="keyword">if</span> (optional.isPresent()) &#123;</span><br><span class="line">            <span class="type">Luckymoney</span> <span class="variable">luckymoney</span> <span class="operator">=</span> optional.get();</span><br><span class="line">            <span class="comment">// 查出来以后再更新</span></span><br><span class="line">            luckymoney.setConsumer(consumer);</span><br><span class="line">            <span class="keyword">return</span> repository.save(luckymoney);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/luckymoney/two&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createTwo</span><span class="params">()</span> &#123;</span><br><span class="line">        service.createTwo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="LuckymoneyService事务"><a href="#LuckymoneyService事务" class="headerlink" title="LuckymoneyService事务"></a>LuckymoneyService事务</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.luckymoney;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">// @Service注解用于类上，标记当前类是一个service类，加上该注解会将当前类自动注入到spring容器中，不需要再在applicationContext.xml文件定义bean了</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LuckymoneyService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LuckmoneyRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 事务 指数据库事务 数据库引擎要更换成InnoDB才支持事务</span></span><br><span class="line">    <span class="comment">// 可以用于 扣库存 &gt; 创建订单 的同时性</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="comment">// 事务注解</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createTwo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Luckymoney</span> <span class="variable">luckymoney1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Luckymoney</span>();</span><br><span class="line">        luckymoney1.setProduce(<span class="string">&quot;熊大&quot;</span>);</span><br><span class="line">        luckymoney1.setMoney(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">520</span>));</span><br><span class="line">        repository.save(luckymoney1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Luckymoney</span> <span class="variable">luckymoney2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Luckymoney</span>();</span><br><span class="line">        luckymoney2.setProduce(<span class="string">&quot;熊大&quot;</span>);</span><br><span class="line">        luckymoney2.setMoney(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">1314</span>));</span><br><span class="line">        repository.save(luckymoney2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web框架</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>红包程序</tag>
      </tags>
  </entry>
  <entry>
    <title>手写实现高性能缓存</title>
    <url>/2022/04/07/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%80%A7%E8%83%BD%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h1 id="非线程安全的缓存"><a href="#非线程安全的缓存" class="headerlink" title="非线程安全的缓存"></a>非线程安全的缓存</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> simple_cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最简单的缓存形式：HashMap</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cache1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Integer&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">compute</span><span class="params">(String userId)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> cache.get(userId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先检查HashMap里面有没有保存过之前的计算结果</span></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果缓存中找不到，那么需要现在来计算一下结果，并保存到HashMap中</span></span><br><span class="line">            result = doCompute(userId);</span><br><span class="line">            cache.put(userId, result);</span><br><span class="line">        &#125;        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟实际的业务中的计算逻辑，采用sleep代替</span></span><br><span class="line">    <span class="keyword">private</span> Integer <span class="title function_">doCompute</span><span class="params">(String userId)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Cache1</span> <span class="variable">cache1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cache1</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;开始计算了&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> cache1.compute(<span class="string">&quot;13&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第一次计算结果：&quot;</span> + result);</span><br><span class="line"></span><br><span class="line">        result = cache1.compute(<span class="string">&quot;13&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第二次计算结果：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="用synchronized保证并发安全"><a href="#用synchronized保证并发安全" class="headerlink" title="用synchronized保证并发安全"></a>用synchronized保证并发安全</h1><ul>
<li>性能差（用synchronized之后，线程变成串行的了，多个线程不能同时访问computer方法了，与缓存的使用性不符合）</li>
<li>代码复用性差</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> simple_cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最简单的缓存形式：HashMap</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cache1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Integer&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用synchronized保证并发安全</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Integer <span class="title function_">compute</span><span class="params">(String userId)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> cache.get(userId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先检查HashMap里面有没有保存过之前的计算结果</span></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果缓存中找不到，那么需要现在来计算一下结果，并保存到HashMap中</span></span><br><span class="line">            result = doCompute(userId);</span><br><span class="line">            cache.put(userId, result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟实际的业务中的计算逻辑，采用sleep代替</span></span><br><span class="line">    <span class="keyword">private</span> Integer <span class="title function_">doCompute</span><span class="params">(String userId)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Cache1</span> <span class="variable">cache1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cache1</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;开始计算了&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> cache1.compute(<span class="string">&quot;13&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第一次计算结果：&quot;</span> + result);</span><br><span class="line"></span><br><span class="line">        result = cache1.compute(<span class="string">&quot;13&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第二次计算结果：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="给HashMap加final关键字"><a href="#给HashMap加final关键字" class="headerlink" title="给HashMap加final关键字"></a>给HashMap加final关键字</h2><ul>
<li>属性被声明为final后，该变量则只能被赋值一次。且一旦被赋值，final的变量就不能再被改变。</li>
<li>所以我们把它加上final关键字，增强安全性。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> simple_cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最简单的缓存形式：HashMap</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cache1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String, Integer&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用synchronized保证并发安全</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Integer <span class="title function_">compute</span><span class="params">(String userId)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> cache.get(userId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先检查HashMap里面有没有保存过之前的计算结果</span></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果缓存中找不到，那么需要现在来计算一下结果，并保存到HashMap中</span></span><br><span class="line">            result = doCompute(userId);</span><br><span class="line">            cache.put(userId, result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟实际的业务中的计算逻辑，采用sleep代替</span></span><br><span class="line">    <span class="keyword">private</span> Integer <span class="title function_">doCompute</span><span class="params">(String userId)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Cache1</span> <span class="variable">cache1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cache1</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;开始计算了&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> cache1.compute(<span class="string">&quot;13&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第一次计算结果：&quot;</span> + result);</span><br><span class="line"></span><br><span class="line">        result = cache1.compute(<span class="string">&quot;13&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第二次计算结果：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="用装饰者模式将缓存与计算逻辑解耦"><a href="#用装饰者模式将缓存与计算逻辑解耦" class="headerlink" title="用装饰者模式将缓存与计算逻辑解耦"></a>用装饰者模式将缓存与计算逻辑解耦</h1><ul>
<li><p>有一个计算函数computer，用来代表耗时计算，每个计算器都要实现这个接口，这样就可以无侵入实现缓存功能</p>
</li>
<li><p>我们假设ExpensiveFunction类是耗时计算的实现类，实现了Computable接口，但是其本身不具备缓存功能，也不需要考虑缓存的事情</p>
</li>
<li><p>缺点：</p>
<ul>
<li>性能差，不能并行计算（还是synchronized的问题）</li>
<li>Cache3 当多个线程同时想计算的时候，需要慢慢等待，严重时，性能甚至比不用缓存更差</li>
</ul>
</li>
</ul>
<h2 id="Computable接口"><a href="#Computable接口" class="headerlink" title="Computable接口"></a>Computable接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> simple_cache.computable;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有一个计算函数compute，用来代表耗时计算，每个计算器都要实现这个接口，这样就可以无侵入实现缓存功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Computable</span> &lt;A, V&gt;&#123;</span><br><span class="line">    V <span class="title function_">compute</span><span class="params">(A arg)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="计算逻辑ExpensiveFunction"><a href="#计算逻辑ExpensiveFunction" class="headerlink" title="计算逻辑ExpensiveFunction"></a>计算逻辑ExpensiveFunction</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> simple_cache.computable;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExpensiveFunction类是耗时计算的实现类，实现了Computable接口，但是其本身不具备缓存功能，也不需要考虑缓存的事情</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExpensiveFunction</span> <span class="keyword">implements</span> <span class="title class_">Computable</span>&lt;String, Integer&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">compute</span><span class="params">(String arg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        <span class="keyword">return</span> Integer.valueOf(arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p><strong>缓存Cache2</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> simple_cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> simple_cache.computable.Computable;</span><br><span class="line"><span class="keyword">import</span> simple_cache.computable.ExpensiveFunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用装饰者模式，给计算器自动添加缓存功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cache2</span>&lt;A, V&gt; <span class="keyword">implements</span> <span class="title class_">Computable</span>&lt;A, V&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;A, V&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Computable&lt;A, V&gt; c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cache2</span><span class="params">(Computable&lt;A, V&gt; c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title function_">compute</span><span class="params">(A arg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入缓存机制&quot;</span>);</span><br><span class="line">        <span class="type">V</span> <span class="variable">result</span> <span class="operator">=</span> cache.get(arg);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">            result = c.compute(arg);</span><br><span class="line">            cache.put(arg, result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Cache2&lt;String, Integer&gt; expensiveCompute = <span class="keyword">new</span> <span class="title class_">Cache2</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">ExpensiveFunction</span>());</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;13&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第一次计算结果：&quot;</span> + result);</span><br><span class="line"></span><br><span class="line">        result = expensiveCompute.compute(<span class="string">&quot;13&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第二次计算结果：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多线程并发查询"><a href="#多线程并发查询" class="headerlink" title="多线程并发查询"></a>多线程并发查询</h2><p><strong>缓存Cache3多线程并发查询</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> simple_cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> simple_cache.computable.Computable;</span><br><span class="line"><span class="keyword">import</span> simple_cache.computable.ExpensiveFunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用装饰者模式，给计算器自动添加缓存功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cache3</span>&lt;A, V&gt; <span class="keyword">implements</span> <span class="title class_">Computable</span>&lt;A, V&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;A, V&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Computable&lt;A, V&gt; c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cache3</span><span class="params">(Computable&lt;A, V&gt; c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title function_">compute</span><span class="params">(A arg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入缓存机制&quot;</span>);</span><br><span class="line">        <span class="type">V</span> <span class="variable">result</span> <span class="operator">=</span> cache.get(arg);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">            result = c.compute(arg);</span><br><span class="line">            cache.put(arg, result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Cache3&lt;String, Integer&gt; expensiveCompute = <span class="keyword">new</span> <span class="title class_">Cache3</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">ExpensiveFunction</span>());</span><br><span class="line">        <span class="comment">// 第一个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;667&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第一个线程：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;667&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第二个线程：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第三个线程：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输出：其实第二个线程根本没必要等待第三个线程执行完毕</span><br><span class="line">进入缓存机制</span><br><span class="line">进入缓存机制</span><br><span class="line">第一个线程：<span class="number">667</span></span><br><span class="line">进入缓存机制</span><br><span class="line">第三个线程：<span class="number">666</span></span><br><span class="line">第二个线程：<span class="number">667</span></span><br></pre></td></tr></table></figure>

<h1 id="锁性能优化"><a href="#锁性能优化" class="headerlink" title="锁性能优化"></a>锁性能优化</h1><h2 id="减小锁的粒度"><a href="#减小锁的粒度" class="headerlink" title="减小锁的粒度"></a>减小锁的粒度</h2><p><strong>Cache4减小锁的粒度，试图提高性能</strong></p>
<ul>
<li>缺点：虽然提高了并发效率，但是并不意味着就是线程安全的，还需要考虑到同时读写等情况<ul>
<li>线程仍然不够安全，虽然多个线程不能同时写了，但是如果在写的同时读，同样是线程不安全的</li>
</ul>
</li>
<li>但是，其实没必要自己实现线程安全的HashMap，也不应该加synchronized，因为我们自己实现的性能远不如现有的并发集合</li>
<li>我们来使用ConcurrentHashMap优化我们的缓存</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> simple_cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> simple_cache.computable.Computable;</span><br><span class="line"><span class="keyword">import</span> simple_cache.computable.ExpensiveFunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缩小synchronized的粒度，提高性能，但是依然并发不安全</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cache4</span>&lt;A, V&gt; <span class="keyword">implements</span> <span class="title class_">Computable</span>&lt;A, V&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;A, V&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Computable&lt;A, V&gt; c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cache4</span><span class="params">(Computable&lt;A, V&gt; c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">compute</span><span class="params">(A arg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入缓存机制&quot;</span>);</span><br><span class="line">        <span class="type">V</span> <span class="variable">result</span> <span class="operator">=</span> cache.get(arg);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">            result = c.compute(arg);</span><br><span class="line">            <span class="comment">// 缩小synchronized保护的范围</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                cache.put(arg, result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Cache4&lt;String, Integer&gt; expensiveCompute = <span class="keyword">new</span> <span class="title class_">Cache4</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">ExpensiveFunction</span>());</span><br><span class="line">        <span class="comment">// 第一个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;667&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第一个线程：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;667&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第二个线程：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第三个线程：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="并发集合ConcurrentHashMap"><a href="#并发集合ConcurrentHashMap" class="headerlink" title="并发集合ConcurrentHashMap"></a>并发集合ConcurrentHashMap</h2><p><strong>Cache5采用并发集合ConcurrentHashMap保证并发安全</strong></p>
<ul>
<li>缺点：在计算完成前，另一个要求计算相同值的请求到来，会导致计算两遍，这和缓存想避免多次计算的初衷恰恰相反，是不可接受的</li>
</ul>
<p><strong>示意图：</strong></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%80%A7%E8%83%BD%E7%BC%93%E5%AD%98.assets/image-20220407124801817.png" alt="image-20220407124801817"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> simple_cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> simple_cache.computable.Computable;</span><br><span class="line"><span class="keyword">import</span> simple_cache.computable.ExpensiveFunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 采用ConcurrentHashMap保证并发安全</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cache5</span>&lt;A, V&gt; <span class="keyword">implements</span> <span class="title class_">Computable</span>&lt;A, V&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;A, V&gt; cache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Computable&lt;A, V&gt; c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cache5</span><span class="params">(Computable&lt;A, V&gt; c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">compute</span><span class="params">(A arg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入缓存机制&quot;</span>);</span><br><span class="line">        <span class="type">V</span> <span class="variable">result</span> <span class="operator">=</span> cache.get(arg);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">            result = c.compute(arg);</span><br><span class="line">            cache.put(arg, result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Cache5&lt;String, Integer&gt; expensiveCompute = <span class="keyword">new</span> <span class="title class_">Cache5</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">ExpensiveFunction</span>());</span><br><span class="line">        <span class="comment">// 第一个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;667&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第一个线程：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;667&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第二个线程：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第三个线程：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="演示ConcurrentHashMap的缺点"><a href="#演示ConcurrentHashMap的缺点" class="headerlink" title="演示ConcurrentHashMap的缺点"></a>演示ConcurrentHashMap的缺点</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> simple_cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> simple_cache.computable.Computable;</span><br><span class="line"><span class="keyword">import</span> simple_cache.computable.ExpensiveFunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 演示ConcurrentHashMap的缺点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cache6</span>&lt;A, V&gt; <span class="keyword">implements</span> <span class="title class_">Computable</span>&lt;A, V&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;A, V&gt; cache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Computable&lt;A, V&gt; c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cache6</span><span class="params">(Computable&lt;A, V&gt; c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">compute</span><span class="params">(A arg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入缓存机制&quot;</span>);</span><br><span class="line">        <span class="type">V</span> <span class="variable">result</span> <span class="operator">=</span> cache.get(arg);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">            result = c.compute(arg);</span><br><span class="line">            cache.put(arg, result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Cache6&lt;String, Integer&gt; expensiveCompute = <span class="keyword">new</span> <span class="title class_">Cache6</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">ExpensiveFunction</span>());</span><br><span class="line">        <span class="comment">// 第一个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第一个线程：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;667&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第二个线程：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第三个线程：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<p>三个线程同时进入缓存机制，5秒后同时给出了缓存结果，其实第一个线程和第三个线程重复计算了，并没有用到缓存结果，而是自己重新算了一遍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">进入缓存机制</span><br><span class="line">进入缓存机制</span><br><span class="line">进入缓存机制</span><br><span class="line">第三个线程：<span class="number">666</span></span><br><span class="line">第二个线程：<span class="number">667</span></span><br><span class="line">第一个线程：<span class="number">666</span></span><br></pre></td></tr></table></figure>

<h1 id="避免重复计算Future和Callable"><a href="#避免重复计算Future和Callable" class="headerlink" title="避免重复计算Future和Callable"></a>避免重复计算Future和Callable</h1><p><strong>利用Future避免重复计算</strong></p>
<ul>
<li>动机：现在不同的线程进来以后，确实可以同时计算，但是如果两个线程脚前脚后，也就是相差无几的进来请求同一个数据那么我们来看看会出现什么问题：重复计算</li>
<li>这个例子只有2个线程，并不可怕，但是如果是100个线程都请求同样的内容，却都需要重新计算，那么会造成巨大的浪费</li>
<li>后面的线程，如果能知道前面的线程正在计算，并且计算的内容和我自己要计算的内容一样，那么我只要等待你的计算结果写入缓存之后直接使用即可</li>
<li>缺点：如果有两个同时计算666的线程，同时调用cache.get()方法那么返回的结果都为null，后面还是会创建两个任务去计算相同的值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> simple_cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> simple_cache.computable.Computable;</span><br><span class="line"><span class="keyword">import</span> simple_cache.computable.ExpensiveFunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用Future避免重复计算</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cache7</span>&lt;A, V&gt; <span class="keyword">implements</span> <span class="title class_">Computable</span>&lt;A, V&gt; &#123;</span><br><span class="line">    <span class="comment">// Future包装value</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;A, Future&lt;V&gt;&gt; cache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Computable&lt;A, V&gt; c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cache7</span><span class="params">(Computable&lt;A, V&gt; c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">compute</span><span class="params">(A arg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 由于ConcurrentHashMap的可见性，当前一个线程写入了cache.put(arg, ft);的时候，后面的缓存就会得到f不是null</span></span><br><span class="line">        Future&lt;V&gt; f = cache.get(arg);</span><br><span class="line">        <span class="keyword">if</span> (f == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 新建一个任务</span></span><br><span class="line">            Callable&lt;V&gt; callable = <span class="keyword">new</span> <span class="title class_">Callable</span>&lt;V&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> V <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    <span class="keyword">return</span> c.compute(arg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            FutureTask&lt;V&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(callable);</span><br><span class="line">            f = ft;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 先将ft放入缓存，然后再进行计算</span></span><br><span class="line">            cache.put(arg, ft);</span><br><span class="line">            System.out.println(<span class="string">&quot;从FutureTask调用了计算函数&quot;</span>);</span><br><span class="line">            ft.run();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// get()不是立即返回的，而是在算完了结果以后才会返回；有结果之前get()会堵塞</span></span><br><span class="line">        <span class="comment">// 当ft.run();执行完毕之后， Future&lt;V&gt; f里面就有值了</span></span><br><span class="line">        <span class="keyword">return</span> f.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Cache7&lt;String, Integer&gt; expensiveCompute = <span class="keyword">new</span> <span class="title class_">Cache7</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">ExpensiveFunction</span>());</span><br><span class="line">        <span class="comment">// 第一个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第一个线程：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第二个线程：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;667&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第三个线程：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">从FutureTask调用了计算函数</span><br><span class="line">从FutureTask调用了计算函数</span><br><span class="line">第二个线程：<span class="number">666</span></span><br><span class="line">第一个线程：<span class="number">666</span></span><br><span class="line">第三个线程：<span class="number">667</span></span><br></pre></td></tr></table></figure>

<p>缺点：如果有两个同时计算666的线程，同时调用cache.get()方法那么返回的结果都为null，后面还是会创建两个任务去计算相同的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">从FutureTask调用了计算函数</span><br><span class="line">从FutureTask调用了计算函数</span><br><span class="line">从FutureTask调用了计算函数</span><br><span class="line">第一个线程：<span class="number">666</span></span><br><span class="line">第二个线程：<span class="number">666</span></span><br><span class="line">第三个线程：<span class="number">667</span></span><br></pre></td></tr></table></figure>

<h2 id="原子操作putIfAbsent"><a href="#原子操作putIfAbsent" class="headerlink" title="原子操作putIfAbsent"></a>原子操作putIfAbsent</h2><p>利用putIfAbsent优化Future小概率的重复计算</p>
<ul>
<li>利用Future可以避免重复计算，但是如果有两个同时计算666的线程，同时调用cache.get()方法那么返回的结果都为null，后面还是会创建两个任务去计算相同的值</li>
</ul>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%80%A7%E8%83%BD%E7%BC%93%E5%AD%98.assets/image-20220407190524546.png" alt="image-20220407190524546"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> simple_cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> simple_cache.computable.Computable;</span><br><span class="line"><span class="keyword">import</span> simple_cache.computable.ExpensiveFunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cache8</span>&lt;A, V&gt; <span class="keyword">implements</span> <span class="title class_">Computable</span>&lt;A, V&gt; &#123;</span><br><span class="line">    <span class="comment">// Future包装value</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;A, Future&lt;V&gt;&gt; cache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Computable&lt;A, V&gt; c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cache8</span><span class="params">(Computable&lt;A, V&gt; c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">compute</span><span class="params">(A arg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 由于ConcurrentHashMap的可见性，当前一个线程写入了cache.put(arg, ft);的时候，后面的缓存就会得到f不是null</span></span><br><span class="line">        Future&lt;V&gt; f = cache.get(arg);</span><br><span class="line">        <span class="keyword">if</span> (f == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 新建一个任务</span></span><br><span class="line">            Callable&lt;V&gt; callable = <span class="keyword">new</span> <span class="title class_">Callable</span>&lt;V&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> V <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    <span class="keyword">return</span> c.compute(arg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            FutureTask&lt;V&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(callable);</span><br><span class="line">            f = cache.putIfAbsent(arg, ft);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (f == <span class="literal">null</span>) &#123;</span><br><span class="line">                f = ft;</span><br><span class="line">                System.out.println(<span class="string">&quot;从FutureTask调用了计算函数&quot;</span>);</span><br><span class="line">                ft.run();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Cache8&lt;String, Integer&gt; expensiveCompute = <span class="keyword">new</span> <span class="title class_">Cache8</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">ExpensiveFunction</span>());</span><br><span class="line">        <span class="comment">// 第一个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第一个线程：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第二个线程：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;667&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第三个线程：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">从FutureTask调用了计算函数</span><br><span class="line">从FutureTask调用了计算函数</span><br><span class="line">第二个线程：<span class="number">666</span></span><br><span class="line">第三个线程：<span class="number">667</span></span><br><span class="line">第一个线程：<span class="number">666</span></span><br></pre></td></tr></table></figure>

<h1 id="ExcecutionException"><a href="#ExcecutionException" class="headerlink" title="ExcecutionException"></a>ExcecutionException</h1><h2 id="MayFail"><a href="#MayFail" class="headerlink" title="MayFail"></a>MayFail</h2><p><strong>耗时计算的实现类，有概率计算失败</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> simple_cache.computable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 耗时计算的实现类，有概率计算失败</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MayFail</span> <span class="keyword">implements</span> <span class="title class_">Computable</span>&lt;String, Integer&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">compute</span><span class="params">(String arg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">random</span> <span class="operator">=</span> Math.random();</span><br><span class="line">        <span class="keyword">if</span> (random &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;读取文件出错&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">return</span> Integer.valueOf(arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="正确的异常处理逻辑-各司其职"><a href="#正确的异常处理逻辑-各司其职" class="headerlink" title="正确的异常处理逻辑(各司其职)"></a>正确的异常处理逻辑(各司其职)</h2><ul>
<li>这3种异常之所以用不同的catch块捕获，是因为它们的处理逻辑是不同的<ul>
<li>CancellationException和InterruptedException是人为取消的，那么我们应该立即终止任务</li>
<li>但是如果是计算错误，且我们明确知道多试几次就可以得到答案，那么我们的逻辑应该是重试，尝试多次直到正确的结果出现</li>
<li>在这里，我们加上while（true）来保证计算出错不会影响我们的逻辑，然后如果是计算错误，就进入下一个循环，重新计算，直到计算成功；如果是人为取消，那么就抛出异常然后结束运行</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> simple_cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> simple_cache.computable.Computable;</span><br><span class="line"><span class="keyword">import</span> simple_cache.computable.ExpensiveFunction;</span><br><span class="line"><span class="keyword">import</span> simple_cache.computable.MayFail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cache9</span>&lt;A, V&gt; <span class="keyword">implements</span> <span class="title class_">Computable</span>&lt;A, V&gt; &#123;</span><br><span class="line">    <span class="comment">// Future包装value</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;A, Future&lt;V&gt;&gt; cache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Computable&lt;A, V&gt; c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cache9</span><span class="params">(Computable&lt;A, V&gt; c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">compute</span><span class="params">(A arg)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 由于ConcurrentHashMap的可见性，当前一个线程写入了cache.put(arg, ft);的时候，后面的缓存就会得到f不是null</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            Future&lt;V&gt; f = cache.get(arg);</span><br><span class="line">            <span class="keyword">if</span> (f == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 新建一个任务</span></span><br><span class="line">                Callable&lt;V&gt; callable = <span class="keyword">new</span> <span class="title class_">Callable</span>&lt;V&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> V <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="keyword">return</span> c.compute(arg);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                FutureTask&lt;V&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(callable);</span><br><span class="line">                f = cache.putIfAbsent(arg, ft);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (f == <span class="literal">null</span>) &#123;</span><br><span class="line">                    f = ft;</span><br><span class="line">                    System.out.println(<span class="string">&quot;从FutureTask调用了计算函数&quot;</span>);</span><br><span class="line">                    ft.run();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> f.get();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;被取消了&quot;</span>);</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;计算错误，需要重试&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Cache9&lt;String, Integer&gt; expensiveCompute = <span class="keyword">new</span> <span class="title class_">Cache9</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">MayFail</span>());</span><br><span class="line">        <span class="comment">// 第一个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第一个线程：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第二个线程：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;667&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第三个线程：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：一直循环(为什么？因为缓存被污染了)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">计算错误，需要重试</span><br><span class="line">计算错误，需要重试</span><br><span class="line">计算错误，需要重试</span><br><span class="line">计算错误，需要重试</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h1 id="缓存污染问题"><a href="#缓存污染问题" class="headerlink" title="缓存污染问题"></a>缓存污染问题</h1><p><strong>使用cache.remove(arg);清除被污染的缓存</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> simple_cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> simple_cache.computable.Computable;</span><br><span class="line"><span class="keyword">import</span> simple_cache.computable.ExpensiveFunction;</span><br><span class="line"><span class="keyword">import</span> simple_cache.computable.MayFail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cache9</span>&lt;A, V&gt; <span class="keyword">implements</span> <span class="title class_">Computable</span>&lt;A, V&gt; &#123;</span><br><span class="line">    <span class="comment">// Future包装value</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;A, Future&lt;V&gt;&gt; cache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Computable&lt;A, V&gt; c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cache9</span><span class="params">(Computable&lt;A, V&gt; c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">compute</span><span class="params">(A arg)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 由于ConcurrentHashMap的可见性，当前一个线程写入了cache.put(arg, ft);的时候，后面的缓存就会得到f不是null</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            Future&lt;V&gt; f = cache.get(arg);</span><br><span class="line">            <span class="keyword">if</span> (f == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 新建一个任务</span></span><br><span class="line">                Callable&lt;V&gt; callable = <span class="keyword">new</span> <span class="title class_">Callable</span>&lt;V&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> V <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="keyword">return</span> c.compute(arg);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                FutureTask&lt;V&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(callable);</span><br><span class="line">                f = cache.putIfAbsent(arg, ft);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (f == <span class="literal">null</span>) &#123;</span><br><span class="line">                    f = ft;</span><br><span class="line">                    System.out.println(<span class="string">&quot;从FutureTask调用了计算函数&quot;</span>);</span><br><span class="line">                    ft.run();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> f.get();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</span><br><span class="line">                <span class="comment">// 每个异常抛出以后，缓存都被清理掉了</span></span><br><span class="line">                System.out.println(<span class="string">&quot;被取消了&quot;</span>);</span><br><span class="line">                cache.remove(arg);</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                cache.remove(arg);</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;计算错误，需要重试&quot;</span>);</span><br><span class="line">                cache.remove(arg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Cache9&lt;String, Integer&gt; expensiveCompute = <span class="keyword">new</span> <span class="title class_">Cache9</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">MayFail</span>());</span><br><span class="line">        <span class="comment">// 第一个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第一个线程：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第二个线程：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;667&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第三个线程：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">从FutureTask调用了计算函数</span><br><span class="line">从FutureTask调用了计算函数</span><br><span class="line">计算错误，需要重试</span><br><span class="line">计算错误，需要重试</span><br><span class="line">从FutureTask调用了计算函数</span><br><span class="line">从FutureTask调用了计算函数</span><br><span class="line">第一个线程：<span class="number">666</span></span><br><span class="line">第二个线程：<span class="number">666</span></span><br><span class="line">第三个线程：<span class="number">667</span></span><br></pre></td></tr></table></figure>

<h1 id="缓存过期功能"><a href="#缓存过期功能" class="headerlink" title="缓存过期功能"></a>缓存过期功能</h1><ul>
<li><p>为每个结果指定过期时间，并定期扫描过期的元素</p>
</li>
<li><p>出于安全性考虑，缓存需要设置有效期，到期自动失效</p>
</li>
<li><p>否则如果缓存一直不失效，那么会带来缓存不一致等问题</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> simple_cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> simple_cache.computable.Computable;</span><br><span class="line"><span class="keyword">import</span> simple_cache.computable.MayFail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出于安全性考虑，缓存需要设置有效期，到期自动失效否则如果缓存一直不失效，那么会带来缓存不一致等问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cache10</span>&lt;A, V&gt; <span class="keyword">implements</span> <span class="title class_">Computable</span>&lt;A, V&gt; &#123;</span><br><span class="line">    <span class="comment">// Future包装value</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;A, Future&lt;V&gt;&gt; cache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Computable&lt;A, V&gt; c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cache10</span><span class="params">(Computable&lt;A, V&gt; c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">compute</span><span class="params">(A arg)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 由于ConcurrentHashMap的可见性，当前一个线程写入了cache.put(arg, ft);的时候，后面的缓存就会得到f不是null</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            Future&lt;V&gt; f = cache.get(arg);</span><br><span class="line">            <span class="keyword">if</span> (f == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 新建一个任务</span></span><br><span class="line">                Callable&lt;V&gt; callable = <span class="keyword">new</span> <span class="title class_">Callable</span>&lt;V&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> V <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="keyword">return</span> c.compute(arg);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                FutureTask&lt;V&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(callable);</span><br><span class="line">                f = cache.putIfAbsent(arg, ft);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (f == <span class="literal">null</span>) &#123;</span><br><span class="line">                    f = ft;</span><br><span class="line">                    System.out.println(<span class="string">&quot;从FutureTask调用了计算函数&quot;</span>);</span><br><span class="line">                    ft.run();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> f.get();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</span><br><span class="line">                <span class="comment">// 每个异常抛出以后，缓存都被清理掉了</span></span><br><span class="line">                System.out.println(<span class="string">&quot;被取消了&quot;</span>);</span><br><span class="line">                cache.remove(arg);</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                cache.remove(arg);</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;计算错误，需要重试&quot;</span>);</span><br><span class="line">                cache.remove(arg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">ScheduledExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">compute</span><span class="params">(A arg, <span class="type">long</span> expire)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (expire &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            executor.schedule(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    expire(arg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, expire, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> compute(arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">expire</span><span class="params">(A key)</span> &#123;</span><br><span class="line">        Future&lt;V&gt; future = cache.get(key);</span><br><span class="line">        <span class="keyword">if</span> (future != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果任务时间到了，还没有完成的话，直接取消任务</span></span><br><span class="line">            <span class="keyword">if</span> (!future.isDone()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Future任务被取消&quot;</span>);</span><br><span class="line">                future.cancel(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;过期时间到，缓存被清除&quot;</span>);</span><br><span class="line">            cache.remove(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Cache10&lt;String, Integer&gt; expensiveCompute = <span class="keyword">new</span> <span class="title class_">Cache10</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">MayFail</span>());</span><br><span class="line">        <span class="comment">// 第一个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;666&quot;</span>, <span class="number">5000L</span>);<span class="comment">// 5秒后过期</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;第一次计算结果：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第二次计算结果：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;667&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第三次计算结果：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">6000</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第四次计算结果：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">从FutureTask调用了计算函数</span><br><span class="line">从FutureTask调用了计算函数</span><br><span class="line">计算错误，需要重试</span><br><span class="line">从FutureTask调用了计算函数</span><br><span class="line">计算错误，需要重试</span><br><span class="line">从FutureTask调用了计算函数</span><br><span class="line">计算错误，需要重试</span><br><span class="line">从FutureTask调用了计算函数</span><br><span class="line">计算错误，需要重试</span><br><span class="line">从FutureTask调用了计算函数</span><br><span class="line">计算错误，需要重试</span><br><span class="line">从FutureTask调用了计算函数</span><br><span class="line">第一次计算结果：<span class="number">666</span></span><br><span class="line">第二次计算结果：<span class="number">666</span></span><br><span class="line">第三次计算结果：<span class="number">667</span></span><br><span class="line">过期时间到，缓存被清除</span><br><span class="line">从FutureTask调用了计算函数</span><br><span class="line">计算错误，需要重试</span><br><span class="line">从FutureTask调用了计算函数</span><br><span class="line">第四次计算结果：<span class="number">666</span></span><br></pre></td></tr></table></figure>

<h1 id="高并发访问时"><a href="#高并发访问时" class="headerlink" title="高并发访问时"></a>高并发访问时</h1><ul>
<li><p>如果同时过期，那么同时都拿不到缓存，导致打爆cpu和MySQL，造成缓存雪崩、缓存击穿等高并发下的缓存问题</p>
</li>
<li><p>缓存过期时间设置为随机</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> simple_cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> simple_cache.computable.Computable;</span><br><span class="line"><span class="keyword">import</span> simple_cache.computable.MayFail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出于安全性考虑，缓存需要设置有效期，到期自动失效否则如果缓存一直不失效，那么会带来缓存不一致等问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cache11</span>&lt;A, V&gt; <span class="keyword">implements</span> <span class="title class_">Computable</span>&lt;A, V&gt; &#123;</span><br><span class="line">    <span class="comment">// Future包装value</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;A, Future&lt;V&gt;&gt; cache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Computable&lt;A, V&gt; c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cache11</span><span class="params">(Computable&lt;A, V&gt; c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">compute</span><span class="params">(A arg)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 由于ConcurrentHashMap的可见性，当前一个线程写入了cache.put(arg, ft);的时候，后面的缓存就会得到f不是null</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            Future&lt;V&gt; f = cache.get(arg);</span><br><span class="line">            <span class="keyword">if</span> (f == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 新建一个任务</span></span><br><span class="line">                Callable&lt;V&gt; callable = <span class="keyword">new</span> <span class="title class_">Callable</span>&lt;V&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> V <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="keyword">return</span> c.compute(arg);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                FutureTask&lt;V&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(callable);</span><br><span class="line">                f = cache.putIfAbsent(arg, ft);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (f == <span class="literal">null</span>) &#123;</span><br><span class="line">                    f = ft;</span><br><span class="line">                    System.out.println(<span class="string">&quot;从FutureTask调用了计算函数&quot;</span>);</span><br><span class="line">                    ft.run();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> f.get();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</span><br><span class="line">                <span class="comment">// 每个异常抛出以后，缓存都被清理掉了</span></span><br><span class="line">                System.out.println(<span class="string">&quot;被取消了&quot;</span>);</span><br><span class="line">                cache.remove(arg);</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                cache.remove(arg);</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;计算错误，需要重试&quot;</span>);</span><br><span class="line">                cache.remove(arg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓存过期时间设置为随机</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">computeRandomExpire</span><span class="params">(A arg)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">randomExpire</span> <span class="operator">=</span> (<span class="type">long</span>) (Math.random() * <span class="number">10000</span>);</span><br><span class="line">        <span class="keyword">return</span> compute(arg, randomExpire);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">ScheduledExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">compute</span><span class="params">(A arg, <span class="type">long</span> expire)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (expire &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            executor.schedule(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    expire(arg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, expire, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> compute(arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">expire</span><span class="params">(A key)</span> &#123;</span><br><span class="line">        Future&lt;V&gt; future = cache.get(key);</span><br><span class="line">        <span class="keyword">if</span> (future != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果任务时间到了，还没有完成的话，直接取消任务</span></span><br><span class="line">            <span class="keyword">if</span> (!future.isDone()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Future任务被取消&quot;</span>);</span><br><span class="line">                future.cancel(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;过期时间到，缓存被清除&quot;</span>);</span><br><span class="line">            cache.remove(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Cache11&lt;String, Integer&gt; expensiveCompute = <span class="keyword">new</span> <span class="title class_">Cache11</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">MayFail</span>());</span><br><span class="line">        <span class="comment">// 第一个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;666&quot;</span>, <span class="number">5000L</span>);<span class="comment">// 5秒后过期</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;第一次计算结果：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第二次计算结果：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三个线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;667&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;第三次计算结果：&quot;</span> + result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">6000</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> expensiveCompute.compute(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;第四次计算结果：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="模拟大量请求，观测缓存效果"><a href="#模拟大量请求，观测缓存效果" class="headerlink" title="模拟大量请求，观测缓存效果"></a>模拟大量请求，观测缓存效果</h1><p>用线程池创建大量线程get，用了缓存后，总体耗时大大减少，体现了缓存的作用</p>
<p>注：IO密集型（某大厂实践经验）       </p>
<p>核心线程数 &#x3D; CPU核数 &#x2F; （1-阻塞系数） </p>
<p>或者</p>
<p>CPU密集型：核心线程数 &#x3D; CPU核数 + 1 IO密集型：核心线程数 &#x3D; CPU核数 * 2</p>
<p>60万并发：</p>
<p>线程池大小17：124ms</p>
<p>100万并发：</p>
<p>线程池大小21：356ms</p>
<p>线程池大小17：148ms</p>
<p>线程池大小40：375ms</p>
<p>说明是CPU密集型</p>
<h2 id="不用CountDownLatch"><a href="#不用CountDownLatch" class="headerlink" title="不用CountDownLatch"></a>不用CountDownLatch</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> computable.ExpensiveFunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by guolin</span></span><br><span class="line"><span class="comment"> * 模拟大量请求，观测缓存效果，没用CountDownLatch的情况下，在16核20线程机器上，200ms可以承受105万并发查询缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QpsTest1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Cache12&lt;String, Integer&gt; expensiveComputer = <span class="keyword">new</span> <span class="title class_">Cache12</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">ExpensiveFunction</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程池大小</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1050000</span>; i++) &#123;</span><br><span class="line">            service.submit(() -&gt; &#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    result = expensiveComputer.compute(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//System.out.println(result);</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        service.shutdown();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果线程池关闭则true</span></span><br><span class="line">        <span class="keyword">while</span> (!service.isTerminated()) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;总耗时：&quot;</span>+(System.currentTimeMillis() - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="用CountDownLatch"><a href="#用CountDownLatch" class="headerlink" title="用CountDownLatch"></a>用CountDownLatch</h2><p>40万并发：</p>
<p>线程池大小17：107ms</p>
<p><strong>CountDownLatch概念</strong></p>
<p>CountDownLatch是一个同步工具类，用来协调多个线程之间的同步，或者说起到线程之间的通信（而不是用作互斥的作用）。</p>
<p>CountDownLatch能够使一个线程在等待另外一些线程完成各自工作之后，再继续执行。使用一个计数器进行实现。计数器初始值为线程的数量。当每一个线程完成自己任务后，计数器的值就会减一。当计数器的值为0时，表示所有的线程都已经完成一些任务，然后在CountDownLatch上等待的线程就可以恢复执行接下来的任务。</p>
<p><strong>CountDownLatch的用法</strong></p>
<p>CountDownLatch典型用法：1、某一线程在开始运行前等待n个线程执行完毕。将CountDownLatch的计数器初始化为new CountDownLatch(n)，每当一个任务线程执行完毕，就将计数器减1 countdownLatch.countDown()，当计数器的值变为0时，在CountDownLatch上await()的线程就会被唤醒。一个典型应用场景就是启动一个服务时，主线程需要等待多个组件加载完毕，之后再继续执行。</p>
<p>CountDownLatch典型用法：2、实现多个线程开始执行任务的最大并行性。注意是并行性，不是并发，强调的是多个线程在某一时刻同时开始执行。类似于赛跑，将多个线程放到起点，等待发令枪响，然后同时开跑。做法是初始化一个共享的CountDownLatch(1)，将其计算器初始化为1，多个线程在开始执行任务前首先countdownlatch.await()，当主线程调用countDown()时，计数器变为0，多个线程同时被唤醒。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> computable.ExpensiveFunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by guolin</span></span><br><span class="line"><span class="comment"> * 模拟大量请求，观测缓存效果</span></span><br><span class="line"><span class="comment"> * 用CountDownLatch的情况下，在16核20线程机器上，200ms可以承受105万并发查询缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QpsTest2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Cache12&lt;String, Integer&gt; expensiveComputer = <span class="keyword">new</span> <span class="title class_">Cache12</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">ExpensiveFunction</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步工具类：等待1个线程执行完毕，其他线程统一开始，最大压测</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程池大小</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            service.submit(() -&gt; &#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;开始等待&quot;</span>);</span><br><span class="line">                    countDownLatch.await();</span><br><span class="line">                    <span class="type">SimpleDateFormat</span> <span class="variable">dateFormat</span> <span class="operator">=</span> ThreadSafeFormatter.dateFormatter.get();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> dateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;   &quot;</span>+time+<span class="string">&quot;被放行&quot;</span>);</span><br><span class="line">                    result = expensiveComputer.compute(<span class="string">&quot;666&quot;</span>);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(result);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadSafeFormatter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;SimpleDateFormat&gt; dateFormatter = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;SimpleDateFormat&gt;() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//每个线程会调用本方法一次，用于初始化</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> SimpleDateFormat <span class="title function_">initialValue</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;mm:ss&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//首次调用本方法时，会调用initialValue()；后面的调用会返回第一次创建的值</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> SimpleDateFormat <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.get();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>并发编程</category>
      </categories>
      <tags>
        <tag>并发编程</tag>
        <tag>高性能缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯常用技巧</title>
    <url>/2022/04/01/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id="万能头文件"><a href="#万能头文件" class="headerlink" title="万能头文件"></a>万能头文件</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span>＜bits/stdc++.h＞</span></span><br></pre></td></tr></table></figure>

<h2 id="加快输入输出"><a href="#加快输入输出" class="headerlink" title="加快输入输出"></a>加快输入输出</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">main函数中加入以下代码，降低时长</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="常用变量定义"><a href="#常用变量定义" class="headerlink" title="常用变量定义"></a>常用变量定义</h2><p>建议一些变量、数组、标记等定义在全局，这样就避免了初始化，因为放在全局的变量，系统自动初始化成0。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">0x3f3f3f3f</span>;<span class="comment">// 1061109567</span></span><br><span class="line"><span class="type">const</span> LL  INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;<span class="comment">// 4557430888798830399</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);<span class="comment">// 3.14159</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> E = <span class="built_in">exp</span>(<span class="number">1.0</span>);<span class="comment">// 2.71828</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX = <span class="number">1e5</span>+<span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>0x3f3f3f3f是一个很有用的数值，它是满足以下两个条件的最大整数。</p>
<p>1、整数的两倍不超过 0x7f7f7f7f，即int能表示的最大正整数。</p>
<p>2、整数的每8位（每个字节）都是相同的。(0011 1111 0011 1111 0011 1111 0011 1111)</p>
<p>我们在程序设计中经常需要使用 memset(a, val, sizeof a) 初始化一个数组a，该语句把数值 val（0x00~0xFF）填充到数组a 的每个字节上，所以用memset只能赋值出“每8位都相同”的 int。</p>
<p>当需要把一个数组中的数值初始化成正无穷时，为了避免加法算术上溢出或者繁琐的判断，我们经常用 memset(a, 0x3f, sizeof(a)) 给数组赋 0x3f3f3f3f的值来代替。</p>
</blockquote>
<h2 id="初始化数组"><a href="#初始化数组" class="headerlink" title="初始化数组"></a>初始化数组</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//a[10]的长度其实是40byte，因为每个int是4个byte</span></span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>],  b[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="number">40</span>);<span class="comment">//cstring中的memset(要初始化的数组，初始化的值，要初始化的字节长度(byte))</span></span><br><span class="line">    <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span> b);<span class="comment">//sizeof可以用来求数组占用的字节数量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        cout &lt;&lt; b[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> data[]=<span class="string">&quot;This is a test of the memset function&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Before:%s\n&quot;</span>,data);</span><br><span class="line">    <span class="built_in">memset</span>(data,<span class="string">&#x27;*&#x27;</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;After:%s\n&quot;</span>,data);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    Before:This is a test of the memset function</span><br><span class="line">	After:**** is a test of the memset function</span><br></pre></td></tr></table></figure>

<h2 id="atoi-x2F-stoi-字符串转换为整数"><a href="#atoi-x2F-stoi-字符串转换为整数" class="headerlink" title="atoi&#x2F;stoi 字符串转换为整数"></a>atoi&#x2F;stoi 字符串转换为整数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="built_in">atoi</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">stoi</span>(s);</span><br><span class="line">    cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="to-string"><a href="#to-string" class="headerlink" title="to_string"></a>to_string</h2><p>转字符串</p>
<h2 id="bitset-字符串或者整数转二进制"><a href="#bitset-字符串或者整数转二进制" class="headerlink" title="bitset 字符串或者整数转二进制"></a>bitset 字符串或者整数转二进制</h2><p>用于将字符串或者整数转换成二进制数存储</p>
<p>bitset存储中下标是从右往左 从0开始计数的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">头文件</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 存储位数足够，前面多余位用0补足</span></span><br><span class="line">    bitset &lt;8&gt;<span class="built_in">a</span>(<span class="number">13</span>);<span class="comment">// 1101</span></span><br><span class="line">    bitset &lt;8&gt;<span class="built_in">b</span>(<span class="built_in">string</span>(<span class="string">&quot;100101&quot;</span>));<span class="comment">// 100101</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储位数不够时，数字转换取后几位，字符串转换取前几位</span></span><br><span class="line">    bitset &lt;3&gt;<span class="built_in">c</span>(<span class="number">12</span>);<span class="comment">// 1100</span></span><br><span class="line">    bitset &lt;4&gt;<span class="built_in">d</span>(<span class="built_in">string</span>(<span class="string">&quot;100111&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注 ：bitset的下标是从右往左数的</span></span><br><span class="line">    cout &lt;&lt; a[<span class="number">0</span>] &lt;&lt; a[<span class="number">1</span>] &lt;&lt; a[<span class="number">2</span>] &lt;&lt; a[<span class="number">3</span>] &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    <span class="number">1011</span></span><br><span class="line">    <span class="number">00001101</span></span><br><span class="line">    <span class="number">00100101</span></span><br><span class="line">    <span class="number">100</span></span><br><span class="line">    <span class="number">1001</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//*执行 flip 、set 和 reset函数 后都会覆盖原有值</span></span><br><span class="line">    string str = <span class="string">&quot;10010111&quot;</span>;</span><br><span class="line">    bitset &lt;8&gt; <span class="built_in">m</span>(str);</span><br><span class="line">    cout &lt;&lt; m &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; m.<span class="built_in">count</span>() &lt;&lt; endl;<span class="comment">// 返回m中1的个数</span></span><br><span class="line">    cout &lt;&lt; m.<span class="built_in">size</span>() &lt;&lt; endl;<span class="comment">// 返回m的大小</span></span><br><span class="line">    cout &lt;&lt; m.<span class="built_in">test</span>(<span class="number">2</span>) &lt;&lt; endl;<span class="comment">// 检测下标为2的元素是否为1 若为1 则返回1</span></span><br><span class="line">    cout &lt;&lt; m.<span class="built_in">any</span>() &lt;&lt; endl;<span class="comment">// 检测m中是否有1</span></span><br><span class="line">    cout &lt;&lt; m.<span class="built_in">none</span>() &lt;&lt; endl;<span class="comment">// 检测m中是否没有1</span></span><br><span class="line">    cout &lt;&lt; m.<span class="built_in">all</span>() &lt;&lt; endl;<span class="comment">// 检测m中是否全部为1</span></span><br><span class="line">    cout &lt;&lt; m.<span class="built_in">flip</span>() &lt;&lt; endl;<span class="comment">// 所有位都取反</span></span><br><span class="line">    cout &lt;&lt; m.<span class="built_in">flip</span>(<span class="number">0</span>) &lt;&lt; endl;<span class="comment">// 下标为0的位置取反</span></span><br><span class="line">    cout &lt;&lt; m.<span class="built_in">set</span>(<span class="number">2</span>) &lt;&lt; endl;<span class="comment">// 将下标为2的元素置为1</span></span><br><span class="line">    cout &lt;&lt; m.<span class="built_in">set</span>() &lt;&lt; endl;<span class="comment">// 所有位都置为1</span></span><br><span class="line">    cout &lt;&lt; m.<span class="built_in">set</span>(<span class="number">1</span>, <span class="number">0</span>) &lt;&lt; endl;<span class="comment">// 将下标为1的元素置为 0</span></span><br><span class="line">    cout &lt;&lt; m.<span class="built_in">reset</span>() &lt;&lt; endl;<span class="comment">// 将所有位置为0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    <span class="number">10010111</span></span><br><span class="line">    <span class="number">5</span></span><br><span class="line">    <span class="number">8</span></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    <span class="number">0</span></span><br><span class="line">    <span class="number">0</span></span><br><span class="line">    <span class="number">01101000</span></span><br><span class="line">    <span class="number">01101001</span></span><br><span class="line">    <span class="number">01101101</span></span><br><span class="line">    <span class="number">11111111</span></span><br><span class="line">    <span class="number">11111101</span></span><br><span class="line">    <span class="number">00000000</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str = <span class="string">&quot;10010111&quot;</span>;</span><br><span class="line">    bitset &lt;8&gt; <span class="built_in">n</span>(str);</span><br><span class="line">    string s = n.<span class="built_in">to_string</span>();</span><br><span class="line">    cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将bitset转换为无符号的long</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> h = n.<span class="built_in">to_ulong</span>();</span><br><span class="line">    cout &lt;&lt; h &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">    <span class="number">10010111</span></span><br><span class="line">    <span class="number">151</span></span><br><span class="line">    <span class="number">151</span></span><br></pre></td></tr></table></figure>

<h2 id="next-permutation-全排列"><a href="#next-permutation-全排列" class="headerlink" title="next_permutation 全排列"></a>next_permutation 全排列</h2><p>prev_permutation前一个排列组合</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">头文件</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>输出 n 个数的全排列</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">sort</span>(a, a + n);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(a, a + n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">关于<span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n))</span><br><span class="line">    </span><br><span class="line">其功能是循环从输入流读取n，直到遇到EOF为止，<span class="built_in">scanf</span>()函数返回成功赋值的数据项数，出错时则返回，EOF定义为<span class="number">-1</span>。~是按位取反，<span class="number">-1</span>十六进制补码表示为<span class="number">0xffffffff</span>，f是二进制的<span class="number">1111</span>，取反后就全部变成<span class="number">0</span>了，于是<span class="keyword">while</span>结束。只有返回值为EOF（即<span class="number">-1</span>）时，其取反的的值（即<span class="keyword">while</span>循环的判断条件）才为<span class="number">0</span>，才能结束循环，其它输入情况下（无论是否输入成功）<span class="keyword">while</span>循环的判断条件为非<span class="number">0</span>，即为真。</span><br></pre></td></tr></table></figure>

<h2 id="reverse-翻转函数"><a href="#reverse-翻转函数" class="headerlink" title="reverse 翻转函数"></a>reverse 翻转函数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">//算法库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;)</span></span>;</span><br><span class="line">    <span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : a) &#123;</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="type">int</span> b[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="built_in">reverse</span>(b, b + <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> c : b) &#123;</span><br><span class="line">        cout &lt;&lt; c &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="sort-排序函数"><a href="#sort-排序函数" class="headerlink" title="sort 排序函数"></a>sort 排序函数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">//算法库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; a&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//传入一个随机准则，time(0)是现在到1970-1-1的秒数</span></span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//随机打乱顺序</span></span><br><span class="line">    <span class="built_in">random_shuffle</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : a) &#123;</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//从小到大排序</span></span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : a) &#123;</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//从大到小排序</span></span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : a) &#123;</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="reverse-翻转函数-1"><a href="#reverse-翻转函数-1" class="headerlink" title="reverse 翻转函数"></a>reverse 翻转函数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string str = <span class="built_in">to_string</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">reverse</span>(str.<span class="built_in">begin</span>(), str.<span class="built_in">end</span>());</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string str = <span class="built_in">to_string</span>(<span class="number">12321</span>);</span><br><span class="line">    <span class="comment">// 翻转以后返回字符串</span></span><br><span class="line">    string str2 = <span class="built_in">string</span>(str.<span class="built_in">rbegin</span>(), str.<span class="built_in">rend</span>());</span><br><span class="line">    cout &lt;&lt; (str == str2) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="unique-去重函数"><a href="#unique-去重函数" class="headerlink" title="unique 去重函数"></a>unique 去重函数</h2><p>这是一个<strong>去重</strong>函数 （同时将数组从小到大排序 重复出现的元素放到容器尾部）</p>
<p>unique(num,mun+n)返回的是num去重后的尾地址，之所以说比不真正把重复的元素删除，其实是，该函数把重复的元素移到后面去了，然后依然保存到了原数组中，然后返回去重后最后一个元素的地址，<strong>因为unique去除的是相邻的重复元素，所以一般用之前都会要排一下序</strong>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">需要添加头文件：</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string str = <span class="string">&quot;abbbccbba&quot;</span>;</span><br><span class="line">    str.<span class="built_in">erase</span>((<span class="built_in">unique</span>(str.<span class="built_in">begin</span>(), str.<span class="built_in">end</span>())), str.<span class="built_in">end</span>());</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出：abcba</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    res.<span class="built_in">erase</span>((<span class="built_in">unique</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>())), res.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : res) &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出：<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="lower-bound"><a href="#lower-bound" class="headerlink" title="lower_bound"></a>lower_bound</h2><p>利用二分查找在已排序的数组中查找元素</p>
<p>lower_bound(begin,end,num) 找到第一个大于或等于num的数字 返回该数字的地址 否则返回end</p>
<p>通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。即 lower_bound(begin,end,num) - begin</p>
<p>upper_bound(begin,end,num) 找到第一个大于num的数字 返回该数字的地址 否则返回end</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">添加头文件</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="comment">// 通过返回的地址减去起始地址begin,得到找到数字在数组中的下标</span></span><br><span class="line">    <span class="type">int</span> idx = <span class="built_in">lower_bound</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>(), <span class="number">3</span>) - res.<span class="built_in">begin</span>();</span><br><span class="line">    cout &lt;&lt; idx &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure>

<h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">float</span> b = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%5d\n&quot;</span>, a);<span class="comment">// 在左边补上空格</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%-5d\n&quot;</span>, a);<span class="comment">// 在右边补上空格</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%5.1lf\n&quot;</span>, b);<span class="comment">// 小数长度为5，并且保留一位小数，不够时前面补空格（小数点也算一位）</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%05.1lf\n&quot;</span>, b);<span class="comment">// 小数长度为5，并且保留一位小数，不够时前面补0（小数点也算一位）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">   <span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line">  <span class="number">5.0</span></span><br><span class="line"><span class="number">005.0</span></span><br></pre></td></tr></table></figure>

<h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><p>关于数据范围：大题的题目中会给出相应的数据范围，根据题目的数据范围来选择数据型是int 还是long long 还是其他类型，注意如果是使用long long的话，要用%i64d（i大写）进行输入输出，如果是平常做题过程中使用%lld进行输入输出。（用%i64d（i大写）还是%lld根据情况而定，如果Windows评测机采用%i64d（i大写）；如果Linux评测机采用%lld）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">蓝桥杯输入/出 <span class="type">long</span> <span class="type">long</span>数据需要使用的是</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%I64d&quot;</span>, &amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%I64d&quot;</span>, x);</span><br></pre></td></tr></table></figure>

<p>蓝色桥杯最大栈空间为256MB，经过换算， 你最大可以<strong>开 1 * 10的7次方左右的数组空间</strong>。也就是<strong>1千万</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="number">0</span>～<span class="number">4294967295</span> <span class="comment">// 9及以下位数都可装</span></span><br><span class="line"><span class="type">int</span> <span class="number">-2147483648</span>～<span class="number">2147483647</span> <span class="comment">// 9及以下位数都可装</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="number">0</span>～<span class="number">4294967295</span> <span class="comment">// 9及以下位数都可装</span></span><br><span class="line"><span class="type">long</span> <span class="number">-2147483648</span>～<span class="number">2147483647</span> <span class="comment">// 9及以下位数都可装</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span>的最大值：<span class="number">9223372036854775807</span> <span class="comment">// 18及以下位数都可装 19位也差不多</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span>的最小值：<span class="number">-9223372036854775808</span> <span class="comment">// 18及以下位数都可装 19位也差不多</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>的最大值：<span class="number">18446744073709551615</span> <span class="comment">//20位</span></span><br><span class="line"><span class="comment">// 下面用的可能没有接触过， 但存在， 有上面的就够了， 下面和上面的long long 是一样的。</span></span><br><span class="line">__int64的最大值：<span class="number">9223372036854775807</span>__</span><br><span class="line"></span><br><span class="line">int64的最小值：<span class="number">-9223372036854775808</span></span><br><span class="line"><span class="type">unsigned</span> __int64的最大值：<span class="number">18446744073709551615</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> </span><br><span class="line"><span class="comment">// 当需要多次使用一个表达式的值的时候， 可以存起来。 这样可以减少计算次数。</span></span><br><span class="line"><span class="comment">// 如：</span></span><br><span class="line"><span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, n * b * i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更改为</span></span><br><span class="line"><span class="type">int</span> n  = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">30</span>;</span><br><span class="line"><span class="type">int</span> t = n * b;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, t * i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如：</span></span><br><span class="line"><span class="comment">// 计算一个数组 / 或者字符串长度的时候， 最后一直存着，以免多次计算。 </span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> </span><br><span class="line"><span class="comment">// 位运算符的应用</span></span><br><span class="line"><span class="comment">// 如:</span></span><br><span class="line"><span class="type">int</span> n = <span class="number">30</span>;</span><br><span class="line"><span class="type">int</span> i =  n* <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> c =  n / <span class="number">16</span>;</span><br><span class="line"><span class="comment">// 可以更改为</span></span><br><span class="line"><span class="type">int</span> i = n &lt;&lt; <span class="number">1</span>; <span class="comment">// 相信我会快。</span></span><br><span class="line"><span class="type">int</span> c =  n &gt;&gt; <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如：</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">while</span>(i % <span class="number">2</span> == <span class="number">1</span>)&#123;<span class="comment">// 对于for循环同样使用。</span></span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改为</span></span><br><span class="line"><span class="keyword">while</span>(i &amp; <span class="number">1</span>)&#123; <span class="comment">// 用位运算代替</span></span><br><span class="line">--i;<span class="comment">// 前自减/增 比 后自减/增快。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如：</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> x = i--;</span><br><span class="line"><span class="comment">// 改为</span></span><br><span class="line"><span class="type">int</span> x = i;</span><br><span class="line">--i;<span class="comment">// 这样结果一样， 但编译后，会少一条汇编指令。</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>蓝桥杯</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>LeedCode</title>
    <url>/2022/03/27/LeedCode/</url>
    <content><![CDATA[<h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h1><p><a href="https://leetcode-cn.com/problems/two-sum/">两数之和</a></p>
<p><strong>思路：</strong><br>用哈希表储存已经遍历过的值，再通过<code>int r = target - nums[i];</code>查看哈希表中是否存在一个值，与<code>nums[i]</code>之和为<code>target</code></p>
<p><strong>时间复杂度：<em>O(n)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hashmap;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> tmp = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (hashmap.<span class="built_in">count</span>(tmp)) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;hashmap[tmp], i&#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                hashmap[nums[i]] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hash;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> r = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (hash.<span class="built_in">count</span>(r)) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;i, hash[r]&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hash[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums = &#123;<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>&#125;;</span><br><span class="line">    <span class="type">int</span> target = <span class="number">9</span>;</span><br><span class="line">    ans = <span class="built_in">twoSum</span>(nums, target);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : ans) &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2. 两数相加"></a>2. 两数相加</h1><p><a href="https://leetcode-cn.com/problems/add-two-numbers/">两数相加</a></p>
<p><strong>思路：</strong><br>遍历一遍即可，注意进位<br><strong>时间复杂度：<em>O(n)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 虚拟头节点</span></span><br><span class="line">        <span class="keyword">auto</span> dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        <span class="comment">// 当前尾节点位置</span></span><br><span class="line">        <span class="keyword">auto</span> cur = dummy;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l1 &amp;&amp; l2) &#123;</span><br><span class="line">            t = l1-&gt;val + l2-&gt;val + t;</span><br><span class="line">            <span class="keyword">auto</span> p = <span class="keyword">new</span> <span class="built_in">ListNode</span>(t % <span class="number">10</span>);</span><br><span class="line">            t /= <span class="number">10</span>;</span><br><span class="line">            cur-&gt;next = p;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">            <span class="comment">// 节点向后移</span></span><br><span class="line">            l1 = l1-&gt;next;</span><br><span class="line">            l2 = l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (l1) &#123;</span><br><span class="line">            t = l1-&gt;val + t;</span><br><span class="line">            <span class="keyword">auto</span> p = <span class="keyword">new</span> <span class="built_in">ListNode</span>(t % <span class="number">10</span>);</span><br><span class="line">            t /= <span class="number">10</span>;</span><br><span class="line">            cur-&gt;next = p;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">            <span class="comment">// 节点向后移</span></span><br><span class="line">            l1 = l1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (l2) &#123;</span><br><span class="line">            t = l2-&gt;val + t;</span><br><span class="line">            <span class="keyword">auto</span> p = <span class="keyword">new</span> <span class="built_in">ListNode</span>(t % <span class="number">10</span>);</span><br><span class="line">            t /= <span class="number">10</span>;</span><br><span class="line">            cur-&gt;next = p;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">            <span class="comment">// 节点向后移</span></span><br><span class="line">            l2 = l2-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 看看最后是否还有进位</span></span><br><span class="line">        <span class="keyword">if</span> (t) &#123;</span><br><span class="line">            <span class="keyword">auto</span> p = <span class="keyword">new</span> <span class="built_in">ListNode</span>(t);</span><br><span class="line">            cur-&gt;next = p;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义链表的节点规则</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    <span class="built_in">ListNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x, ListNode *next) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(next) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 虚拟头节点</span></span><br><span class="line">    <span class="keyword">auto</span> dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="comment">// 当前尾节点位置</span></span><br><span class="line">    <span class="keyword">auto</span> cur = dummy;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l1 &amp;&amp; l2) &#123;</span><br><span class="line">        t = l1-&gt;val + l2-&gt;val + t;</span><br><span class="line">        <span class="keyword">auto</span> p = <span class="keyword">new</span> <span class="built_in">ListNode</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">        cur-&gt;next = p;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">        <span class="comment">// 节点向后移</span></span><br><span class="line">        l1 = l1-&gt;next;</span><br><span class="line">        l2 = l2-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (l1) &#123;</span><br><span class="line">        t = l1-&gt;val + t;</span><br><span class="line">        <span class="keyword">auto</span> p = <span class="keyword">new</span> <span class="built_in">ListNode</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">        cur-&gt;next = p;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">        <span class="comment">// 节点向后移</span></span><br><span class="line">        l1 = l1-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (l2) &#123;</span><br><span class="line">        t = l2-&gt;val + t;</span><br><span class="line">        <span class="keyword">auto</span> p = <span class="keyword">new</span> <span class="built_in">ListNode</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">        cur-&gt;next = p;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">        <span class="comment">// 节点向后移</span></span><br><span class="line">        l2 = l2-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 看看最后是否还有进位</span></span><br><span class="line">    <span class="keyword">if</span> (t) &#123;</span><br><span class="line">        <span class="keyword">auto</span> p = <span class="keyword">new</span> <span class="built_in">ListNode</span>(t);</span><br><span class="line">        cur-&gt;next = p;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="comment">// 构造第一个链表，输入-1时停止</span></span><br><span class="line">    <span class="keyword">auto</span> dummy1 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">auto</span> cur1 = dummy1;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n, n != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">auto</span> p = <span class="keyword">new</span> <span class="built_in">ListNode</span>(n);</span><br><span class="line">        cur1-&gt;next = p;</span><br><span class="line">        cur1 = cur1-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造第二个链表，输入-1时停止</span></span><br><span class="line">    <span class="keyword">auto</span> dummy2 = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">auto</span> cur2 = dummy2;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n, n != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">auto</span> p = <span class="keyword">new</span> <span class="built_in">ListNode</span>(n);</span><br><span class="line">        cur2-&gt;next = p;</span><br><span class="line">        cur2 = cur2-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="keyword">auto</span> p = <span class="built_in">addTwoNumbers</span>(dummy1-&gt;next, dummy2-&gt;next);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = p; i; i = i-&gt;next) &#123;</span><br><span class="line">        cout &lt;&lt; i-&gt;val &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a>3. 无重复字符的最长子串</h1><p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">无重复字符的最长子串</a></p>
<p><strong>思路：</strong><br>双指针算法 + 哈希表<br>利用指针<code>i</code>前进，同时哈希表统计是否有重复的字符。如果有重复字符，那么指针<code>j</code>也前进，直到重复字符消失为止，比较统计最大长度。<br><strong>时间复杂度：<em>O(n)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; hash;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        hash[s[i]]++;</span><br><span class="line">        <span class="keyword">while</span> (hash[s[i]] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            hash[s[j]]--;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="built_in">max</span>(res, i - j + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; hash;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        hash[s[i]]++;</span><br><span class="line">        <span class="keyword">while</span> (hash[s[i]] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            hash[s[j]]--;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="built_in">max</span>(res, i - j + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">lengthOfLongestSubstring</span>(s);</span><br><span class="line">    cout &lt;&lt; len &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4. 寻找两个正序数组的中位数"></a>4. 寻找两个正序数组的中位数</h1><p><a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/">4. 寻找两个正序数组的中位数</a></p>
<p><strong>时间复杂度：</strong>O(log (m+n))</p>
<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于找两个数组的第k大的数</span></span><br><span class="line"><span class="comment">// i 是第一个数组起始的位置，j是第二个数组起始的位置</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, <span class="type">int</span> i, vector&lt;<span class="type">int</span>&gt;&amp; nums2, <span class="type">int</span> j, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 让nums1长度小于nums2</span></span><br><span class="line">    <span class="keyword">if</span> (nums1.<span class="built_in">size</span>() - i &gt; nums2.<span class="built_in">size</span>() - j) <span class="keyword">return</span> <span class="built_in">find</span>(nums2, j, nums1, i, k);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果nums1空了，就直接取nums2的中位数</span></span><br><span class="line">    <span class="keyword">if</span> (nums1.<span class="built_in">size</span>() == i) <span class="keyword">return</span> nums2[j + k - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果只有一个元素了，就取两个数组的开头元素中最小的那个</span></span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(nums1[i], nums2[j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每次筛掉小的那一段</span></span><br><span class="line">    <span class="type">int</span> si = <span class="built_in">min</span>((<span class="type">int</span>)nums1.<span class="built_in">size</span>(), i + k / <span class="number">2</span>);</span><br><span class="line">    <span class="type">int</span> sj = j + k - k / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (nums1[si - <span class="number">1</span>] &lt; nums2[sj - <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">find</span>(nums1, si, nums2, j, k - si + i);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">find</span>(nums1, i, nums2, sj, k - sj + j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> tot = nums1.<span class="built_in">size</span>() + nums2.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (tot % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 相当于先找前tot / 2个数</span></span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">find</span>(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, tot / <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 找前tot / 2 + 1个数</span></span><br><span class="line">        <span class="type">int</span> right = <span class="built_in">find</span>(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, tot / <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> (left + right) / <span class="number">2.0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">find</span>(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, tot / <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums1 = &#123;<span class="number">1</span>,<span class="number">3</span>&#125;, nums2 = &#123;<span class="number">4</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">findMedianSortedArrays</span>(nums1, nums2) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a>5. 最长回文子串</h1><p><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/">最长回文子串</a></p>
<p><strong>思路：</strong><br>分别考虑奇数回文子串和偶数回文子串即可<br><strong>时间复杂度：<em>O(n)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    string ans;</span><br><span class="line">    <span class="comment">// 找出最长的奇数回文子串</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> l = i - <span class="number">1</span>, r = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &gt;= <span class="number">0</span> &amp;&amp; r &lt; s.<span class="built_in">size</span>() &amp;&amp; s[l] == s[r]) &#123;</span><br><span class="line">            l--, r++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res &lt; r - l - <span class="number">1</span>) &#123;</span><br><span class="line">            res = r - l - <span class="number">1</span>;</span><br><span class="line">            ans = s.<span class="built_in">substr</span>(l + <span class="number">1</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找出最长的偶数回文子串</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> l = i, r = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &gt;= <span class="number">0</span> &amp;&amp; r &lt; s.<span class="built_in">size</span>() &amp;&amp; s[l] == s[r]) &#123;</span><br><span class="line">            l--, r++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res &lt; r - l - <span class="number">1</span>) &#123;</span><br><span class="line">            res = r - l - <span class="number">1</span>;</span><br><span class="line">            ans = s.<span class="built_in">substr</span>(l + <span class="number">1</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    string ans;</span><br><span class="line">    <span class="comment">// 找出最长的奇数回文子串</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> l = i - <span class="number">1</span>, r = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &gt;= <span class="number">0</span> &amp;&amp; r &lt; s.<span class="built_in">size</span>() &amp;&amp; s[l] == s[r]) &#123;</span><br><span class="line">            l--, r++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res &lt; r - l - <span class="number">1</span>) &#123;</span><br><span class="line">            res = r - l - <span class="number">1</span>;</span><br><span class="line">            ans = s.<span class="built_in">substr</span>(l + <span class="number">1</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找出最长的偶数回文子串</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> l = i, r = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &gt;= <span class="number">0</span> &amp;&amp; r &lt; s.<span class="built_in">size</span>() &amp;&amp; s[l] == s[r]) &#123;</span><br><span class="line">            l--, r++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res &lt; r - l - <span class="number">1</span>) &#123;</span><br><span class="line">            res = r - l - <span class="number">1</span>;</span><br><span class="line">            ans = s.<span class="built_in">substr</span>(l + <span class="number">1</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">longestPalindrome</span>(s) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="6-Z-字形变换"><a href="#6-Z-字形变换" class="headerlink" title="6. Z 字形变换"></a>6. Z 字形变换</h1><p><a href="https://leetcode-cn.com/problems/zigzag-conversion/">Z 字形变换</a></p>
<p><strong>思路：</strong><br>第一行和最后一行，每个数字之间间隔是<code>2n-2</code>：</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/LeedCode.assets/Snipaste_2022-03-27_09-18-20-16483439651561.png" alt="在这里插入图片描述"><br>中间行分2个队伍，分别向后相差<code>2n-2</code>，两个队伍的队头之和为<code>2n-2</code>：<br><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/LeedCode.assets/Snipaste_2022-03-27_09-22-39.png" alt="在这里插入图片描述"><br><strong>时间复杂度：<em>O(n)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">convert</span><span class="params">(string s, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 一行的时候直接返回s即可</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">        string ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 第一行和最后一行，每个数字之间间隔是2n - 2</span></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || i == n - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; s.<span class="built_in">size</span>(); j += <span class="number">2</span> * n - <span class="number">2</span>) &#123;</span><br><span class="line">                    ans += s[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 中间行分2个队伍j和k，分别向后相差2n-2，两个队伍的队头j和k之和为2n-2</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = i, k = <span class="number">2</span> * n - <span class="number">2</span> - j; j &lt; s.<span class="built_in">size</span>(); j += <span class="number">2</span> * n - <span class="number">2</span>, k += <span class="number">2</span> * n - <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="comment">// j队伍在前</span></span><br><span class="line">                    ans += s[j];</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// k队伍在后，总是一个j一个k，这样轮循下去</span></span><br><span class="line">                    <span class="keyword">if</span> (k &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                        ans += s[k];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">convert</span><span class="params">(string s, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 一行的时候直接返回s即可</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">    string ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// 第一行和最后一行，每个数字之间间隔是2n - 2</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span> || i == n - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; s.<span class="built_in">size</span>(); j += <span class="number">2</span> * n - <span class="number">2</span>) &#123;</span><br><span class="line">                ans += s[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 中间行分2个队伍j和k，分别向后相差2n-2，两个队伍的队头j和k之和为2n-2</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i, k = <span class="number">2</span> * n - <span class="number">2</span> - j; j &lt; s.<span class="built_in">size</span>(); j += <span class="number">2</span> * n - <span class="number">2</span>, k += <span class="number">2</span> * n - <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">// j队伍在前</span></span><br><span class="line">                ans += s[j];</span><br><span class="line"></span><br><span class="line">                <span class="comment">// k队伍在后，总是一个j一个k，这样轮循下去</span></span><br><span class="line">                <span class="keyword">if</span> (k &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                    ans += s[k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; s &gt;&gt;  n;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">convert</span>(s, n) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="7-整数反转"><a href="#7-整数反转" class="headerlink" title="7. 整数反转"></a>7. 整数反转</h1><p><a href="https://leetcode-cn.com/problems/reverse-integer/">整数反转</a></p>
<p><strong>思路：</strong><br>将<code>ans * 10 + res[i]</code> 转化为  <code>ans &lt;= double (INT_MAX - res[i] - 1) / 10</code>即可<br><strong>时间复杂度：<em>O($log<del>10</del>n$)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	    <span class="keyword">if</span> (x == INT_MIN) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	    <span class="type">int</span> sign = <span class="number">1</span>;</span><br><span class="line">	    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">	        sign = <span class="number">-1</span>;</span><br><span class="line">	        x = -x;</span><br><span class="line">	    &#125;</span><br><span class="line">	    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">	    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">	        res.<span class="built_in">push_back</span>(x % <span class="number">10</span>);</span><br><span class="line">	        x /= <span class="number">10</span>;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">	        <span class="keyword">if</span> (ans &lt;= <span class="built_in">double</span> (INT_MAX - res[i]) / <span class="number">10</span>) &#123;</span><br><span class="line">	            ans = ans * <span class="number">10</span> + res[i];</span><br><span class="line">	        &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	    &#125;</span><br><span class="line">	    ans *= sign;</span><br><span class="line">	    <span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> sign = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == INT_MIN) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        sign = <span class="number">-1</span>;</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        res.<span class="built_in">push_back</span>(x % <span class="number">10</span>);</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; res.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ans &lt;= <span class="built_in">double</span> (INT_MAX - res[i]) / <span class="number">10</span>) &#123;</span><br><span class="line">            ans = ans * <span class="number">10</span> + res[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ans *= sign;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">reverse</span>(x) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="8-字符串转换整数-atoi"><a href="#8-字符串转换整数-atoi" class="headerlink" title="8. 字符串转换整数 (atoi)"></a>8. 字符串转换整数 (atoi)</h1><p><a href="https://leetcode-cn.com/problems/string-to-integer-atoi/">字符串转换整数 (atoi)</a></p>
<p><strong>思路：</strong><br>细心点即可，小心超出long long 的范围<br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">myAtoi</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sign = <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 丢弃无用的前导空格</span></span><br><span class="line">        <span class="keyword">while</span> (k &lt; s.<span class="built_in">size</span>() &amp;&amp; s[k] == <span class="string">&#x27; &#x27;</span>) k++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查下一个字符（假设还未到字符末尾）为正还是负号</span></span><br><span class="line">        <span class="keyword">if</span> (k &lt; s.<span class="built_in">size</span>() &amp;&amp; s[k] == <span class="string">&#x27;-&#x27;</span>) k++, sign = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; s.<span class="built_in">size</span>() &amp;&amp; s[k] == <span class="string">&#x27;+&#x27;</span>) k++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ans &gt; INT_MAX) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (s[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                ans = ans * <span class="number">10</span> + s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 加符号</span></span><br><span class="line">        ans *= sign;</span><br><span class="line">        <span class="keyword">if</span> (ans &gt; INT_MAX) ans = INT_MAX;</span><br><span class="line">        <span class="keyword">if</span> (ans &lt; INT_MIN) ans = INT_MIN;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">myAtoi</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> sign = <span class="number">1</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 丢弃无用的前导空格</span></span><br><span class="line">    <span class="keyword">while</span> (k &lt; s.<span class="built_in">size</span>() &amp;&amp; s[k] == <span class="string">&#x27; &#x27;</span>) k++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查下一个字符（假设还未到字符末尾）为正还是负号</span></span><br><span class="line">    <span class="keyword">if</span> (k &lt; s.<span class="built_in">size</span>() &amp;&amp; s[k] == <span class="string">&#x27;-&#x27;</span>) k++, sign = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &lt; s.<span class="built_in">size</span>() &amp;&amp; s[k] == <span class="string">&#x27;+&#x27;</span>) k++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = k; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ans &gt; INT_MAX) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (s[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            ans = ans * <span class="number">10</span> + s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加符号</span></span><br><span class="line">    ans *= sign;</span><br><span class="line">    <span class="keyword">if</span> (ans &gt; INT_MAX) ans = INT_MAX;</span><br><span class="line">    <span class="keyword">if</span> (ans &lt; INT_MIN) ans = INT_MIN;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">myAtoi</span>(s) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="9-回文数"><a href="#9-回文数" class="headerlink" title="9. 回文数"></a>9. 回文数</h1><p><a href="https://leetcode-cn.com/problems/palindrome-number/">回文数</a></p>
<p><strong>思路：</strong><br>利用字符串转换函数<code>to_string(x)</code>和字符串翻转函数<code>string(str.rbegin(), str.rend());</code><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        string str = <span class="built_in">to_string</span>(x);</span><br><span class="line">        <span class="comment">// 字符串翻转函数</span></span><br><span class="line">        string str2 = <span class="built_in">string</span>(str.<span class="built_in">rbegin</span>(), str.<span class="built_in">rend</span>());</span><br><span class="line">        <span class="keyword">return</span> str == str2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    string str = <span class="built_in">to_string</span>(x);</span><br><span class="line">    string str2 = <span class="built_in">string</span>(str.<span class="built_in">rbegin</span>(), str.<span class="built_in">rend</span>());</span><br><span class="line">    <span class="keyword">return</span> str == str2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">isPalindrome</span>(x) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="10-正则表达式匹配"><a href="#10-正则表达式匹配" class="headerlink" title="10. 正则表达式匹配"></a>10. 正则表达式匹配</h1><p><a href="https://leetcode.cn/problems/regular-expression-matching/">10. 正则表达式匹配</a></p>
<p><strong>时间复杂度：</strong>O(n*m)</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/LeedCode.assets/202208131754.jpg" alt="202208131754"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isMatch</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">size</span>(), m = p.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">// 下标从1开始</span></span><br><span class="line">    s = <span class="string">&#x27; &#x27;</span> + s, p = <span class="string">&#x27; &#x27;</span> + p;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">f</span>(n + <span class="number">10</span>, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(m + <span class="number">10</span>));</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一个串为空时，可能匹配，因为&#x27;*&#x27; 可匹配零个，所以下标可从0开始</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">            <span class="comment">// 当前位应该和下一位看作整体</span></span><br><span class="line">            <span class="keyword">if</span> (j + <span class="number">1</span> &lt;= m &amp;&amp; p[j + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i &amp;&amp; p[j] != <span class="string">&#x27;*&#x27;</span>) f[i][j] = (s[i] == p[j] || p[j] == <span class="string">&#x27;.&#x27;</span>) &amp;&amp; f[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p[j] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                f[i][j] = f[i][j - <span class="number">2</span>] || i &amp;&amp; f[i - <span class="number">1</span>][j] &amp;&amp; (s[i] == p[j - <span class="number">1</span>] || p[j - <span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[n][m];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s, p;</span><br><span class="line">    cin &gt;&gt; s &gt;&gt; p;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">isMatch</span>(s, p) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="11-盛最多水的容器"><a href="#11-盛最多水的容器" class="headerlink" title="11. 盛最多水的容器"></a>11. 盛最多水的容器</h1><p><a href="https://leetcode-cn.com/problems/container-with-most-water/">盛最多水的容器</a></p>
<p><strong>思路：</strong><br>假设左边先到达最优解，证明右边一定会向最优解靠拢<br>也就是说当左边到达最优解时，右边在最优解之前的值，一定都比左边的值要短，从而左边不动，右边向左靠拢，直到经过右边最优解为止<br><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/LeedCode.assets/Snipaste_2022-03-27_09-23-41.png" alt="在这里插入图片描述"><br><strong>结论，只要左边先到达最优解，那么右边到达最优解之前的值，一定小于左边的最优解</strong><br><strong>时间复杂度：<em>O(n)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxArea</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = height.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, <span class="built_in">min</span>(height[l], height[r]) * (r - l));</span><br><span class="line">            <span class="keyword">if</span> (height[l] &lt; height[r]) l++;</span><br><span class="line">            <span class="keyword">else</span> r--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxArea</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = height.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, <span class="built_in">min</span>(height[l], height[r]) * (r - l));</span><br><span class="line">        <span class="keyword">if</span> (height[l] &lt; height[r]) l++;</span><br><span class="line">        <span class="keyword">else</span> r--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; height = &#123;<span class="number">1</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">7</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">maxArea</span>(height) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="12-整数转罗马数字"><a href="#12-整数转罗马数字" class="headerlink" title="12. 整数转罗马数字"></a>12. 整数转罗马数字</h1><p><a href="https://leetcode-cn.com/problems/integer-to-roman/">整数转罗马数字</a></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">intToRoman</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> valus[] = &#123;</span><br><span class="line">            <span class="number">1000</span>,</span><br><span class="line">            <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>,</span><br><span class="line">            <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>,</span><br><span class="line">            <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span></span><br><span class="line">        &#125;;</span><br><span class="line">        string reps[] = &#123;</span><br><span class="line">            <span class="string">&quot;M&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>,</span><br><span class="line">            <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>,</span><br><span class="line">            <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        string res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">12</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (num &gt;= valus[i]) &#123;</span><br><span class="line">                num -= valus[i];</span><br><span class="line">                res += reps[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="13-罗马数字转整数"><a href="#13-罗马数字转整数" class="headerlink" title="13. 罗马数字转整数"></a>13. 罗马数字转整数</h1><p><a href="https://leetcode-cn.com/problems/roman-to-integer/">罗马数字转整数</a></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">romanToInt</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; hash;</span><br><span class="line">        hash[<span class="string">&#x27;I&#x27;</span>] = <span class="number">1</span>, hash[<span class="string">&#x27;V&#x27;</span>] = <span class="number">5</span>;</span><br><span class="line">        hash[<span class="string">&#x27;X&#x27;</span>] = <span class="number">10</span>, hash[<span class="string">&#x27;L&#x27;</span>] = <span class="number">50</span>;</span><br><span class="line">        hash[<span class="string">&#x27;C&#x27;</span>] = <span class="number">100</span>, hash[<span class="string">&#x27;D&#x27;</span>] = <span class="number">500</span>;</span><br><span class="line">        hash[<span class="string">&#x27;M&#x27;</span>] = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.<span class="built_in">size</span>() &amp;&amp; hash[s[i]] &lt; hash[s[i + <span class="number">1</span>]]) &#123;</span><br><span class="line">                res -= hash[s[i]];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res += hash[s[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="14-最长公共前缀"><a href="#14-最长公共前缀" class="headerlink" title="14. 最长公共前缀"></a>14. 最长公共前缀</h1><p><a href="https://leetcode-cn.com/problems/longest-common-prefix/">最长公共前缀</a></p>
<p><strong>思路：</strong><br>把最短的字符串放在第一个，然后逐位和后面的字符串相应位置比较，如果遇到不同的直接跳出双重循环<br><strong>时间复杂度：<em>O(n<sup>n</sup>)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strs.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到长度最短的字符串</span></span><br><span class="line">        <span class="type">int</span> minv = strs[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// 长度最短的字符串的下标</span></span><br><span class="line">        <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; strs.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (strs[i].<span class="built_in">size</span>() &lt; minv) &#123;</span><br><span class="line">                minv = strs[i].<span class="built_in">size</span>();</span><br><span class="line">                idx = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (idx) <span class="built_in">swap</span>(strs[<span class="number">0</span>], strs[idx]);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; strs[<span class="number">0</span>].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; strs.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (strs[j][i] != strs[<span class="number">0</span>][i]) &#123;</span><br><span class="line">                    sign = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j == strs.<span class="built_in">size</span>() - <span class="number">1</span>) res++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sign) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>].<span class="built_in">substr</span>(<span class="number">0</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">longestCommonPrefix</span><span class="params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (strs.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到长度最短的字符串</span></span><br><span class="line">    <span class="type">int</span> minv = strs[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">// 长度最短的字符串的下标</span></span><br><span class="line">    <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; strs.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (strs[i].<span class="built_in">size</span>() &lt; minv) &#123;</span><br><span class="line">            minv = strs[i].<span class="built_in">size</span>();</span><br><span class="line">            idx = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (idx) <span class="built_in">swap</span>(strs[<span class="number">0</span>], strs[idx]);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; strs[<span class="number">0</span>].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; strs.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (strs[j][i] != strs[<span class="number">0</span>][i]) &#123;</span><br><span class="line">                sign = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == strs.<span class="built_in">size</span>() - <span class="number">1</span>) res++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sign) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strs[<span class="number">0</span>].<span class="built_in">substr</span>(<span class="number">0</span>, res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;string&gt; strs = &#123;<span class="string">&quot;cir&quot;</span>,<span class="string">&quot;car&quot;</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">longestCommonPrefix</span>(strs) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a>15. 三数之和</h1><p><a href="https://leetcode-cn.com/problems/3sum/">三数之和</a></p>
<p><strong>思路：</strong><br><strong>算法：排序+双指针</strong><br>先排序，然后固定i，然后j和k相互靠拢<br>双指针做法，首先想暴力做法怎么做，然后看是否有单调性，有单调性可以考虑双指针，双指针可以优化掉一个次方的时间复杂度，从n<sup>3</sup>优化到n<sup>2</sup><br>而且j越大，k一定越小，这一点就保证了j和k一次最多只扫描了n，当j越大，k已经没必要从最右边开始扫描了，只需要从之前的地方往左就行，因为nums[j]增加，nums[k]必须不变或者变小，才有意义<br><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/LeedCode.assets/Snipaste_2022-03-27_09-36-23.png" alt="在这里插入图片描述"><br>题目要求不能有重复，如果nums[i]和等于nums[i - 1]的话，那么nums[i]的所有j和k，其实在nums[i - 1]已经全部枚举完了，所以得去除nums[i]&#x3D;&#x3D;nums[i - 1]的j和k，也就是跳过，一直到nums[i]和前面不一样才行<br><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/LeedCode.assets/Snipaste_2022-03-27_09-25-10.png" alt="在这里插入图片描述"><br>因为是有序的，如果三元组的第一个数不一样，后面肯定不一样<br>然后当i相同时，nums[j]也不能等于nums[j - 1]</p>
<p><strong>时间复杂度：<em>O(n<sup>2</sup>)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() &lt; <span class="number">3</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>, k = nums.<span class="built_in">size</span>() - <span class="number">1</span>; j &lt; k; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">while</span> (j &lt; k - <span class="number">1</span> &amp;&amp; nums[i] + nums[j] + nums[k - <span class="number">1</span>] &gt;= <span class="number">0</span>) k--;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] + nums[k] == <span class="number">0</span>) &#123;</span><br><span class="line">                    ans.<span class="built_in">push_back</span>(&#123;nums[i], nums[j], nums[k]&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="keyword">if</span> (nums.<span class="built_in">size</span>() &lt; <span class="number">3</span>) <span class="keyword">return</span> ans;</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>, k = nums.<span class="built_in">size</span>() - <span class="number">1</span>; j &lt; k; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; k - <span class="number">1</span> &amp;&amp; nums[i] + nums[j] + nums[k - <span class="number">1</span>] &gt;= <span class="number">0</span>) k--;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] + nums[j] + nums[k] == <span class="number">0</span>) &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(&#123;nums[i], nums[j], nums[k]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums = &#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-4</span>&#125;;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans = <span class="built_in">threeSum</span>(nums);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; ans[<span class="number">0</span>].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            cout &lt;&lt; ans[i][j] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="16-最接近的三数之和"><a href="#16-最接近的三数之和" class="headerlink" title="16. 最接近的三数之和"></a>16. 最接近的三数之和</h1><p><a href="https://leetcode-cn.com/problems/3sum-closest/">最接近的三数之和</a></p>
<p><strong>思路一：</strong><br>暴力解法<br><strong>时间复杂度：<em>O(n<sup>3</sup>)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">threeSumClosest</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">	    <span class="type">int</span> minv = INT_MAX;</span><br><span class="line">	    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	    <span class="type">int</span> minSum = <span class="number">0</span>;</span><br><span class="line">	    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">	        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>, k = nums.<span class="built_in">size</span>() - <span class="number">1</span>; j &lt; k; j++) &#123;</span><br><span class="line">	            <span class="keyword">while</span> (j &lt; k) &#123;</span><br><span class="line">	                sum = nums[i] + nums[j] + nums[k];</span><br><span class="line">	                <span class="keyword">if</span> (minv &gt; <span class="built_in">abs</span>(sum - target)) &#123;</span><br><span class="line">	                    minSum = sum;</span><br><span class="line">	                    minv = <span class="built_in">abs</span>(sum - target);</span><br><span class="line">	                    <span class="keyword">if</span> (minv == <span class="number">0</span>) <span class="keyword">return</span> minSum;</span><br><span class="line">	                &#125;</span><br><span class="line">	                k--;</span><br><span class="line">	            &#125;</span><br><span class="line">	            k = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">return</span> minSum;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>思路二：</strong><br>排序+双指针优化掉一重循环<br>首先将 nums 数组排序，然后固定一重循环枚举起始位置 i ，这样就优化成 2 个数 j, k 之和最接近 target 的问题了<br>然后初始 j &#x3D; i + 1, k &#x3D; nums.size() - 1；如果发现 sum &#x3D;&#x3D; target，则可以直接返回 target<br>若发现 sum &lt; target，则 j++；否则 k–，这样就会向 target 逼近<br>直到 j &gt;&#x3D; k 停止，继续向后增加初始位置 i<br><strong>时间复杂度：<em>O(n<sup>2</sup>)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">threeSumClosest</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">	    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">	    <span class="type">int</span> minv = INT_MAX;</span><br><span class="line">	    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	    <span class="type">int</span> minSum = <span class="number">0</span>;</span><br><span class="line">	    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">	        <span class="type">int</span> j = i + <span class="number">1</span>, k = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">	        <span class="keyword">while</span> (j &lt; k) &#123;</span><br><span class="line">	            sum = nums[i] + nums[j] + nums[k];</span><br><span class="line">	            <span class="keyword">if</span> (minv &gt; <span class="built_in">abs</span>(sum - target)) &#123;</span><br><span class="line">	                minSum = sum;</span><br><span class="line">	                minv = <span class="built_in">abs</span>(sum - target);</span><br><span class="line">	            &#125;</span><br><span class="line">	            <span class="keyword">if</span> (sum == target) <span class="keyword">return</span> target;</span><br><span class="line">	            <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) j++;</span><br><span class="line">	            <span class="keyword">else</span> k--;</span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">return</span> minSum;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">threeSumClosest</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> minv = INT_MAX;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> minSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> j = i + <span class="number">1</span>, k = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; k) &#123;</span><br><span class="line">            sum = nums[i] + nums[j] + nums[k];</span><br><span class="line">            <span class="keyword">if</span> (minv &gt; <span class="built_in">abs</span>(sum - target)) &#123;</span><br><span class="line">                minSum = sum;</span><br><span class="line">                minv = <span class="built_in">abs</span>(sum - target);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sum == target) <span class="keyword">return</span> target;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) j++;</span><br><span class="line">            <span class="keyword">else</span> k--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minSum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> target = <span class="number">-100</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">threeSumClosest</span>(nums, target) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17. 电话号码的字母组合"></a>17. 电话号码的字母组合</h1><p><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/">电话号码的字母组合</a></p>
<p><strong>思路：</strong><br>递归<br><strong>时间复杂度：<em>O(4<sup>n</sup>)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string str[<span class="number">10</span>] = &#123;</span><br><span class="line">            <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ghi&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;mno&quot;</span>,</span><br><span class="line">            <span class="string">&quot;pqrs&quot;</span>, <span class="string">&quot;tuv&quot;</span>, <span class="string">&quot;wxyz&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    vector&lt;string&gt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(string &amp;digits, <span class="type">int</span> u, string path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == digits.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> k = digits[u] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str[k].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(digits, u + <span class="number">1</span>, path + str[k][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">letterCombinations</span><span class="params">(string digits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (digits.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="type">int</span> u = <span class="number">0</span>;</span><br><span class="line">        string path;</span><br><span class="line">        <span class="built_in">dfs</span>(digits, u, path);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">string str[<span class="number">10</span>] = &#123;</span><br><span class="line">        <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ghi&quot;</span>, <span class="string">&quot;jkl&quot;</span>, <span class="string">&quot;mno&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pqrs&quot;</span>, <span class="string">&quot;tuv&quot;</span>, <span class="string">&quot;wxyz&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;string&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(string &amp;digits, <span class="type">int</span> u, string path)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == digits.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(path);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> k = digits[u] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str[k].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(digits, u + <span class="number">1</span>, path + str[k][i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">letterCombinations</span><span class="params">(string digits)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (digits.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    <span class="type">int</span> u = <span class="number">0</span>;</span><br><span class="line">    string path;</span><br><span class="line">    <span class="built_in">dfs</span>(digits, u, path);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    vector&lt;string&gt; ans = <span class="built_in">letterCombinations</span>(s);</span><br><span class="line">    <span class="keyword">for</span> (string i : ans) &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和"></a>18. 四数之和</h1><p><a href="https://leetcode-cn.com/problems/4sum/">四数之和</a></p>
<p><strong>思路：</strong><br>排序+双指针优化一层复杂度<br>注意爆 int ，要用 long long 存储四数之和<br><strong>时间复杂度：<em>O(n<sup>3</sup>)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">fourSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = j + <span class="number">1</span>, u = nums.<span class="built_in">size</span>() - <span class="number">1</span>; k &lt; u; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (k &gt; j + <span class="number">1</span> &amp;&amp; nums[k] == nums[k - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="keyword">while</span> (k &lt; u - <span class="number">1</span> &amp;&amp; (<span class="type">long</span> <span class="type">long</span>) nums[i] + nums[j] + nums[k] + nums[u - <span class="number">1</span>] - target &gt;= <span class="number">0</span>) u--;</span><br><span class="line">                        <span class="keyword">if</span> ((<span class="type">long</span> <span class="type">long</span>) nums[i] + nums[j] + nums[k] + nums[u] == target) &#123;</span><br><span class="line">                            ans.<span class="built_in">push_back</span>(&#123;nums[i], nums[j], nums[k], nums[u]&#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">fourSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target) &#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = j + <span class="number">1</span>, u = nums.<span class="built_in">size</span>() - <span class="number">1</span>; k &lt; u; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (k &gt; j + <span class="number">1</span> &amp;&amp; nums[k] == nums[k - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">while</span> (k &lt; u - <span class="number">1</span> &amp;&amp; nums[i] + nums[j] + nums[k] + nums[u - <span class="number">1</span>] - target &gt;= <span class="number">0</span>) u--;</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="type">long</span> <span class="type">long</span>) nums[i] + nums[j] + nums[k] + nums[u] == target) &#123;</span><br><span class="line">                        ans.<span class="built_in">push_back</span>(&#123;nums[i], nums[j], nums[k], nums[u]&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-2</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="type">int</span> target = <span class="number">0</span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans = <span class="built_in">fourSum</span>(nums, target);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; ans[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            cout &lt;&lt; ans[i][j] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a>19. 删除链表的倒数第 N 个结点</h1><p><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">删除链表的倒数第 N 个结点</a></p>
<p><strong>思路：</strong><br>遍历一遍统计节点个数，在遍历一遍删除对应节点<br><strong>时间复杂度：<em>O(n)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        dummy-&gt;next = head;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 统计链表总共有多少个节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p = dummy-&gt;next; p; p = p-&gt;next) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> j = i - n;</span><br><span class="line">        <span class="keyword">auto</span> cur = dummy;</span><br><span class="line">        <span class="keyword">while</span> (j--) &#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义链表节点的结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    <span class="built_in">ListNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x, ListNode *next) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(next) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除链表的倒数第 N 个结点</span></span><br><span class="line"><span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">    dummy-&gt;next = head;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 统计链表总共有多少个节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> p = dummy-&gt;next; p; p = p-&gt;next) &#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> j = i - n;</span><br><span class="line">    <span class="keyword">auto</span> cur = dummy;</span><br><span class="line">    <span class="keyword">while</span> (j--) &#123;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试样例</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">auto</span> dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">auto</span> cur = dummy;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; k, k != <span class="number">-1</span>) &#123;</span><br><span class="line">        cur-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(k);</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">auto</span> head = <span class="built_in">removeNthFromEnd</span>(dummy-&gt;next, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = head; i; i = i-&gt;next) &#123;</span><br><span class="line">        cout &lt;&lt; i-&gt;val &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a>20. 有效的括号</h1><p><a href="https://leetcode-cn.com/problems/valid-parentheses/">有效的括号</a></p>
<p><strong>思路：</strong><br>用栈，如果是左括号，就压栈，然后<code>continue</code><br>如果是右括号，则看栈顶是不是对应的左括号，如果不是，则压栈<br>如果是右括号，栈为空，则返回<code>false</code><br>如果遍历完毕，栈为空则返回<code>true</code>，否则返回<code>false</code><br><strong>时间复杂度：<em>O(n)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    stack&lt;<span class="type">char</span>&gt; stk;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span> || s[i] == <span class="string">&#x27;[&#x27;</span> || s[i] == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                stk.<span class="built_in">push</span>(s[i]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (stk.<span class="built_in">empty</span>() &amp;&amp; (s[i] == <span class="string">&#x27;)&#x27;</span> || s[i] == <span class="string">&#x27;]&#x27;</span> || s[i] == <span class="string">&#x27;&#125;&#x27;</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;)&#x27;</span> &amp;&amp; stk.<span class="built_in">top</span>() == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;]&#x27;</span> &amp;&amp; stk.<span class="built_in">top</span>() == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; stk.<span class="built_in">top</span>() == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stk.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">stack&lt;<span class="type">char</span>&gt; stk;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span> || s[i] == <span class="string">&#x27;[&#x27;</span> || s[i] == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">            stk.<span class="built_in">push</span>(s[i]);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (stk.<span class="built_in">empty</span>() &amp;&amp; (s[i] == <span class="string">&#x27;)&#x27;</span> || s[i] == <span class="string">&#x27;]&#x27;</span> || s[i] == <span class="string">&#x27;&#125;&#x27;</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;)&#x27;</span> &amp;&amp; stk.<span class="built_in">top</span>() == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;]&#x27;</span> &amp;&amp; stk.<span class="built_in">top</span>() == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; stk.<span class="built_in">top</span>() == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stk.<span class="built_in">empty</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">isValid</span>(s) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21. 合并两个有序链表"></a>21. 合并两个有序链表</h1><p><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">合并两个有序链表</a></p>
<p><strong>思路：</strong><br>遍历一遍即可<br><strong>时间复杂度：<em>O(n)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* list1, ListNode* list2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">auto</span> cur = dummy;</span><br><span class="line">        <span class="keyword">while</span> (list1 &amp;&amp; list2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list1-&gt;val &lt; list2-&gt;val) &#123;</span><br><span class="line">                cur-&gt;next = list1;</span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">                list1 = cur-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur-&gt;next = list2;</span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">                list2 = cur-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list1) cur-&gt;next = list1;</span><br><span class="line">        <span class="keyword">if</span> (list2) cur-&gt;next = list2;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="22-括号生成"><a href="#22-括号生成" class="headerlink" title="22. 括号生成"></a>22. 括号生成</h1><p><a href="https://leetcode-cn.com/problems/generate-parentheses/">括号生成</a></p>
<p><strong>思路：</strong><br>左括号小于<code>n</code>，就可以加；右括号数量小于左括号数量则可以加<br><strong>时间复杂度：<em>O(n)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;string&gt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// lc为左括号的数量，rc为右括号的数量</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> lc, <span class="type">int</span> rc, string res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lc == n &amp;&amp; rc == n) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(res);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (lc &lt; n) <span class="built_in">dfs</span>(n, lc + <span class="number">1</span>, rc, res + <span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (rc &lt; lc) <span class="built_in">dfs</span>(n, lc, rc + <span class="number">1</span>, res + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(n, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;string&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lc为左括号的数量，rc为右括号的数量</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> lc, <span class="type">int</span> rc, string res)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lc == n &amp;&amp; rc == n) &#123;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(res);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lc &lt; n) <span class="built_in">dfs</span>(n, lc + <span class="number">1</span>, rc, res + <span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (rc &lt; lc) <span class="built_in">dfs</span>(n, lc, rc + <span class="number">1</span>, res + <span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;string&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">dfs</span>(n, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;string&gt; ans = <span class="built_in">generateParenthesis</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> s : ans) &#123;</span><br><span class="line">        cout &lt;&lt; s &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="23-合并K个升序链表"><a href="#23-合并K个升序链表" class="headerlink" title="23. 合并K个升序链表"></a>23. 合并K个升序链表</h1><p><a href="https://leetcode.cn/problems/merge-k-sorted-lists/">23. 合并K个升序链表</a></p>
<p>思路：归并，堆，优先队列，重载小于号</p>
<p>时间复杂度：knlogk</p>
<p>优先队列定义：<code>priority_queue&lt;Type, Container, Functional&gt;</code></p>
<p><code>for (auto l : lists) if (l) heap.push(l); </code>优先队列 只是把 每个链表的头结点的地址 push进去了，而不是把整个链表 push进去。</p>
<p>因为优先队列中存的是 链表头结点的地址, 我们要比较的是结点的值 而不是 地址，所以 要自己定义 Cmp 比较 结点的值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 重载 &quot;()&quot; 是因为 STL容器 在比较的时候用的是 结构体的小括号运算符</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Cmp</span> &#123;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(ListNode* a, ListNode* b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a-&gt;val &gt; b-&gt;val; <span class="comment">// 小根堆 是 &#x27;&gt;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(vector&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 优先队列 定义：priority_queue&lt;Type, Container, Functional&gt;</span></span><br><span class="line">        <span class="comment">// 因为 优先队列中存的是 链表头结点的地址, 我们要比较的是结点的值 而不是 地址</span></span><br><span class="line">        <span class="comment">// 所以 要自己定义 Cmp 比较 结点的值</span></span><br><span class="line">        priority_queue&lt;ListNode*, vector&lt;ListNode*&gt;, Cmp&gt; heap;</span><br><span class="line">        <span class="keyword">auto</span> dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">auto</span> cur = dummy;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> l : lists) <span class="keyword">if</span> (l) heap.<span class="built_in">push</span>(l);</span><br><span class="line">        <span class="keyword">while</span> (!heap.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> t = heap.<span class="built_in">top</span>();</span><br><span class="line">            heap.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (t-&gt;next) heap.<span class="built_in">push</span>(t-&gt;next);</span><br><span class="line"></span><br><span class="line">            cur-&gt;next = t;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a>24. 两两交换链表中的节点</h1><p><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">两两交换链表中的节点</a></p>
<p><strong>思路：</strong><br>用临时变量<code>temp</code>储存下一个值，方便调换<br>然后用<code>before</code>存储上一个值<br><strong>时间复杂度：<em>O(n)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!head) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* h;</span><br><span class="line">        <span class="keyword">if</span> (head-&gt;next) h = head-&gt;next;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> head;</span><br><span class="line">        ListNode* before = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p = head; p &amp;&amp; p-&gt;next; p = p-&gt;next) &#123;</span><br><span class="line">            <span class="keyword">auto</span> temp = p-&gt;next;</span><br><span class="line">            before-&gt;next = temp;</span><br><span class="line">            p-&gt;next = temp-&gt;next;</span><br><span class="line">            temp-&gt;next = p;</span><br><span class="line">            before = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    <span class="built_in">ListNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x, ListNode *next) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(next) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!head) <span class="keyword">return</span> head;</span><br><span class="line">    ListNode* h;</span><br><span class="line">    <span class="keyword">if</span> (head-&gt;next) h = head-&gt;next;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> head;</span><br><span class="line">    ListNode* before = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> p = head; p &amp;&amp; p-&gt;next; p = p-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">auto</span> temp = p-&gt;next;</span><br><span class="line">        before-&gt;next = temp;</span><br><span class="line">        p-&gt;next = temp-&gt;next;</span><br><span class="line">        temp-&gt;next = p;</span><br><span class="line">        before = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">auto</span> dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">auto</span> cur = dummy;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; k, k != <span class="number">-1</span>) &#123;</span><br><span class="line">        cur-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(k);</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> head = <span class="built_in">swapPairs</span>(dummy-&gt;next);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = head; i; i = i-&gt;next) &#123;</span><br><span class="line">        cout &lt;&lt; i-&gt;val &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="25-K-个一组翻转链表"><a href="#25-K-个一组翻转链表" class="headerlink" title="25. K 个一组翻转链表"></a>25. K 个一组翻转链表</h1><p><a href="https://leetcode.cn/problems/reverse-nodes-in-k-group/">25. K 个一组翻转链表</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseKGroup</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        dummy-&gt;next = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p = dummy; ;) &#123;</span><br><span class="line">            <span class="keyword">auto</span> q = p;</span><br><span class="line">            <span class="comment">// 看看后面有没有k个结点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k &amp;&amp; p; i++, p = p-&gt;next);</span><br><span class="line">            <span class="keyword">if</span> (!p) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反转内部</span></span><br><span class="line">            <span class="keyword">auto</span> a = q-&gt;next, b = a-&gt;next;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">auto</span> c = b-&gt;next;</span><br><span class="line">                b-&gt;next = a;</span><br><span class="line">                a = b, b = c;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反转外部</span></span><br><span class="line">            <span class="keyword">auto</span> t = q-&gt;next;</span><br><span class="line">            q-&gt;next = a;</span><br><span class="line">            t-&gt;next = b;</span><br><span class="line">            p = t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a>26. 删除有序数组中的重复项</h1><p><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">删除有序数组中的重复项</a></p>
<p><strong>思路：</strong><br>双指针<br><strong>时间复杂度：<em>O(n)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!i || nums[i] != nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                nums[k++] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a>27. 移除元素</h1><p><a href="https://leetcode-cn.com/problems/remove-element/">移除元素</a></p>
<p><strong>思路：</strong><br>双指针<br><strong>时间复杂度：<em>O(n)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != val) &#123;</span><br><span class="line">                nums[k++] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="28-实现-strStr"><a href="#28-实现-strStr" class="headerlink" title="28. 实现 strStr()"></a>28. 实现 strStr()</h1><p><a href="https://leetcode-cn.com/problems/implement-strstr/">实现 strStr()</a></p>
<p><strong>思路：</strong><br>kmp算法<br><strong>时间复杂度：<em>O(n + m)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(), m = p.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// 字符串先补成从1开始</span></span><br><span class="line">        s = <span class="string">&#x27; &#x27;</span> + s, p = <span class="string">&#x27; &#x27;</span> + p;</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">next</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="comment">// 求next数组，为什么从 i = 2 开始呢，因为 next[1] = 0</span></span><br><span class="line">        <span class="comment">// next 指的是非平凡的前缀和后缀相等的最大值，不包括本身，所以 next[1] = 0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = next[j];</span><br><span class="line">            <span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) j++;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = next[j];</span><br><span class="line">            <span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>]) j++;</span><br><span class="line">            <span class="keyword">if</span> (j == m) <span class="keyword">return</span> i - m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">strStr</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">size</span>(), m = p.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">// 字符串先补成从1开始</span></span><br><span class="line">    s = <span class="string">&#x27; &#x27;</span> + s, p = <span class="string">&#x27; &#x27;</span> + p;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">next</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="comment">// 求next数组，为什么从 i = 2 开始呢，因为 next[1] = 0</span></span><br><span class="line">    <span class="comment">// next 指的是非平凡的前缀和后缀相等的最大值，不包括本身，所以 next[1] = 0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = next[j];</span><br><span class="line">        <span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) j++;</span><br><span class="line">        next[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = next[j];</span><br><span class="line">        <span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>]) j++;</span><br><span class="line">        <span class="keyword">if</span> (j == m) <span class="keyword">return</span> i - m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s, p;</span><br><span class="line">    cin &gt;&gt; s &gt;&gt; p;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">strStr</span>(s, p) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="29-两数相除"><a href="#29-两数相除" class="headerlink" title="29. 两数相除"></a>29. 两数相除</h1><p><a href="https://leetcode-cn.com/problems/divide-two-integers/">两数相除</a></p>
<p><strong>思路：</strong><br>快速幂+位运算<br><strong>时间复杂度：<em>O(log<sub>2</sub>n)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line">        vector&lt;LL&gt; exp;</span><br><span class="line">        <span class="type">bool</span> is_minus = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; y &lt; <span class="number">0</span> || x &lt; <span class="number">0</span> &amp;&amp; y &gt; <span class="number">0</span>) is_minus = <span class="literal">true</span>;</span><br><span class="line">        LL a = <span class="built_in">abs</span>((LL)x), b = <span class="built_in">abs</span>((LL)y);</span><br><span class="line">        <span class="keyword">for</span> (LL i = b; i &lt;= a; i = i + i) exp.<span class="built_in">push_back</span>(i);</span><br><span class="line"></span><br><span class="line">        LL res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = exp.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a &gt;= exp[i]) &#123;</span><br><span class="line">                a -= exp[i];</span><br><span class="line">                res += <span class="number">1LL</span> &lt;&lt; i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is_minus) res = -res;</span><br><span class="line">        <span class="keyword">if</span> (res &gt; INT_MAX || res &lt; INT_MIN) res = INT_MAX;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="30-串联所有单词的子串"><a href="#30-串联所有单词的子串" class="headerlink" title="30. 串联所有单词的子串"></a>30. 串联所有单词的子串</h1><p><a href="https://leetcode.cn/problems/substring-with-concatenation-of-all-words/">30. 串联所有单词的子串</a></p>
<p>我们就可以枚举每个序列，对于每个序列我们可以用双指针来搜索包含words所有单词的连续序列。这里是以单词为单位进行双指针移动。</p>
<p>我们每次将窗口右端的单词加入哈希表，如果它的个数大于words中的个数，当前序列肯定不合法，我们不断地移动左端点使得窗口再次合法，当窗口长度为m时说明我们找到了一个答案。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findSubstring</span><span class="params">(string s, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (words.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">        unordered_map&lt;string, <span class="type">int</span>&gt; hash;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;word : words) hash[word] ++ ;</span><br><span class="line"></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="type">int</span> w = words[<span class="number">0</span>].<span class="built_in">size</span>(), n = words.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; w; i ++ ) &#123;</span><br><span class="line">            <span class="comment">// 将序列切出来</span></span><br><span class="line">            vector&lt;string&gt; ws;</span><br><span class="line">            <span class="type">int</span> j = i;</span><br><span class="line">            <span class="keyword">while</span> (j + w - <span class="number">1</span> &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                ws.<span class="built_in">push_back</span>(s.<span class="built_in">substr</span>(j, w));</span><br><span class="line">                j += w;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 双指针匹配</span></span><br><span class="line">            unordered_map&lt;string, <span class="type">int</span>&gt; h;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>; b &lt; ws.<span class="built_in">size</span>(); b ++ ) &#123;</span><br><span class="line">                h[ws[b]] ++ ;</span><br><span class="line">                <span class="keyword">while</span> (h[ws[b]] &gt; hash[ws[b]]) &#123;</span><br><span class="line">                    h[ws[a]] -- ;</span><br><span class="line">                    a ++ ;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 这里下标应为第i个序列的第a个单词</span></span><br><span class="line">                <span class="keyword">if</span> (b - a + <span class="number">1</span> == n) res.<span class="built_in">push_back</span>(i + a * w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="31-下一个排列"><a href="#31-下一个排列" class="headerlink" title="31. 下一个排列"></a>31. 下一个排列</h1><p><a href="https://leetcode-cn.com/problems/next-permutation/">下一个排列</a></p>
<p><strong>思路：</strong></p>
<p>首先逆序扫描一遍数组，找到降序的点（即：图中红色的点）<br>如图：</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/LeedCode.assets/Snipaste_2022-03-30_23-11-48.png" alt="1"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> k = nums.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">while</span> (k &gt; <span class="number">0</span> &amp;&amp; nums[k - <span class="number">1</span>] &gt;= nums[k]) k --;</span><br></pre></td></tr></table></figure>

<p>循环结束<code>k</code>的值表示红色的点<code>a</code>的下标。</p>
<p>然后重新逆序遍历，找到最小的比<code>k - 1</code>大的点。由于在图中点<code>a</code>后面的点本身就是排好序了的，所以我们逆序遍历，第一个比<code>k - 1</code>大的点就是最小的比<code>k - 1</code>大的点。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> t = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (nums[t] &lt;= nums[k - <span class="number">1</span>]) t--;</span><br></pre></td></tr></table></figure>

<p>然后交换这两个点</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">swap</span>(nums[t], nums[k - <span class="number">1</span>]);</span><br></pre></td></tr></table></figure>

<p>最后将后面（蓝色圈出来部分）下降的折线 捋成上升的形状。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>() + k, nums.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure>

<p><strong>时间复杂度：<em>O(n)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">nextPermutation</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">0</span> &amp;&amp; nums[k - <span class="number">1</span>] &gt;= nums[k]) k--;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> t = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (nums[t] &lt;= nums[k - <span class="number">1</span>]) t--;</span><br><span class="line">            <span class="built_in">swap</span>(nums[t], nums[k - <span class="number">1</span>]);</span><br><span class="line">            <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>() + k, nums.<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">nextPermutation</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> k = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">0</span> &amp;&amp; nums[k - <span class="number">1</span>] &gt;= nums[k]) k--;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> t = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (nums[t] &lt;= nums[k - <span class="number">1</span>]) t--;</span><br><span class="line">        <span class="built_in">swap</span>(nums[t], nums[k - <span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>() + k, nums.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n, n != <span class="number">-1</span>) &#123;</span><br><span class="line">        nums.<span class="built_in">push_back</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">nextPermutation</span>(nums);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : nums) &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="32-最长有效括号"><a href="#32-最长有效括号" class="headerlink" title="32. 最长有效括号"></a>32. 最长有效括号</h1><p><a href="https://leetcode.cn/problems/longest-valid-parentheses/">32. 最长有效括号</a></p>
<p>栈</p>
<p>1、用栈维护当前待匹配的左括号的位置，同时用 start 记录一个新的可能合法的子串的起始位置，初始设为0。</p>
<p>2、如果s[i] &#x3D;&#x3D;’(‘，那么把i进栈。</p>
<p>3、如果s[i] &#x3D;&#x3D; ‘)’,那么弹出栈顶元素 （代表栈顶的左括号匹配到了右括号），出栈后：</p>
<p>如果栈为空，说明以当前右括号为右端点的合法括号序列的左端点为start，则更新答案 i - start + 1。</p>
<p>如果栈不为空，说明以当前右括号为右端点的合法括号序列的左端点为栈顶元素的下一个元素，则更新答案i - stk.top() 。</p>
<p>4、遇到右括号)且当前栈为空，则当前的 start 开始的子串不再可能为合法子串了，下一个合法子串的起始位置可能是 i + 1，更新 start &#x3D; i + 1。</p>
<p><strong>实现细节：</strong>栈保存的是下标，总之一句话，栈中不可能保存右括号。</p>
<p><strong>时间复杂度：</strong> 每个位置遍历一次，最多进栈一次，故时间复杂度为 O(n)。</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/LeedCode.assets/image-20220813233749996.png" alt="image-20220813233749996"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestValidParentheses</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>) stk.<span class="built_in">push</span>(i); <span class="comment">// 左括号入栈   </span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (stk.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                    stk.<span class="built_in">pop</span>(); <span class="comment">// 匹配成功</span></span><br><span class="line">                    <span class="keyword">if</span> (stk.<span class="built_in">empty</span>()) ans = <span class="built_in">max</span>(ans, i - start + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">else</span> ans = <span class="built_in">max</span>(ans, i - stk.<span class="built_in">top</span>());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    start = i + <span class="number">1</span>; <span class="comment">// 更新可能的起点 </span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="33-搜索旋转排序数组"><a href="#33-搜索旋转排序数组" class="headerlink" title="33. 搜索旋转排序数组"></a>33. 搜索旋转排序数组</h1><p><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/">搜索旋转排序数组</a></p>
<p><strong>思路：</strong></p>
<p>二分找出分界点</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/LeedCode.assets/Snipaste_2022-03-30_23-57-39.png" alt="1"></p>
<p><strong>时间复杂度：<em>O(log<sub>2</sub>n)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (nums[l] &gt; nums[r]) &#123;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= nums[<span class="number">0</span>]) l = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r = mid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nums[<span class="number">0</span>] &lt;= target) l = <span class="number">0</span>, r = r - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> r = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt; target) r = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nums[l] == target) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a>34. 在排序数组中查找元素的第一个和最后一个位置</h1><p><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/">在排序数组中查找元素的第一个和最后一个位置</a></p>
<p><strong>思路：</strong></p>
<p>两次二分即可</p>
<p><strong>时间复杂度：<em>O(log<sub>2</sub>n)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">empty</span>()) <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nums[l] != target) <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        ans.<span class="built_in">push_back</span>(r);</span><br><span class="line"></span><br><span class="line">        l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(r);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35. 搜索插入位置"></a>35. 搜索插入位置</h1><p><a href="https://leetcode-cn.com/problems/search-insert-position/">搜索插入位置</a></p>
<p><strong>思路：</strong></p>
<p>二分</p>
<p><strong>时间复杂度：<em>O(log<sub>2</sub>n)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">searchInsert</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> mid;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l == nums.<span class="built_in">size</span>() - <span class="number">1</span> &amp;&amp; target &gt; nums[l]) l++;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">searchInsert</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> mid; </span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">    	mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    	<span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">    		l = mid + <span class="number">1</span>;</span><br><span class="line">    	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    		r = mid;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l == nums.<span class="built_in">size</span>() - <span class="number">1</span> &amp;&amp; target &gt; nums[l]) l++;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; nums = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">	<span class="type">int</span> target = <span class="number">0</span>;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">searchInsert</span>(nums, target) &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="36-有效的数独"><a href="#36-有效的数独" class="headerlink" title="36. 有效的数独"></a>36. 有效的数独</h1><p><a href="https://leetcode-cn.com/problems/valid-sudoku/">有效的数独</a></p>
<p><strong>时间复杂度：<em>O(n<sup>2</sup>)</em></strong><br><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidSudoku</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// res[9]为行，col[9]为列</span></span><br><span class="line">        <span class="type">int</span> res[<span class="number">9</span>], col[<span class="number">9</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(res, <span class="number">0</span>, <span class="keyword">sizeof</span> res);</span><br><span class="line">            <span class="built_in">memset</span>(col, <span class="number">0</span>, <span class="keyword">sizeof</span> col);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] != <span class="string">&#x27;.&#x27;</span> &amp;&amp; ++res[board[i][j] - <span class="string">&#x27;1&#x27;</span>] &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (board[j][i] != <span class="string">&#x27;.&#x27;</span> &amp;&amp; ++col[board[j][i] - <span class="string">&#x27;1&#x27;</span>] &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// res[9]为九宫格</span></span><br><span class="line">        <span class="type">int</span> rc[<span class="number">9</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i += <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j += <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="built_in">memset</span>(rc, <span class="number">0</span>, <span class="keyword">sizeof</span> rc);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; <span class="number">3</span>; x++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; <span class="number">3</span>; y++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (board[x + i][y + j] != <span class="string">&#x27;.&#x27;</span> &amp;&amp; ++rc[board[x + i][y + j] - <span class="string">&#x27;1&#x27;</span>] &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="37-解数独"><a href="#37-解数独" class="headerlink" title="37. 解数独"></a>37. 解数独</h1><p><a href="https://leetcode.cn/problems/sudoku-solver/">37. 解数独</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 记录行，列，小方块中1-9有没有重复</span></span><br><span class="line">    <span class="type">bool</span> row[<span class="number">9</span>][<span class="number">9</span>], col[<span class="number">9</span>][<span class="number">9</span>], cell[<span class="number">3</span>][<span class="number">3</span>][<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 换行</span></span><br><span class="line">        <span class="keyword">if</span> (y == <span class="number">9</span>) x++, y = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 九宫格遍历完了</span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">9</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果这里本来就有数，就自动跳到下一个</span></span><br><span class="line">        <span class="keyword">if</span> (board[x][y] != <span class="string">&#x27;.&#x27;</span>) <span class="keyword">return</span> <span class="built_in">dfs</span>(board, x, y + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 行，列，九宫格都没有重复，就可以递归下去</span></span><br><span class="line">            <span class="keyword">if</span> (!row[x][i] &amp;&amp; !col[y][i] &amp;&amp; !cell[x / <span class="number">3</span>][y / <span class="number">3</span>][i]) &#123;</span><br><span class="line">                board[x][y] = <span class="string">&#x27;1&#x27;</span> + i;</span><br><span class="line">                row[x][i] = col[y][i] = cell[x / <span class="number">3</span>][y / <span class="number">3</span>][i] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">dfs</span>(board, x, y + <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">// 全局变量要恢复现场</span></span><br><span class="line">                board[x][y] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                row[x][i] = col[y][i] = cell[x / <span class="number">3</span>][y / <span class="number">3</span>][i] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">solveSudoku</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> t = board[i][j] - <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">                    row[i][t] = col[j][t] = cell[i / <span class="number">3</span>][j / <span class="number">3</span>][t] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(board, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="38-外观数列"><a href="#38-外观数列" class="headerlink" title="38. 外观数列"></a>38. 外观数列</h1><p><a href="https://leetcode-cn.com/problems/count-and-say/">外观数列</a></p>
<p><strong>思路：</strong></p>
<p>简单模拟一下即可，双指针</p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">countAndSay</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        string s = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            string t;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>, j = k; j &lt; s.<span class="built_in">size</span>();) &#123;</span><br><span class="line">                <span class="keyword">while</span> (j &lt; s.<span class="built_in">size</span>() &amp;&amp; s[j] == s[k]) &#123;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">                t += <span class="built_in">to_string</span>(j - k) + s[k];</span><br><span class="line">                k = j;</span><br><span class="line">            &#125;</span><br><span class="line">            s = t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="39-组合总和"><a href="#39-组合总和" class="headerlink" title="39. 组合总和"></a>39. 组合总和</h1><p><a href="https://leetcode-cn.com/problems/combination-sum/">组合总和</a></p>
<p><strong>思路：</strong></p>
<p>暴力枚举每个数选几个</p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum</span>(vector&lt;<span class="type">int</span>&gt; &amp;c, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(c, <span class="number">0</span>, target);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;c, <span class="type">int</span> u, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (u == c.<span class="built_in">size</span>()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; c[u] * i &lt;= target; i++) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(c, u + <span class="number">1</span>, target - c[u] * i);</span><br><span class="line">            path.<span class="built_in">push_back</span>(c[u]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 恢复现场</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; c[u] * i &lt;= target; i++) &#123;</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum</span>(vector&lt;<span class="type">int</span>&gt; &amp;c, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(c, <span class="number">0</span>, target);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;c, <span class="type">int</span> u, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (u == c.<span class="built_in">size</span>()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; c[u] * i &lt;= target; i++) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(c, u + <span class="number">1</span>, target - c[u] * i);</span><br><span class="line">            path.<span class="built_in">push_back</span>(c[u]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 恢复现场</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; c[u] * i &lt;= target; i++) &#123;</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; c = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> target = <span class="number">8</span>;</span><br><span class="line">    Solution s;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans = s.<span class="built_in">combinationSum</span>(c, target);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; ans[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            cout &lt;&lt; ans[i][j] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="40-组合总和-II"><a href="#40-组合总和-II" class="headerlink" title="40. 组合总和 II"></a>40. 组合总和 II</h1><p><a href="https://leetcode-cn.com/problems/combination-sum-ii/">组合总和 II</a></p>
<p><strong>思路：</strong></p>
<p>先求每个数最多能出现的次数，然后枚举每个数选几个，并且加上个数限制即可</p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum2</span>(vector&lt;<span class="type">int</span>&gt; &amp;c, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">dfs</span>(c, <span class="number">0</span>, target);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;c, <span class="type">int</span> u, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (u == c.<span class="built_in">size</span>()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> k = u + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; c.<span class="built_in">size</span>() &amp;&amp; c[k] == c[u]) k++;</span><br><span class="line">        <span class="type">int</span> cnt = k - u;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; c[u] * i &lt;= target &amp;&amp; i &lt;= cnt; i++) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(c, k, target - c[u] * i);</span><br><span class="line">            path.<span class="built_in">push_back</span>(c[u]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 恢复现场</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; c[u] * i &lt;= target &amp;&amp; i &lt;= cnt; i++) &#123;</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum2</span>(vector&lt;<span class="type">int</span>&gt; &amp;c, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">dfs</span>(c, <span class="number">0</span>, target);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;c, <span class="type">int</span> u, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (u == c.<span class="built_in">size</span>()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> k = u + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; c.<span class="built_in">size</span>() &amp;&amp; c[k] == c[u]) k++;</span><br><span class="line">        <span class="type">int</span> cnt = k - u;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; c[u] * i &lt;= target &amp;&amp; i &lt;= cnt; i++) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(c, k, target - c[u] * i);</span><br><span class="line">            path.<span class="built_in">push_back</span>(c[u]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 恢复现场</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; c[u] * i &lt;= target &amp;&amp; i &lt;= cnt; i++) &#123;</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; c = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> target = <span class="number">8</span>;</span><br><span class="line">    Solution s;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans = s.<span class="built_in">combinationSum</span>(c, target);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; ans[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            cout &lt;&lt; ans[i][j] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="41-缺失的第一个正数"><a href="#41-缺失的第一个正数" class="headerlink" title="41. 缺失的第一个正数"></a>41. 缺失的第一个正数</h1><p><a href="https://leetcode-cn.com/problems/first-missing-positive/">缺失的第一个正数</a></p>
<p><strong>思路一：</strong></p>
<p>自己设计哈希</p>
<p>将数组中所有小于等于 0 的数修改为 N+1；</p>
<p>遍历数组中的每一个数 x，它可能已经被打了标记，因此原本对应的数为 ∣x∣。如果∣x∣∈[1,N]，那么我们给数组中的第 ∣x∣−1 个位置的数添加一个负号。如果它已经有负号，不需要重复添加；</p>
<p>在遍历完成之后，如果数组中的每一个数都是负数，那么答案是 N+1，否则答案是第一个正数的位置加 1。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstMissingPositive</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>&amp; i : nums) </span><br><span class="line">            <span class="keyword">if</span> (i &lt;= <span class="number">0</span>) </span><br><span class="line">                i = n + <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> num = <span class="built_in">abs</span>(nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (num &lt;= n)</span><br><span class="line">                nums[num - <span class="number">1</span>] = -<span class="built_in">abs</span>(nums[num - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>思路二：</strong></p>
<p>原地哈希算法：</p>
<p>原地哈希算法主要应用在范围为 [0, len(nums)] 的数组解法中，将数组元素本身作为<code>nums</code> 的下标，即 <code>nums[nums[i]]</code></p>
<p>原地哈希映射：保证1出现在nums[0]的位置上，2出现在nums[1]的位置上，…，n出现在nums[n-1]的位置上，其他的数字不管。例如[3,4,-1,1]将被排序为[1,-1,3,4]</p>
<p>遍历nums，找到第一个不在应在位置上的1到n的数。例如，排序后的[1,-1,3,4]中第一个 nums[i] !&#x3D; i + 1 的是数字2（注意此时i&#x3D;1）。</p>
<p>时间复杂度分析：代码中第二层while循环，每循环一次，会将一个数放在正确的位置上，所以总共最多执行 n 次，所以总时间复杂度 O(n)。</p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>空间复杂度：<em>O(1)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstMissingPositive</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (nums[i] &gt; <span class="number">0</span> &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[nums[i] - <span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(nums[nums[i] - <span class="number">1</span>], nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="42-接雨水"><a href="#42-接雨水" class="headerlink" title="42. 接雨水"></a>42. 接雨水</h1><p><a href="https://leetcode.cn/problems/trapping-rain-water/">42. 接雨水</a></p>
<p>算height[i]两边的高度取个min 然后跟h[i]做个差就是h[i]能存的水</p>
<p><strong>时间复杂度：</strong>O(n)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">trap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = height.<span class="built_in">size</span>(), res = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">left</span><span class="params">(n)</span>, <span class="title">right</span><span class="params">(n)</span></span>;</span><br><span class="line">        left[<span class="number">0</span>] = height[<span class="number">0</span>];</span><br><span class="line">        right[n - <span class="number">1</span>] = height[n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            left[i] = <span class="built_in">max</span>(left[i - <span class="number">1</span>], height[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            right[i] = <span class="built_in">max</span>(right[i + <span class="number">1</span>], height[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            res += <span class="built_in">min</span>(left[i], right[i] ) - height[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="43-字符串相乘"><a href="#43-字符串相乘" class="headerlink" title="43. 字符串相乘"></a>43. 字符串相乘</h1><p><a href="https://leetcode-cn.com/problems/multiply-strings/">字符串相乘</a></p>
<p><strong>思路：</strong></p>
<p>将A[i] * B[j] 加到 C[i + j] 里面，最后再一起进位</p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/LeedCode.assets/image-20220412220151895.png" alt="image-20220412220151895"></p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">multiply</span><span class="params">(string num1, string num2)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line">        <span class="type">int</span> n = num1.<span class="built_in">size</span>(), m = num2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            A.<span class="built_in">push_back</span>(num1[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            B.<span class="built_in">push_back</span>(num2[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">C</span><span class="params">(n + m)</span></span>;</span><br><span class="line">        <span class="comment">// 将A[i] * B[j] 加到 C[i + j] 里面</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                C[i + j] += A[i] * B[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理进位</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; C.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            t += C[i];</span><br><span class="line">            C[i] = t % <span class="number">10</span>;</span><br><span class="line">            t /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 去除前导0</span></span><br><span class="line">        <span class="type">int</span> k = C.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">0</span> &amp;&amp; C[k] == <span class="number">0</span>) k--;</span><br><span class="line">        <span class="comment">// 数字转字符串</span></span><br><span class="line">        string ans;</span><br><span class="line">        <span class="keyword">while</span> (k &gt;= <span class="number">0</span>) ans += C[k--] + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">multiply</span><span class="params">(string num1, string num2)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line">    <span class="type">int</span> n = num1.<span class="built_in">size</span>(), m = num2.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        A.<span class="built_in">push_back</span>(num1[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        B.<span class="built_in">push_back</span>(num2[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">C</span><span class="params">(n + m)</span></span>;</span><br><span class="line">    <span class="comment">// 将A[i] * B[j] 加到 C[i + j] 里面</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            C[i + j] += A[i] * B[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理进位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; C.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        t += C[i];</span><br><span class="line">        C[i] = t % <span class="number">10</span>;</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 去除前导0</span></span><br><span class="line">    <span class="type">int</span> k = C.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">0</span> &amp;&amp; C[k] == <span class="number">0</span>) k--;</span><br><span class="line">    <span class="comment">// 数字转字符串</span></span><br><span class="line">    string ans;</span><br><span class="line">    <span class="keyword">while</span> (k &gt;= <span class="number">0</span>) ans += C[k--] + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string num1, num2;</span><br><span class="line">    cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">multiply</span>(num1, num2) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="44-通配符匹配"><a href="#44-通配符匹配" class="headerlink" title="44. 通配符匹配"></a>44. 通配符匹配</h1><p><a href="https://leetcode.cn/problems/wildcard-matching/">44. 通配符匹配</a></p>
<p>dp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isMatch</span><span class="params">(string s, string p)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>(), m = p.<span class="built_in">size</span>();</span><br><span class="line">        s = <span class="string">&#x27; &#x27;</span> + s, p = <span class="string">&#x27; &#x27;</span> + p;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">f</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(m + <span class="number">1</span>));</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p[j] == <span class="string">&#x27;*&#x27;</span>) f[i][j] = i &amp;&amp; f[i - <span class="number">1</span>][j] || f[i][j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span> f[i][j] = (s[i] == p[j] || p[j] == <span class="string">&#x27;?&#x27;</span>) &amp;&amp; i &amp;&amp; f[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n][m];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="45-跳跃游戏-II"><a href="#45-跳跃游戏-II" class="headerlink" title="45. 跳跃游戏 II"></a>45. 跳跃游戏 II</h1><p><a href="https://leetcode-cn.com/problems/jump-game-ii/">跳跃游戏 II</a></p>
<p><strong>思路一：</strong>动态规划</p>
<p>定义f[i]为跳到点i需要的最小步数</p>
<p><strong>时间复杂度</strong>：O(n<sup>2</sup>)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">jump</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(n, <span class="number">0x3f3f3f3f</span>)</span></span>;</span><br><span class="line">        f[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">// 0跳到自己就是0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="comment">// 只要前面的点能跳到i点就更新最小值</span></span><br><span class="line">                <span class="keyword">if</span> (j + nums[j] &gt;= i) &#123;</span><br><span class="line">                    f[i] = <span class="built_in">min</span>(f[j] + <span class="number">1</span>, f[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>思路二：</strong></p>
<p>动态规划+贪心</p>
<ol>
<li><p>设状态 f(i) 表示到达 i 所需要的最少步数。</p>
</li>
<li><p>f(0)&#x3D;0，其余待定。定义辅助指针 last 为第一次到达 i 时上一步的位置，last 从 0 开始。</p>
</li>
<li><p>我们会发现f[i]是具有单调性的，也就是f[i + 1] &gt;&#x3D; f[i]。</p>
</li>
<li><p>根据以上得知，令 f(i)&#x3D;f(last)+1 后，f(i) 就会是最优值。</p>
<p>在动态规划时瓶颈就在于更新每个点的最小值时需要遍历所有能跳到i的点，而有了单调性以后就可以用第一个能跳到i的点更新了，这里无论是取哪一个点跳到i，其最终的结果是一样的，但是取第一个点和取最后一个点所需要的步数可能不相同，所以尽量选择靠前的点，这样步数就可能会减少，贪心的思想。</p>
</li>
<li><p>故可以根据 i 来让last 向后移动，找到最早的可以一步到达 i 的位置，然后根据 f(last) 更新 f(i)。</p>
</li>
</ol>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">jump</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, last = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 根据i来更新last。如果last + nums[last]够不到i，那就往后移last</span></span><br><span class="line">            <span class="keyword">while</span> (last + nums[last] &lt; i) last++;</span><br><span class="line">            <span class="comment">// 根据f[last]更新f[i]，last可以一步走到i</span></span><br><span class="line">            f[i] = f[last] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46. 全排列"></a>46. 全排列</h1><p><a href="https://leetcode-cn.com/problems/permutations/">全排列</a></p>
<p><strong>思路一：</strong></p>
<p>next_permutation函数</p>
<p><strong>时间复杂度：<em>O(n x n!)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permute</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(nums);</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>()));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>思路二：</strong></p>
<p><strong>时间复杂度：<em>O(n x n!)</em></strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; st;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> u, vector&lt;<span class="type">int</span>&gt;&amp; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(res);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!st[i]) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">                st[i] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(nums, u + <span class="number">1</span>, res);</span><br><span class="line">                st[i] = <span class="literal">false</span>;</span><br><span class="line">                res.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permute</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ ) st.<span class="built_in">push_back</span>(<span class="literal">false</span>);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="built_in">dfs</span>(nums, <span class="number">0</span>, res);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="47-全排列-II"><a href="#47-全排列-II" class="headerlink" title="47. 全排列 II"></a>47. 全排列 II</h1><p><a href="https://leetcode.cn/problems/permutations-ii/">47. 全排列 II</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; st;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> u, vector&lt;<span class="type">int</span>&gt;&amp; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(res);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!st[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &amp;&amp; nums[i - <span class="number">1</span>] == nums[i] &amp;&amp; !st[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                res.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">                st[i] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(nums, u + <span class="number">1</span>, res);</span><br><span class="line">                st[i] = <span class="literal">false</span>;</span><br><span class="line">                res.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">permuteUnique</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i ++ ) st.<span class="built_in">push_back</span>(<span class="literal">false</span>);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="built_in">dfs</span>(nums, <span class="number">0</span>, res);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="48-旋转图像"><a href="#48-旋转图像" class="headerlink" title="48. 旋转图像"></a>48. 旋转图像</h1><p>先沿着左对角线交换，然后沿着中线，左右交换</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; matrix.<span class="built_in">size</span>(); i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) </span><br><span class="line">                <span class="built_in">swap</span>(matrix[i][j], matrix[j][i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; matrix.<span class="built_in">size</span>(); i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>, k = matrix.<span class="built_in">size</span>() - <span class="number">1</span>; j &lt; k; j++, k--) </span><br><span class="line">                <span class="built_in">swap</span>(matrix[i][j], matrix[i][k]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="49-字母异位词分组"><a href="#49-字母异位词分组" class="headerlink" title="49. 字母异位词分组"></a>49. 字母异位词分组</h1><p><a href="https://leetcode.cn/problems/group-anagrams/">49. 字母异位词分组</a></p>
<p>哈希表+分组</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">groupAnagrams</span>(vector&lt;string&gt;&amp; strs) &#123;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; ans;</span><br><span class="line">        unordered_map&lt;string, vector&lt;string&gt;&gt; hash;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; strs.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">auto</span> tmp = strs[i];</span><br><span class="line">            <span class="built_in">sort</span>(tmp.<span class="built_in">begin</span>(), tmp.<span class="built_in">end</span>());</span><br><span class="line">            hash[tmp].<span class="built_in">push_back</span>(strs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; it : hash) ans.<span class="built_in">push_back</span>(it.second);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="50-Pow-x-n"><a href="#50-Pow-x-n" class="headerlink" title="50. Pow(x, n)"></a>50. Pow(x, n)</h1><p>快速幂</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line">        <span class="type">bool</span> is_minus = n &lt; <span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (LL k = <span class="built_in">abs</span>(<span class="built_in">LL</span>(n)); k; k &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k &amp; <span class="number">1</span>) res *= x;</span><br><span class="line">            x *= x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is_minus) res = <span class="number">1</span> / res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="51-N-皇后"><a href="#51-N-皇后" class="headerlink" title="51. N 皇后"></a>51. N 皇后</h1><p>dfs+回溯</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; ans;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; col, dg, udg;</span><br><span class="line">    vector&lt;string&gt; path;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == n) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!col[i] &amp;&amp; !dg[u - i + n] &amp;&amp; !udg[u + i]) &#123;</span><br><span class="line">                path[u][i] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                col[i] = dg[u - i + n] = udg[u + i] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(u + <span class="number">1</span>);</span><br><span class="line">                path[u][i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                col[i] = dg[u - i + n] = udg[u + i] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">solveNQueens</span>(<span class="type">int</span> _n) &#123;</span><br><span class="line">        n = _n;</span><br><span class="line">        col = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n);</span><br><span class="line">        dg = udg = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(<span class="number">2</span> * n);</span><br><span class="line">        path = <span class="built_in">vector</span>&lt;string&gt;(n, <span class="built_in">string</span>(n, <span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="52-N-皇后-II"><a href="#52-N-皇后-II" class="headerlink" title="52. N 皇后 II"></a>52. N 皇后 II</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; col, dg, udg;</span><br><span class="line">    vector&lt;string&gt; path;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == n) &#123;</span><br><span class="line">            sum++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!col[i] &amp;&amp; !dg[u - i + n] &amp;&amp; !udg[u + i]) &#123;</span><br><span class="line">                path[u][i] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                col[i] = dg[u - i + n] = udg[u + i] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(u + <span class="number">1</span>);</span><br><span class="line">                path[u][i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                col[i] = dg[u - i + n] = udg[u + i] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">totalNQueens</span><span class="params">(<span class="type">int</span> _n)</span> </span>&#123;</span><br><span class="line">        n = _n;</span><br><span class="line">        col = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n);</span><br><span class="line">        dg = udg = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(<span class="number">2</span> * n);</span><br><span class="line">        path = <span class="built_in">vector</span>&lt;string&gt;(n, <span class="built_in">string</span>(n, <span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="53-最大子数组和"><a href="#53-最大子数组和" class="headerlink" title="53. 最大子数组和"></a>53. 最大子数组和</h1><p>dp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, last = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            last = nums[i] + <span class="built_in">max</span>(last, <span class="number">0</span>);</span><br><span class="line">            res = <span class="built_in">max</span>(res, last);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="54-螺旋矩阵"><a href="#54-螺旋矩阵" class="headerlink" title="54. 螺旋矩阵"></a>54. 螺旋矩阵</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">spiralOrder</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>(), m = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">st</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(m + <span class="number">1</span>, <span class="literal">false</span>));</span><br><span class="line">        <span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, x = <span class="number">0</span>, y = <span class="number">0</span>, d = <span class="number">0</span>; i &lt; n * m; i++) &#123;</span><br><span class="line">            st[x][y] = <span class="literal">true</span>;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(matrix[x][y]);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> a = x + dx[d], b = y + dy[d];</span><br><span class="line">            <span class="keyword">if</span> (a &lt; <span class="number">0</span> || a &gt;= n || b &lt; <span class="number">0</span> || b &gt;= m || st[a][b]) &#123;</span><br><span class="line">                d = (d + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">                a = x + dx[d], b = y + dy[d];</span><br><span class="line">            &#125;</span><br><span class="line">            x = a, y = b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="55-跳跃游戏"><a href="#55-跳跃游戏" class="headerlink" title="55. 跳跃游戏"></a>55. 跳跃游戏</h1><p>贪心</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canJump</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// i是当前的位置，j是能跳到最远的位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="comment">// 如果j &lt; i，说明从之前的点跳不到i</span></span><br><span class="line">            <span class="keyword">if</span> (j &lt; i) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 更新能跳到最远的点</span></span><br><span class="line">            j = <span class="built_in">max</span>(j, i + nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果全部遍历完了，说明可以跳到最后一个点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="56-合并区间"><a href="#56-合并区间" class="headerlink" title="56. 合并区间"></a>56. 合并区间</h1><p>对vector使用sort函数排序，自动就是按照第一个关键字排序，然后再是第二个。。。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">merge</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; a) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> l = a[<span class="number">0</span>][<span class="number">0</span>], r = a[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; a.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i][<span class="number">0</span>] &gt; r) &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(&#123;l, r&#125;);</span><br><span class="line">                l = a[i][<span class="number">0</span>], r = a[i][<span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r = <span class="built_in">max</span>(r, a[i][<span class="number">1</span>]);   </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; </span><br><span class="line">        ans.<span class="built_in">push_back</span>(&#123;l, r&#125;); </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="57-插入区间"><a href="#57-插入区间" class="headerlink" title="57. 插入区间"></a>57. 插入区间</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">insert</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; a, vector&lt;<span class="type">int</span>&gt;&amp; b) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 完全没交集的区间</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; a.<span class="built_in">size</span>() &amp;&amp; a[i][<span class="number">1</span>] &lt; b[<span class="number">0</span>]) ans.<span class="built_in">push_back</span>(a[i++]);</span><br><span class="line">        <span class="comment">// 有交集的区间合并</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; a.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="comment">// 定义左端点</span></span><br><span class="line">            b[<span class="number">0</span>] = <span class="built_in">min</span>(a[i][<span class="number">0</span>], b[<span class="number">0</span>]);</span><br><span class="line">            <span class="comment">// 更新右端点</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; a.<span class="built_in">size</span>() &amp;&amp; a[i][<span class="number">0</span>] &lt;= b[<span class="number">1</span>]) b[<span class="number">1</span>] = <span class="built_in">max</span>(b[<span class="number">1</span>], a[i++][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(b);</span><br><span class="line">        <span class="keyword">while</span> (i &lt; a.<span class="built_in">size</span>()) ans.<span class="built_in">push_back</span>(a[i++]);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="58-最后一个单词的长度"><a href="#58-最后一个单词的长度" class="headerlink" title="58. 最后一个单词的长度"></a>58. 最后一个单词的长度</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLastWord</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; s[i] == <span class="string">&#x27; &#x27;</span>) i--;</span><br><span class="line">        <span class="type">int</span> r = i;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; s[i] != <span class="string">&#x27; &#x27;</span>) i--;</span><br><span class="line">        <span class="keyword">return</span> r - i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="59-螺旋矩阵-II"><a href="#59-螺旋矩阵-II" class="headerlink" title="59. 螺旋矩阵 II"></a>59. 螺旋矩阵 II</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">generateMatrix</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">ans</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">        <span class="type">int</span> dx[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;, dy[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, x = <span class="number">0</span>, y = <span class="number">0</span>, d = <span class="number">0</span>; i &lt; n * n; i++) &#123;</span><br><span class="line">            ans[x][y] = i + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> a = x + dx[d], b = y + dy[d];</span><br><span class="line">            <span class="keyword">if</span> (a &lt; <span class="number">0</span> || a &gt;= n || b &lt; <span class="number">0</span> || b &gt;= n || ans[a][b]) &#123;</span><br><span class="line">                d = (d + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">                a = x + dx[d], b = y + dy[d];</span><br><span class="line">            &#125;</span><br><span class="line">            x = a, y = b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="60-排列序列"><a href="#60-排列序列" class="headerlink" title="60. 排列序列"></a>60. 排列序列</h1><p>模拟题</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">getPermutation</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 预处理阶乘</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">fact</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="comment">// 0的阶乘是1</span></span><br><span class="line">    fact[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> s = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        s *= i;</span><br><span class="line">        fact[i] = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">st</span><span class="params">(n)</span></span>;</span><br><span class="line">    string res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!st[j]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fact[n - i] &lt; k) k -= fact[n - i];</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    res += <span class="built_in">to_string</span>(j);</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">3</span>, k = <span class="number">3</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">getPermutation</span>(n, k) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="61-旋转链表"><a href="#61-旋转链表" class="headerlink" title="61. 旋转链表"></a>61. 旋转链表</h1><p>链表</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">rotateRight</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="keyword">if</span> (!head) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="comment">// 节点的个数</span></span><br><span class="line">        <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p = head; p; p = p-&gt;next) num++;</span><br><span class="line">        k = k % num;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1000</span>);</span><br><span class="line">        dummy-&gt;next = head;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">auto</span> p = dummy;</span><br><span class="line">        <span class="keyword">for</span> (; a &lt; num - k; p = p-&gt;next, a++);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> cur = dummy-&gt;next;</span><br><span class="line"></span><br><span class="line">        dummy-&gt;next = p-&gt;next;</span><br><span class="line">        p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        p = dummy;</span><br><span class="line">        a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; a &lt; k; a++, p = p-&gt;next);</span><br><span class="line"></span><br><span class="line">        p-&gt;next = cur;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="62-不同路径"><a href="#62-不同路径" class="headerlink" title="62. 不同路径"></a>62. 不同路径</h1><p>dp</p>
<p>某个点的方案数等于左边和上边的方案数之和</p>
<img src="https://typora1321.oss-cn-beijing.aliyuncs.com/LeedCode.assets/image-20220919152208538.png" alt="image-20220919152208538" style="zoom: 67%;" />

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">f</span> (m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span> (!i &amp;&amp; !j) f[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (i) f[i][j] += f[i - <span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">if</span> (j) f[i][j] += f[i][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">return</span> f[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">3</span>, k = <span class="number">7</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">uniquePaths</span>(n, k) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="63-不同路径-II"><a href="#63-不同路径-II" class="headerlink" title="63. 不同路径 II"></a>63. 不同路径 II</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; obstacleGrid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = obstacleGrid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = obstacleGrid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">f</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!i &amp;&amp; !j &amp;&amp; obstacleGrid[i][j] != <span class="number">1</span>) f[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i &amp;&amp; obstacleGrid[i][j] != <span class="number">1</span>) f[i][j] += f[i - <span class="number">1</span>][j];</span><br><span class="line">                    <span class="keyword">if</span> (j &amp;&amp; obstacleGrid[i][j] != <span class="number">1</span>) f[i][j] += f[i][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="64-最小路径和"><a href="#64-最小路径和" class="headerlink" title="64. 最小路径和"></a>64. 最小路径和</h1><p>dp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minPathSum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (!n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> m = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">f</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m, INT_MAX));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!i &amp;&amp; !j) f[i][j] = grid[i][j];</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i) f[i][j] = <span class="built_in">min</span>(f[i][j], f[i - <span class="number">1</span>][j] + grid[i][j]);</span><br><span class="line">                    <span class="keyword">if</span> (j) f[i][j] = <span class="built_in">min</span>(f[i][j], f[i][j - <span class="number">1</span>] + grid[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n - <span class="number">1</span>][m - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>





<h1 id="66-加一"><a href="#66-加一" class="headerlink" title="66. 加一"></a>66. 加一</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">plusOne</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; digits)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = digits.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        digits[n]++;</span><br><span class="line">        <span class="keyword">while</span> (n &gt;= <span class="number">0</span> &amp;&amp; digits[n] == <span class="number">10</span>) &#123;</span><br><span class="line">            digits[n] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (n - <span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">                digits[n - <span class="number">1</span>]++;</span><br><span class="line">            n--;</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; digits2;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">-1</span>) &#123;</span><br><span class="line">            digits2.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; digits.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                digits2.<span class="built_in">push_back</span>(digits[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> digits2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> digits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="67-二进制求和"><a href="#67-二进制求和" class="headerlink" title="67. 二进制求和"></a>67. 二进制求和</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">addBinary</span><span class="params">(string a, string b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.<span class="built_in">size</span>() &gt; b.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="built_in">addBinary</span>(b, a);</span><br><span class="line">    <span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">reverse</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> a_len = a.<span class="built_in">size</span>(), b_len = b.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    string c;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; a_len; i++, j++) &#123;</span><br><span class="line">        t = a[i] - <span class="string">&#x27;0&#x27;</span> + b[j] - <span class="string">&#x27;0&#x27;</span> + t;</span><br><span class="line">        <span class="keyword">if</span> (t &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            c += <span class="built_in">to_string</span>(t % <span class="number">2</span>);</span><br><span class="line">            t /= <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            c += <span class="built_in">to_string</span>(t);</span><br><span class="line">            t = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (; j &lt; b_len; j++) &#123;</span><br><span class="line">        t = t + b[j] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (t &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            c += <span class="built_in">to_string</span>(t % <span class="number">2</span>);</span><br><span class="line">            t /= <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            c += <span class="built_in">to_string</span>(t);</span><br><span class="line">            t = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t) c += <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="built_in">reverse</span>(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string a = <span class="string">&quot;100&quot;</span>, b = <span class="string">&quot;110010&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">addBinary</span>(a, b) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h1 id="69-x-的平方根"><a href="#69-x-的平方根" class="headerlink" title="69. x 的平方根"></a>69. x 的平方根</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> l = <span class="number">1</span>, r = x;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> m = (l + r &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (l - r &gt; <span class="number">1</span> || l - r &lt; <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m &lt;= x / m) l = m;</span><br><span class="line">            <span class="keyword">else</span> r = m;</span><br><span class="line">            m = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>LeedCode</category>
      </categories>
      <tags>
        <tag>LeedCode</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指offer</title>
    <url>/2022/03/27/%E5%89%91%E6%8C%87offer/</url>
    <content><![CDATA[<h1 id="数组中重复的数字"><a href="#数组中重复的数字" class="headerlink" title="数组中重复的数字"></a>数组中重复的数字</h1><p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">数组中重复的数字</a></p>
<p><strong>原地哈希做法：时间复杂度：<em>O(n)<em>，空间复杂度：</em>O(1)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findRepeatNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (nums[i] != i &amp;&amp; nums[nums[i]] != nums[i]) <span class="built_in">swap</span>(nums[nums[i]], nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != i &amp;&amp; nums[nums[i]] == nums[i]) <span class="keyword">return</span> nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><strong>哈希表做法：时间复杂度：<em>O(n)<em>，空间复杂度：</em>O(n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findRepeatNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hash;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            ++hash[nums[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hash[nums[i]] &gt; <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>关于原地哈希算法：时间复杂度：<em>O(n)<em>，空间复杂度：</em>O(1)</em></strong></p>
<p>原地哈希用来解决这样一种问题：需要一个使得数组尽量有序的方式，并且要求时间复杂度达到O(n)。</p>
<p>一个长度为n的数组，所有的数都不相同，且数据的范围为[1,n]，如何在O(n)的时间复杂度内完成排序。</p>
<p><strong>原地哈希原理:</strong></p>
<p>实际上，我们在做一般排序的时候，是基于数字具体值的大小来决定顺序的，也就是说，数字具体值决定了数字应该去的位置。长度为n个数组，所有的数均不相同，不妨我们就让num[i]去到索引为num[i]的位置。实际上，num[i]就应该去索引为num[i]的位置上。</p>
<p>上述思路每一个位置上的置换都可以至少让一个数成功归位，因此复杂度为O(n)。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原地哈希</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)</span><br><span class="line">        <span class="keyword">while</span> (nums[i] - <span class="number">1</span> != i)</span><br><span class="line">            <span class="built_in">swap</span>(nums[i], nums[nums[i] - <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : nums) cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="缺失的第一个正数"><a href="#缺失的第一个正数" class="headerlink" title="缺失的第一个正数"></a>缺失的第一个正数</h1><p><a href="https://leetcode-cn.com/problems/first-missing-positive/">缺失的第一个正数</a></p>
<p><strong>暴力做法：</strong></p>
<p><strong>时间复杂度：<em>O(n * log<sub>2<sub>n)</em></strong></p>
<p>将数据进行排序，预设答案为ans &#x3D; 1(ans为没有枚举到的答案的最小可能值)，开始遍历整个数组，如果发生了 ans &#x3D;&#x3D; num[i]，则ans++(因为这个数字出现了，我们要看下一个数字有没有出现)。如果发生了num[i] &gt; ans的情况，由ans自增的逻辑我们可以知道，在数据保持相邻不变或者递增1的情况下，ans &gt;&#x3D; num[i]是必定成立的，如果num[i]&gt;ans，则一定是发生了跳跃，此时ans必为答案。如果能够循环到数组结束，那么答案就是ans。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstMissingPositive</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">1</span>, i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == ans) &#123;</span><br><span class="line">                ans++; </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] &gt; ans) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>原地哈希做法：</strong></p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">firstMissingPositive</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        nums.<span class="built_in">push_back</span>(<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">        	<span class="comment">// nums[i] &gt; 0 （数值小于1的数，对答案没有任何贡献，所以可以直接忽略）</span></span><br><span class="line">        	<span class="comment">// nums[i] &lt;= len 一个长度为 len 的数组，他所能够形成的答案的最大值为 len + 1</span></span><br><span class="line">        	<span class="comment">// nums[nums[i]] != nums[i] （如果数组中有重复的数，他们可能会形成闭合的死循环，此处避免无限交换）</span></span><br><span class="line">            <span class="keyword">while</span> (nums[i] != i &amp;&amp; nums[i] &gt; <span class="number">0</span> &amp;&amp; nums[i] &lt;= len &amp;&amp; nums[nums[i]]!=nums[i]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(nums[i], nums[nums[i]]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != i) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> len + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a>二维数组中的查找</h1><p><a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/">二维数组中的查找</a></p>
<p><strong>思路：</strong></p>
<p>从整个矩阵的右上角开始枚举，假设当前枚举的数是 x：<br>如果 x 等于 target，则说明我们找到了目标值，返回true；<br>如果 x 小于 target，则 x 左边的数一定都小于 target，我们可以直接排除当前一整行的数；<br>如果 x 大于 target，则 x 下边的数一定都大于 target，我们可以直接排序当前一整列的数。</p>
<p><strong>时间复杂度：<em>O(n + m)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">findNumberIn2DArray</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix.<span class="built_in">empty</span>() || matrix[<span class="number">0</span>].<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = matrix[<span class="number">0</span>].<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; matrix.<span class="built_in">size</span>() &amp;&amp; j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] == target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] &gt; target) j--;</span><br><span class="line">            <span class="keyword">else</span> i++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">findNumberIn2DArray</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix.<span class="built_in">empty</span>() || matrix[<span class="number">0</span>].<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = matrix[<span class="number">0</span>].<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; matrix.<span class="built_in">size</span>() &amp;&amp; j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix[i][j] == target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (matrix[i][j] &gt; target) j--;</span><br><span class="line">        <span class="keyword">else</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; matrix = &#123;</span><br><span class="line">        &#123;<span class="number">1</span>,   <span class="number">4</span>,  <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>,   <span class="number">5</span>,  <span class="number">8</span>, <span class="number">12</span>, <span class="number">19</span>&#125;,</span><br><span class="line">        &#123;<span class="number">3</span>,   <span class="number">6</span>,  <span class="number">9</span>, <span class="number">16</span>, <span class="number">22</span>&#125;,</span><br><span class="line">        &#123;<span class="number">10</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">24</span>&#125;,</span><br><span class="line">        &#123;<span class="number">18</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">30</span>&#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> targe = <span class="number">20</span>;</span><br><span class="line">    <span class="type">bool</span> have = <span class="built_in">findNumberIn2DArray</span>(matrix, targe);</span><br><span class="line">    cout &lt;&lt; have &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h1><p><a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/">替换空格</a></p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">replaceSpace</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string str;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27; &#x27;</span>) str += <span class="string">&quot;%20&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> str += s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">replaceSpace</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    string str;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27; &#x27;</span>) str += <span class="string">&quot;%20&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> str += s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">replaceSpace</span>(<span class="string">&quot;&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="从尾到头打印链表"><a href="#从尾到头打印链表" class="headerlink" title="从尾到头打印链表"></a>从尾到头打印链表</h1><p><a href="https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">从尾到头打印链表</a></p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">reversePrint</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = head; i; i = i-&gt;next) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(i-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体定义链表</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 翻转链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">reversePrint</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = head; i; i = i-&gt;next) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(i-&gt;val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="comment">// 循环构造链表</span></span><br><span class="line">    ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">auto</span> cur = dummy;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n, n != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">auto</span> p = <span class="keyword">new</span> <span class="built_in">ListNode</span>(n);</span><br><span class="line">        cur-&gt;next = p;</span><br><span class="line">        cur = p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环输出原链表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = dummy-&gt;next; i; i = i-&gt;next) &#123;</span><br><span class="line">        cout &lt;&lt; i-&gt;val &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">    Solution solution;</span><br><span class="line">    ans = solution.<span class="built_in">reversePrint</span>(dummy-&gt;next);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : ans) &#123;</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h1><p><a href="https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/">重建二叉树</a></p>
<p><strong>思路：</strong></p>
<ol>
<li>先利用前序遍历找根节点 k ：前序遍历的第一个数，就是根节点的值；</li>
<li>在中序遍历中找到根节点的位置 k，则 k 左边是左子树的中序遍历，右边是右子树的中序遍历；</li>
<li>假设左子树的中序遍历的长度是 l，则在前序遍历中，根节点后面的 l 个数，是左子树的前序遍历，剩下的数是右子树的前序遍历；</li>
<li>有了左右子树的前序遍历和中序遍历，我们可以先递归创建出左右子树，然后再创建根节点；</li>
</ol>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 采用哈希表记录中序遍历各个节点的位置，方便查询，因为哈希表查询是O(1)的</span></span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hash;</span><br><span class="line">    <span class="comment">// 定义全局变量，方便多函数使用</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; preorder, inorder;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; _preorder, vector&lt;<span class="type">int</span>&gt;&amp; _inorder)</span> </span>&#123;</span><br><span class="line">        preorder = _preorder, inorder = _inorder;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; inorder.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">             hash[inorder[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// dfs(前序遍历开头，结尾，中序遍历开头，结尾)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(<span class="number">0</span>, preorder.<span class="built_in">size</span>() - <span class="number">1</span>, <span class="number">0</span>, inorder.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">dfs</span><span class="params">(<span class="type">int</span> pl, <span class="type">int</span> pr, <span class="type">int</span> il, <span class="type">int</span> ir)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果左边大于右边了，说明到叶子节点了</span></span><br><span class="line">        <span class="keyword">if</span> (pl &gt; pr) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="comment">// 根节点就是前序遍历的第一个点</span></span><br><span class="line">        <span class="keyword">auto</span> root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(preorder[pl]);</span><br><span class="line">        <span class="comment">// 根节点在中序遍历中的位置</span></span><br><span class="line">        <span class="type">int</span> k = hash[preorder[pl]];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归前序遍历和中序遍历得到左右子树的根节点</span></span><br><span class="line">        <span class="keyword">auto</span> left = <span class="built_in">dfs</span>(pl + <span class="number">1</span>, pl + k - il, il, k - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">auto</span> right = <span class="built_in">dfs</span>(pl + k - il + <span class="number">1</span>, pr, k + <span class="number">1</span>, ir);</span><br><span class="line"></span><br><span class="line">        root-&gt;left = left;</span><br><span class="line">        root-&gt;right = right;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="二叉树的下一个节点"><a href="#二叉树的下一个节点" class="headerlink" title="二叉树的下一个节点"></a>二叉树的下一个节点</h1><p><a href="https://www.acwing.com/activity/content/problem/content/214/">二叉树的下一个节点</a></p>
<p><strong>思路：</strong></p>
<ol>
<li>如果给的点有右儿子，那就是右子树最左边的那个点</li>
<li>如果给的点没有右儿子，那就看他有没有父节点，如果这个点有父节点，并且他是父节点的左儿子，那这个点的后继就是他的父节点</li>
<li>如果给的点没有右儿子，并且他是父节点的右儿子，那就要顺着父节点一直往上找，一直到这个点是父节点的左儿子，那后继就是这个父节点</li>
<li>如果根据3，找不到，就说明这个点没有后继</li>
</ol>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode *father;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL), father(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">inorderSuccessor</span><span class="params">(TreeNode* p)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果给的点有右儿子，那就是右子树最左边的那个点</span></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;right) &#123;</span><br><span class="line">            p = p-&gt;right;</span><br><span class="line">            <span class="keyword">while</span> (p-&gt;left) &#123;</span><br><span class="line">                p = p-&gt;left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果给的点没有右儿子，那就看他有没有父节点，如果这个点有父节点，并且他是父节点的左儿子，那这个点的后继就是他的父节点</span></span><br><span class="line">        <span class="comment">// 如果给的点没有右儿子，并且他是父节点的右儿子，那就要顺着父节点一直往上找，一直到这个点是父节点的左儿子，那后继就是这个父节点</span></span><br><span class="line">        <span class="keyword">while</span> (p-&gt;father &amp;&amp; p-&gt;father-&gt;right == p) &#123;</span><br><span class="line">            p = p-&gt;father;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (p-&gt;father &amp;&amp; p-&gt;father-&gt;left == p) &#123;</span><br><span class="line">            <span class="keyword">return</span> p-&gt;father;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 如果还找不到，就说明这个点没有后继</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>核心代码（简化版）：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode *father;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL), father(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">inorderSuccessor</span><span class="params">(TreeNode* p)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (p-&gt;right) &#123;</span><br><span class="line">             p = p-&gt;right;</span><br><span class="line">             <span class="keyword">while</span> (p-&gt;left) p = p-&gt;left;</span><br><span class="line">             <span class="keyword">return</span> p;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">while</span> (p-&gt;father &amp;&amp; p == p-&gt;father-&gt;right) p = p-&gt;father;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> p-&gt;father;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h1><p><a href="https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/">用两个栈实现队列</a></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CQueue</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stk, cache;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CQueue</span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">appendTail</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        stk.<span class="built_in">push</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">deleteHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stk.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (stk.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> i = stk.<span class="built_in">top</span>();</span><br><span class="line">            cache.<span class="built_in">push</span>(i);</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> k = cache.<span class="built_in">top</span>();</span><br><span class="line">        cache.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">while</span> (cache.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> i = cache.<span class="built_in">top</span>();</span><br><span class="line">            stk.<span class="built_in">push</span>(i);</span><br><span class="line">            cache.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your CQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * CQueue* obj = new CQueue();</span></span><br><span class="line"><span class="comment"> * obj-&gt;appendTail(value);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj-&gt;deleteHead();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h1><p><a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/">斐波那契数列</a></p>
<p><strong>思路：</strong></p>
<p>模拟一遍即可</p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> a = <span class="number">0</span>, b = <span class="number">1</span>, c;</span><br><span class="line">        <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">            c = a % <span class="number">1000000007</span> + b % <span class="number">1000000007</span>;</span><br><span class="line">            a = b;</span><br><span class="line">            b = c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a % <span class="number">1000000007</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> a = <span class="number">0</span>, b = <span class="number">1</span>, c;</span><br><span class="line">        <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">            c = a % <span class="number">1000000007</span> + b % <span class="number">1000000007</span>;</span><br><span class="line">            a = b;</span><br><span class="line">            b = c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a % <span class="number">1000000007</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Solution solution;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cout &lt;&lt; solution.<span class="built_in">fib</span>(n) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="青蛙跳台阶问题"><a href="#青蛙跳台阶问题" class="headerlink" title="青蛙跳台阶问题"></a>青蛙跳台阶问题</h1><p><a href="https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/">青蛙跳台阶问题</a></p>
<p><strong>思路：dp思想</strong></p>
<p>设跳上 n 级台阶有 f(n) 种跳法。在所有跳法中，青蛙的最后一步只有两种情况： 跳上 1 级或 2 级台阶。</p>
<ol>
<li>当为 1 级台阶： 此情况共有 f(n−1) 种跳法；</li>
<li>当为 2 级台阶： 此情况共有 f(n−2) 种跳法。</li>
</ol>
<p>f(n) 为以上两种情况之和，即 f(n) &#x3D; f(n - 1) + f(n - 2) ，以上递推性质为斐波那契数列。本题可转化为求斐波那契数列第 n 项的值 。<br>青蛙跳台阶问题： f(0)&#x3D;1, f(1)&#x3D;1 , f(2)&#x3D;2；<br>斐波那契数列问题： f(0)&#x3D;0, f(1)&#x3D;1, f(2)&#x3D;1。</p>
<p><strong>核心代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numWays</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> a = <span class="number">1</span>, b = <span class="number">1</span>, c;</span><br><span class="line">        <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">            c = a % <span class="number">1000000007</span> + b % <span class="number">1000000007</span>;</span><br><span class="line">            a = b;</span><br><span class="line">            b = c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a % <span class="number">1000000007</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="旋转数组的最小数字"><a href="#旋转数组的最小数字" class="headerlink" title="旋转数组的最小数字"></a>旋转数组的最小数字</h1><p><a href="https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/">旋转数组的最小数字</a></p>
<p><strong>二分做法：<em>O(log<sub>2</sub>n)</em></strong></p>
<ol>
<li><p>去掉最后面的一段<br><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E5%89%91%E6%8C%87offer.assets/Snipaste_2022-03-27_09-39-20.png" alt="在这里插入图片描述"></p>
</li>
<li><p>如果是单调的，那么直接返回第一个数即可</p>
</li>
<li><p>通过二分查找排在最前面的比nums[0]小的数，就是最小值</p>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; numbers)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = numbers.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span> &amp;&amp; numbers[n] == numbers[<span class="number">0</span>]) n--;</span><br><span class="line">        <span class="keyword">if</span> (numbers[n] &gt;= numbers[<span class="number">0</span>]) <span class="keyword">return</span> numbers[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (numbers[mid] &gt;= numbers[<span class="number">0</span>]) l = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numbers[l];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>暴力做法：时间复杂度：<em>O(n)</em></strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> minv = numbers[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; numbers.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            minv = <span class="built_in">min</span>(minv, numbers[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="矩阵中的路径"><a href="#矩阵中的路径" class="headerlink" title="矩阵中的路径"></a>矩阵中的路径</h1><p><a href="https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/">矩阵中的路径</a></p>
<p><strong>时间复杂度：<em>O(3<sup>n</sup>)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">exist</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board, string word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; board.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; board[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="comment">// 其中的0是已经有0个字母合法，当合法字母数量与word字符数量相同时，就可以返回true了</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">dfs</span>(board, <span class="number">0</span>, i, j, word)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt; &gt; &amp;board, <span class="type">int</span> u, <span class="type">int</span> i, <span class="type">int</span> j, string &amp;word)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 指定边界条件</span></span><br><span class="line">        <span class="keyword">if</span> (board[i][j] != word[u]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 这里一定要记得-1，因为u是从0开始的，笔者之前忘记-1了，调试过后才发现是这里错了</span></span><br><span class="line">        <span class="keyword">if</span> (u == word.<span class="built_in">size</span>() - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按照上，右，下，左枚举</span></span><br><span class="line">        <span class="type">int</span> dx[] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将走过的路径保存下来，并且置为&#x27;*&#x27;，避免走回头路</span></span><br><span class="line">        <span class="type">char</span> t = board[i][j];</span><br><span class="line">        board[i][j] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 枚举四个方向</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">            <span class="type">int</span> a = i + dx[k], b = j + dy[k];</span><br><span class="line">            <span class="keyword">if</span> (a &gt;= <span class="number">0</span> &amp;&amp; a &lt; board.<span class="built_in">size</span>() &amp;&amp; b &gt;= <span class="number">0</span> &amp;&amp; b &lt; board[<span class="number">0</span>].<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">dfs</span>(board, u + <span class="number">1</span>, a, b, word)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        board[i][j] = t;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">exist</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board, string word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; board.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; board[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="comment">// 其中的0是已经有0个字母合法，当合法字母数量与word字符数量相同时，就可以返回true了</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">dfs</span>(board, <span class="number">0</span>, i, j, word)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt; &gt; &amp;board, <span class="type">int</span> u, <span class="type">int</span> i, <span class="type">int</span> j, string &amp;word)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 指定边界条件</span></span><br><span class="line">        <span class="keyword">if</span> (board[i][j] != word[u]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 这里一定要记得-1，因为u是从0开始的，笔者之前忘记-1了，调试过后才发现是这里错了</span></span><br><span class="line">        <span class="keyword">if</span> (u == word.<span class="built_in">size</span>() - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按照上，右，下，左枚举</span></span><br><span class="line">        <span class="type">int</span> dx[] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将走过的路径保存下来，并且置为&#x27;*&#x27;，避免走回头路</span></span><br><span class="line">        <span class="type">char</span> t = board[i][j];</span><br><span class="line">        board[i][j] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 枚举四个方向</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">            <span class="type">int</span> a = i + dx[k], b = j + dy[k];</span><br><span class="line">            <span class="keyword">if</span> (a &gt;= <span class="number">0</span> &amp;&amp; a &lt; board.<span class="built_in">size</span>() &amp;&amp; b &gt;= <span class="number">0</span> &amp;&amp; b &lt; board[<span class="number">0</span>].<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">dfs</span>(board, u + <span class="number">1</span>, a, b, word)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        board[i][j] = t;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Solution solution;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">char</span>&gt; &gt; board = &#123;</span><br><span class="line">            &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;E&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;S&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;E&#x27;</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    string word = <span class="string">&quot;ABCCED&quot;</span>;</span><br><span class="line">    cout &lt;&lt; solution.<span class="built_in">exist</span>(board, word) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="机器人的运动范围"><a href="#机器人的运动范围" class="headerlink" title="机器人的运动范围"></a>机器人的运动范围</h1><p><a href="https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/">机器人的运动范围</a></p>
<p><strong>解法选择：</strong></p>
<p>此类问题可以用深度优先遍历和宽度优先遍历，但是当数据范围比较大的时候，可能会栈溢出，所以这里使用宽度优先遍历解答</p>
<p><strong>时间复杂度：O(n * m)</strong></p>
<p>bfs时间复杂度就是所有的格子遍历一遍，也就是n * m，根据数据范围可知，最多是2500个格子</p>
<p><strong>注意：剑指offer系列和LeetCode特色就是有一些特判的边界</strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 计算一个数的各个位之和</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_single_sum</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x) &#123;</span><br><span class="line">            res += x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算一个坐标的各个位之和</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_sum</span><span class="params">(pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">get_single_sum</span>(t.first) + <span class="built_in">get_single_sum</span>(t.second);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">movingCount</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断一下边界条件</span></span><br><span class="line">        <span class="keyword">if</span> (!m || !n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 定义一个二维数组st，用来储存已经走过的位置</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">st</span>(m, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">false</span>));</span><br><span class="line">        <span class="comment">// 用来存放遍历到的每一个坐标，所以用pair类型的队列</span></span><br><span class="line">        queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 首先给队列里面放入初始位置的坐标</span></span><br><span class="line">        q.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果对头元素没有走过，并且各个位之和也符合要求的话才能++，否则continue</span></span><br><span class="line">            <span class="keyword">if</span> (st[t.first][t.second] || <span class="built_in">get_sum</span>(t) &gt; k) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res++;</span><br><span class="line"></span><br><span class="line">            st[t.first][t.second] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                <span class="type">int</span> x = t.first + dx[i], y = t.second + dy[i];</span><br><span class="line">                <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; m &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; n) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;x, y&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 计算一个数的各个位之和</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_single_sum</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x) &#123;</span><br><span class="line">            res += x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算一个坐标的各个位之和</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_sum</span><span class="params">(pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">get_single_sum</span>(t.first) + <span class="built_in">get_single_sum</span>(t.second);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">movingCount</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断一下边界条件</span></span><br><span class="line">        <span class="keyword">if</span> (!m || !n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 定义一个二维数组st，用来储存已经走过的位置</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">st</span>(m, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">false</span>));</span><br><span class="line">        <span class="comment">// 用来存放遍历到的每一个坐标，所以用pair类型的队列</span></span><br><span class="line">        queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 首先给队列里面放入初始位置的坐标</span></span><br><span class="line">        q.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果对头元素没有走过，并且各个位之和也符合要求的话才能++，否则continue</span></span><br><span class="line">            <span class="keyword">if</span> (st[t.first][t.second] || <span class="built_in">get_sum</span>(t) &gt; k) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res++;</span><br><span class="line"></span><br><span class="line">            st[t.first][t.second] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                <span class="type">int</span> x = t.first + dx[i], y = t.second + dy[i];</span><br><span class="line">                <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; m &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; n) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;x, y&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Solution solution;</span><br><span class="line">    <span class="type">int</span> m, n, k;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    cout &lt;&lt; solution.<span class="built_in">movingCount</span>(m, n, k) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="剪绳子"><a href="#剪绳子" class="headerlink" title="剪绳子"></a>剪绳子</h1><p><a href="https://leetcode-cn.com/problems/jian-sheng-zi-lcof/">剪绳子</a></p>
<p><strong>思路：</strong></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E5%89%91%E6%8C%87offer.assets/Snipaste_2022-03-27_09-40-28.png" alt="在这里插入图片描述"></p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>核心代码（可以先看最后会不会余下4或者2）：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">cuttingRope</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) <span class="keyword">return</span> <span class="number">1</span> * (n - <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">1</span>) res = <span class="number">4</span>, n -= <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">2</span>) res = <span class="number">2</span>, n -= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (n) res *= <span class="number">3</span>, n -= <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>核心代码（也可以先把3减掉，看剩下的是多少）：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">cuttingRope</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">3</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt;= <span class="number">7</span>) &#123;</span><br><span class="line">        res *= <span class="number">3</span>;</span><br><span class="line">        n -= <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">6</span>) res *= <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">5</span>) res *= <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">4</span>) res *= <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cuttingRope</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">3</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt;= <span class="number">7</span>) &#123;</span><br><span class="line">        res *= <span class="number">3</span>;</span><br><span class="line">        n -= <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">6</span>) res *= <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">5</span>) res *= <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">4</span>) res *= <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">cuttingRope</span>(n) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="剪绳子-II"><a href="#剪绳子-II" class="headerlink" title="剪绳子 II"></a>剪绳子 II</h1><p><a href="https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof/">剪绳子 II</a></p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>思路一：</strong></p>
<p>res用long long</p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">cuttingRope</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) <span class="keyword">return</span> <span class="number">1</span> * (n - <span class="number">1</span>);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">1</span>) res = <span class="number">4</span>, n -= <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">2</span>) res = <span class="number">2</span>, n -= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (n) res *= <span class="number">3</span>, n -= <span class="number">3</span>, res %= <span class="number">1000000007</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>思路二：</strong></p>
<p>res仅用int，把res * 3可能溢出int，那就res 加3次，用加法代替乘法即可</p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">cuttingRope</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) <span class="keyword">return</span> <span class="number">1</span> * (n - <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">1</span>) res = <span class="number">4</span>, n -= <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">2</span>) res = <span class="number">2</span>, n -= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">    	<span class="comment">// 加法代替乘法</span></span><br><span class="line">        <span class="type">int</span> temp = res;</span><br><span class="line">        res *= <span class="number">2</span>;</span><br><span class="line">        res %= <span class="number">1000000007</span>;</span><br><span class="line">        res += temp;</span><br><span class="line">        res %= <span class="number">1000000007</span>;</span><br><span class="line">        n -= <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="二进制中1的个数"><a href="#二进制中1的个数" class="headerlink" title="二进制中1的个数"></a>二进制中1的个数</h1><p><a href="https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/">二进制中1的个数</a></p>
<p><strong>思路：</strong></p>
<p>n &amp; 1 看最后一位是否是1，n &gt;&gt;&#x3D; 1 去掉最后一位</p>
<p><strong>时间复杂度：<em>O(log<sub>2</sub>n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="type">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n &amp; <span class="number">1</span>) res++;</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="type">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n &amp; <span class="number">1</span>) res++;</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Solution solution;</span><br><span class="line">    <span class="type">uint32_t</span> n = <span class="number">-3</span>;</span><br><span class="line">    cout &lt;&lt; solution.<span class="built_in">hammingWeight</span>(n) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="数值的整数次方"><a href="#数值的整数次方" class="headerlink" title="数值的整数次方"></a>数值的整数次方</h1><p><a href="https://leetcode-cn.com/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/">数值的整数次方</a></p>
<p><strong>思路：</strong></p>
<p>快速幂，将幂次变成二进制幂次即可</p>
<p><strong>时间复杂度：<em>O(log<sub>2</sub>n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> n2 = <span class="built_in">abs</span>((<span class="type">long</span> <span class="type">long</span>)n);</span><br><span class="line">        <span class="type">double</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n2 &amp; <span class="number">1</span>) res *= x;</span><br><span class="line">            n2 &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            x = x * x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>) res = <span class="number">1</span> / res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> n2 = <span class="built_in">abs</span>((<span class="type">long</span> <span class="type">long</span>)n);</span><br><span class="line">        <span class="type">double</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n2 &amp; <span class="number">1</span>) res *= x;</span><br><span class="line">            n2 &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            x = x * x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>) res = <span class="number">1</span> / res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Solution solution;</span><br><span class="line">    <span class="type">double</span> x;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; x &gt;&gt; n;</span><br><span class="line">    cout &lt;&lt; solution.<span class="built_in">myPow</span>(x, n) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="打印从1到最大的n位数"><a href="#打印从1到最大的n位数" class="headerlink" title="打印从1到最大的n位数"></a>打印从1到最大的n位数</h1><p><a href="https://leetcode-cn.com/problems/da-yin-cong-1dao-zui-da-de-nwei-shu-lcof/">打印从1到最大的n位数</a></p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">printNumbers</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="type">int</span> k = <span class="built_in">pow</span>(<span class="number">10</span>, n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; k; i++) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="删除链表的节点"><a href="#删除链表的节点" class="headerlink" title="删除链表的节点"></a>删除链表的节点</h1><p><a href="https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof/">删除链表的节点</a></p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>方法一：</strong></p>
<p>由于是单链表，我们不能找到前驱节点，所以我们不能按常规方法将该节点删除。我们可以换一种思路，将下一个节点的值复制到当前节点，然后将下一个节点删除即可。</p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteNode</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        dummy-&gt;next = head;</span><br><span class="line">        <span class="keyword">auto</span> i = head;</span><br><span class="line">        <span class="keyword">for</span> (; i; i = i-&gt;next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i-&gt;val == val) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果i是最后一个点，那就重新遍历，删除最后一个点</span></span><br><span class="line">        <span class="keyword">if</span> (!i-&gt;next) &#123;</span><br><span class="line">            i = dummy-&gt;next;</span><br><span class="line">            <span class="keyword">for</span> (; i-&gt;next &amp;&amp; i-&gt;next-&gt;next; i = i-&gt;next);</span><br><span class="line">            i-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 否则将下一个节点的值复制到当前节点，然后将下一个节点删除即可</span></span><br><span class="line">        i-&gt;val = i-&gt;next-&gt;val;</span><br><span class="line">        i-&gt;next = i-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给出链表规则</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteNode</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        dummy-&gt;next = head;</span><br><span class="line">        <span class="keyword">auto</span> i = head;</span><br><span class="line">        <span class="keyword">for</span> (; i; i = i-&gt;next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i-&gt;val == val) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果i是最后一个点，那就重新遍历，删除最后一个点</span></span><br><span class="line">        <span class="keyword">if</span> (!i-&gt;next) &#123;</span><br><span class="line">            i = dummy-&gt;next;</span><br><span class="line">            <span class="keyword">for</span> (; i-&gt;next &amp;&amp; i-&gt;next-&gt;next; i = i-&gt;next);</span><br><span class="line">            i-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 否则将下一个节点的值复制到当前节点，然后将下一个节点删除即可</span></span><br><span class="line">        i-&gt;val = i-&gt;next-&gt;val;</span><br><span class="line">        i-&gt;next = i-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Solution solution;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里是自己构造一个链表，用来测试样例</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">auto</span> dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">auto</span> p = dummy;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n, n != <span class="number">-1</span>) &#123;</span><br><span class="line">        p-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(n);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;原链表：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = dummy-&gt;next; i; i = i-&gt;next) &#123;</span><br><span class="line">        cout &lt;&lt; i-&gt;val &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;输入要删除的节点：&quot;</span>;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    cin &gt;&gt; val;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;删除节点后的链表：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">auto</span> head = solution.<span class="built_in">deleteNode</span>(dummy-&gt;next, val);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = head; i; i = i-&gt;next) &#123;</span><br><span class="line">        cout &lt;&lt; i-&gt;val &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>方法二：</strong></p>
<p>找到那个要删除的节点，把这个节点后面的节点的值全部前移，然后把最后一个点删掉</p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteNode</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        dummy-&gt;next = head;</span><br><span class="line">        <span class="keyword">auto</span> i = head;</span><br><span class="line">        <span class="keyword">for</span> (; i; i = i-&gt;next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i-&gt;val == val) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!i-&gt;next) &#123;</span><br><span class="line">            i = dummy-&gt;next;</span><br><span class="line">            <span class="keyword">for</span> (; i-&gt;next-&gt;next; i = i-&gt;next);</span><br><span class="line">            i-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i; i-&gt;next-&gt;next; i = i-&gt;next) &#123;</span><br><span class="line">            i-&gt;val = i-&gt;next-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        i-&gt;val = i-&gt;next-&gt;val;</span><br><span class="line">        i-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>方法三：</strong></p>
<p>记录要删除的点是第几个点，然后再重新遍历一遍，把他删掉</p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteNode</span><span class="params">(ListNode* head, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        dummy-&gt;next = head;</span><br><span class="line">        <span class="keyword">auto</span> i = head;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i; i = i-&gt;next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i-&gt;val == val) <span class="keyword">break</span>;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        i = dummy;</span><br><span class="line">        <span class="keyword">while</span> (res--) &#123;</span><br><span class="line">            i = i-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        i-&gt;next = i-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="在O-1-时间删除链表结点"><a href="#在O-1-时间删除链表结点" class="headerlink" title="在O(1)时间删除链表结点"></a>在O(1)时间删除链表结点</h1><p><a href="https://www.acwing.com/problem/content/description/85/">在O(1)时间删除链表结点</a></p>
<p><strong>思路：</strong></p>
<p>由于是单链表，我们不能找到前驱节点，所以我们不能按常规方法将该节点删除。</p>
<p>我们可以换一种思路，将下一个节点的值复制到当前节点，然后将下一个节点删除即可。</p>
<p>只有常数次操作，所以时间复杂度是 O(1)O(1)。</p>
<p><strong>时间复杂度：<em>O(1)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deleteNode</span><span class="params">(ListNode* node)</span> </span>&#123;</span><br><span class="line">        node-&gt;val = node-&gt;next-&gt;val;</span><br><span class="line">        node-&gt;next = node-&gt;next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="删除链表中重复的节点"><a href="#删除链表中重复的节点" class="headerlink" title="删除链表中重复的节点"></a>删除链表中重复的节点</h1><p><a href="https://www.acwing.com/problem/content/27/">删除链表中重复的节点</a></p>
<p><strong>方法一：</strong></p>
<p>双指针算法：从前往后扫描整个链表，每次扫描元素相同的一段，如果这段中的元素个数多于1个，则将整段元素直接删除。</p>
<ol>
<li>p是上一个区间里面的最后一个节点</li>
<li>q是下一个区间里面的第一个节点<br><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E5%89%91%E6%8C%87offer.assets/Snipaste_2022-03-27_09-41-26.png" alt="在这里插入图片描述"></li>
<li>如果 <code>p-&gt;next-&gt;next != q</code> ， 如上图所示，那么就要删除这一整段，即 <code>p-&gt;next = q</code> ，如下图所示<br><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E5%89%91%E6%8C%87offer.assets/Snipaste_2022-03-27_09-41-49.png" alt="在这里插入图片描述"></li>
<li>如果下个区间里面只有 <code>p-&gt;next</code> 这一个元素，那么这个点满足要求，那么p移动到下个点也就是 <code>p-&gt;next</code> ，<code>if (p-&gt;next-&gt;next == q) p = p-&gt;next;</code>  ，如下两图所示<br><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E5%89%91%E6%8C%87offer.assets/Snipaste_2022-03-27_09-42-13.png" alt="在这里插入图片描述"></li>
</ol>
<p><strong>时间复杂度：<em>O(n)<em>，空间复杂度：</em>O(1)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplication</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        dummy-&gt;next = head;</span><br><span class="line">        <span class="comment">// p是上一个区间里面的最后一个节点</span></span><br><span class="line">        <span class="keyword">auto</span> p = dummy;</span><br><span class="line">        <span class="keyword">while</span> (p-&gt;next) &#123;</span><br><span class="line">            <span class="comment">// q是下一个区间里面的第一个节点</span></span><br><span class="line">            <span class="keyword">auto</span> q = p-&gt;next;</span><br><span class="line">            <span class="comment">// q一直往后，直到移动到下下个区间的第一个节点</span></span><br><span class="line">            <span class="keyword">while</span> (q &amp;&amp; p-&gt;next-&gt;val == q-&gt;val) q = q-&gt;next;</span><br><span class="line">            <span class="comment">// 如果下个区间里面只有一个元素，那么这个点满足要求，那么p移动到下个点，这个点是这个区间唯一的点，所以也是这个区间最后的一个点</span></span><br><span class="line">            <span class="keyword">if</span> (p-&gt;next-&gt;next == q) p = p-&gt;next;</span><br><span class="line">            <span class="comment">// 否则把下个区间整段删掉，p还是原区间最后一个节点</span></span><br><span class="line">            <span class="keyword">else</span> p-&gt;next = q;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>方法二：</strong></p>
<p>用哈希表，扫描一次链表，把只出现一次的数存起来。然后再扫描链表，将只出现一次的数筛选出来接上。</p>
<p><strong>时间复杂度：<em>O(n)<em>，空间复杂度：</em>O(n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hash;</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplication</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        dummy-&gt;next = head;</span><br><span class="line">        <span class="keyword">auto</span> p = dummy;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = head; i; i = i-&gt;next) &#123;</span><br><span class="line">            k++;</span><br><span class="line">            hash[i-&gt;val]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = head; i; i = i-&gt;next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hash[i-&gt;val] == <span class="number">1</span>) &#123;</span><br><span class="line">                p-&gt;next = i;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> s++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 去除末尾重复的数</span></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;next &amp;&amp; p-&gt;next-&gt;next &amp;&amp; p-&gt;next-&gt;val == p-&gt;next-&gt;next-&gt;val) p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">		<span class="comment">// 如果所有数全部重复，则直接接上NULL</span></span><br><span class="line">        <span class="keyword">if</span> (s == k) p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给出链表规则</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hash;</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplication</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        dummy-&gt;next = head;</span><br><span class="line">        <span class="keyword">auto</span> p = dummy;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = head; i; i = i-&gt;next) &#123;</span><br><span class="line">            k++;</span><br><span class="line">            hash[i-&gt;val]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = head; i; i = i-&gt;next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hash[i-&gt;val] == <span class="number">1</span>) &#123;</span><br><span class="line">                p-&gt;next = i;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> s++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;next &amp;&amp; p-&gt;next-&gt;next &amp;&amp; p-&gt;next-&gt;val == p-&gt;next-&gt;next-&gt;val) p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s == k) p-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Solution solution;</span><br><span class="line">    <span class="comment">// 这里是自己构造一个链表，用来测试样例</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">auto</span> dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">auto</span> p = dummy;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n, n != <span class="number">-1</span>) &#123;</span><br><span class="line">        p-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(n);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;原链表：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = dummy-&gt;next; i; i = i-&gt;next) &#123;</span><br><span class="line">        cout &lt;&lt; i-&gt;val &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;删除节点后的链表：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">auto</span> head = solution.<span class="built_in">deleteDuplication</span>(dummy-&gt;next);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = head; i; i = i-&gt;next) &#123;</span><br><span class="line">        cout &lt;&lt; i-&gt;val &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>方法三：</strong></p>
<p>利用有序哈希表存储出现的次数，将只出现一次的接在新的链表末尾。</p>
<p><strong>时间复杂度：<em>O(n)<em>，空间复杂度：</em>O(n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hash;</span><br><span class="line">    <span class="function">ListNode* <span class="title">deleteDuplication</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">auto</span> p = dummy;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = head; i; i = i-&gt;next) &#123;</span><br><span class="line">            hash[i-&gt;val]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : hash) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.second == <span class="number">1</span>) &#123;</span><br><span class="line">                p-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(x.first);</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a>正则表达式匹配</h1><p><a href="https://leetcode.cn/problems/zheng-ze-biao-da-shi-pi-pei-lcof/">正则表达式匹配</a></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">状态标识：f<span class="selector-attr">[i]</span><span class="selector-attr">[j]</span>  表示s<span class="selector-attr">[i, ...]</span>和<span class="selector-tag">p</span><span class="selector-attr">[j, ...]</span>相匹配</span><br><span class="line"></span><br><span class="line">状态转移：</span><br><span class="line"><span class="number">1</span>.如果<span class="selector-tag">p</span><span class="selector-attr">[j]</span>是正常字符，f<span class="selector-attr">[i]</span><span class="selector-attr">[j]</span>是否匹配就看s<span class="selector-attr">[i]</span> == <span class="selector-tag">p</span><span class="selector-attr">[j]</span> &amp;&amp; f<span class="selector-attr">[i + 1]</span><span class="selector-attr">[j + 1]</span>是否为true</span><br><span class="line"><span class="number">2</span>.如果<span class="selector-tag">p</span><span class="selector-attr">[j]</span>是<span class="string">&#x27;.&#x27;</span>，则f<span class="selector-attr">[i]</span><span class="selector-attr">[j]</span>就只用看f<span class="selector-attr">[i + 1]</span><span class="selector-attr">[j + 1]</span>是否匹配</span><br><span class="line"><span class="number">3</span>.如果<span class="selector-tag">p</span><span class="selector-attr">[j + 1]</span>是<span class="string">&#x27;*&#x27;</span></span><br><span class="line">	<span class="number">3.1</span>如果*表示<span class="number">0</span>次，则j位置和j + <span class="number">1</span>位置都无效，f<span class="selector-attr">[i]</span><span class="selector-attr">[j]</span> = f<span class="selector-attr">[i]</span><span class="selector-attr">[j + 2]</span></span><br><span class="line">	<span class="number">3.2</span>如果*表示其他次，则需要s<span class="selector-attr">[i]</span>可以和<span class="selector-tag">p</span><span class="selector-attr">[j]</span>匹配，且f<span class="selector-attr">[i+1]</span><span class="selector-attr">[j]</span>是真</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string s, p;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; f;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isMatch</span><span class="params">(string _s, string _p)</span> </span>&#123;</span><br><span class="line">        s = _s, p = _p;</span><br><span class="line">        n = s.<span class="built_in">size</span>(), m = p.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// 初始化f，将其都初始化为-1</span></span><br><span class="line">        f = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m + <span class="number">1</span>, <span class="number">-1</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dp</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 算过了就不用算了</span></span><br><span class="line">        <span class="keyword">if</span> (f[x][y] != <span class="number">-1</span>) <span class="keyword">return</span> f[x][y];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// y到末尾了,x也必须到末尾</span></span><br><span class="line">        <span class="keyword">if</span> (y == m) &#123;</span><br><span class="line">            <span class="keyword">return</span> f[x][y] = x == n;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 第一个字符匹配</span></span><br><span class="line">        <span class="type">bool</span> first_match = x &lt; n &amp;&amp; (s[x] == p[y] || p[y] == <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (y + <span class="number">1</span> &lt; m &amp;&amp; p[y + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">            f[x][y] = <span class="built_in">dp</span>(x, y + <span class="number">2</span>) || first_match &amp;&amp; <span class="built_in">dp</span>(x + <span class="number">1</span>, y);</span><br><span class="line">        &#125; <span class="keyword">else</span> f[x][y] = first_match &amp;&amp; <span class="built_in">dp</span>(x + <span class="number">1</span>, y + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> f[x][y];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="表示数值的字符串"><a href="#表示数值的字符串" class="headerlink" title="表示数值的字符串"></a>表示数值的字符串</h1><p><a href="https://leetcode-cn.com/problems/biao-shi-shu-zhi-de-zi-fu-chuan-lcof/">表示数值的字符串</a><br>很多情况需要排除，只能多做才能熟练</p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isNumber</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &gt;= <span class="number">0</span> &amp;&amp; s[k] == <span class="string">&#x27; &#x27;</span>) k--;</span><br><span class="line">        s = s.<span class="built_in">substr</span>(<span class="number">0</span>, k + <span class="number">1</span>); <span class="comment">// 除去后空格</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; s.<span class="built_in">size</span>() &amp;&amp; s[i] == <span class="string">&#x27; &#x27;</span>) i++; <span class="comment">// 除去前空格</span></span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;+&#x27;</span> || s[i] == <span class="string">&#x27;-&#x27;</span>) i++; <span class="comment">// 除去+, -</span></span><br><span class="line">        s = s.<span class="built_in">substr</span>(i);</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">empty</span>() || (s[<span class="number">0</span>] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; s.<span class="built_in">size</span>() == <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 除去+, -, +., -., .</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> dot = <span class="number">0</span>, e = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                dot++;</span><br><span class="line">                <span class="keyword">if</span> (dot &gt; <span class="number">1</span> || e) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果有两个小数点，或者e后面有小数点，则false</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;e&#x27;</span> || s[i] == <span class="string">&#x27;E&#x27;</span>) &#123;</span><br><span class="line">                e++;</span><br><span class="line">                <span class="keyword">if</span> (!i || i + <span class="number">1</span> == s.<span class="built_in">size</span>() || e &gt; <span class="number">1</span> || (s[i - <span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; i == <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (s[i + <span class="number">1</span>] == <span class="string">&#x27;+&#x27;</span> || s[i + <span class="number">1</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i + <span class="number">2</span> == s.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 1231e+</span></span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isNumber</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> k = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &gt;= <span class="number">0</span> &amp;&amp; s[k] == <span class="string">&#x27; &#x27;</span>) k--;</span><br><span class="line">    s = s.<span class="built_in">substr</span>(<span class="number">0</span>, k + <span class="number">1</span>);  <span class="comment">// 除去后空格</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; s.<span class="built_in">size</span>() &amp;&amp; s[i] == <span class="string">&#x27; &#x27;</span>) i++; <span class="comment">// 除去前空格</span></span><br><span class="line">    <span class="keyword">if</span> (s[i] == <span class="string">&#x27;+&#x27;</span> || s[i] == <span class="string">&#x27;-&#x27;</span>) i++; <span class="comment">// 除去+, -</span></span><br><span class="line">    s = s.<span class="built_in">substr</span>(i);</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">empty</span>() || (s[<span class="number">0</span>] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; s.<span class="built_in">size</span>() == <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 除去+, -, +., -., .</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> dot = <span class="number">0</span>, e = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">            dot++;</span><br><span class="line">            <span class="keyword">if</span> (dot &gt; <span class="number">1</span> || e) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果有两个小数点，或者e后面有小数点，则false</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;e&#x27;</span> || s[i] == <span class="string">&#x27;E&#x27;</span>) &#123;</span><br><span class="line">            e++;</span><br><span class="line">            <span class="keyword">if</span> (!i || i + <span class="number">1</span> == s.<span class="built_in">size</span>() || e &gt; <span class="number">1</span> || (s[i - <span class="number">1</span>] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; i == <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (s[i + <span class="number">1</span>] == <span class="string">&#x27;+&#x27;</span> || s[i + <span class="number">1</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">2</span> == s.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 1231e+</span></span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">isNumber</span>(s) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="调整数组顺序使奇数位于偶数前面"><a href="#调整数组顺序使奇数位于偶数前面" class="headerlink" title="调整数组顺序使奇数位于偶数前面"></a>调整数组顺序使奇数位于偶数前面</h1><p><a href="https://leetcode-cn.com/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/">调整数组顺序使奇数位于偶数前面</a></p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p>警惕数组越界即可，即应该先判断 l &lt;&#x3D; r, r &gt;&#x3D; l</p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">exchange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">while</span> (l &lt;= r &amp;&amp; nums[l] % <span class="number">2</span> == <span class="number">1</span>) l++;</span><br><span class="line">            <span class="keyword">while</span> (r &gt;= l &amp;&amp; nums[r] % <span class="number">2</span> == <span class="number">0</span>) r--;</span><br><span class="line">            <span class="keyword">if</span> (l &lt; r) <span class="built_in">swap</span>(nums[l], nums[r]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">exchange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">while</span> (l &lt;= r &amp;&amp; nums[l] % <span class="number">2</span> == <span class="number">1</span>) l++;</span><br><span class="line">            <span class="keyword">while</span> (r &gt;= l &amp;&amp; nums[r] % <span class="number">2</span> == <span class="number">0</span>) r--;</span><br><span class="line">            <span class="keyword">if</span> (l &lt; r) <span class="built_in">swap</span>(nums[l], nums[r]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Solution solution;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; n = solution.<span class="built_in">exchange</span>(nums);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : n) &#123;</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="链表中倒数第k个节点"><a href="#链表中倒数第k个节点" class="headerlink" title="链表中倒数第k个节点"></a>链表中倒数第k个节点</h1><p><a href="https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/">链表中倒数第k个节点</a></p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">getKthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = head; i; i = i-&gt;next) &#123;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">        n = n + <span class="number">1</span> - k;</span><br><span class="line">        <span class="keyword">auto</span> p = head;</span><br><span class="line">        <span class="keyword">while</span> (--n) &#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><p><a href="https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/">反转链表</a></p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>核心代码(迭代法)：</strong></p>
<p>头插法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* q = <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* pn;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p = head; p; p = pn) &#123;</span><br><span class="line">            pn = p-&gt;next;</span><br><span class="line">            p-&gt;next = q;</span><br><span class="line">            q = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给出链表规则</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode* q = <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* pn;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p = head; p; p = pn) &#123;</span><br><span class="line">            pn = p-&gt;next;</span><br><span class="line">            p-&gt;next = q;</span><br><span class="line">            q = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Solution solution;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里是自己构造一个链表，用来测试样例</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">auto</span> dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">auto</span> p = dummy;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n, n != <span class="number">-1</span>) &#123;</span><br><span class="line">        p-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(n);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;原链表：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = dummy-&gt;next; i; i = i-&gt;next) &#123;</span><br><span class="line">        cout &lt;&lt; i-&gt;val &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;翻转链表：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">auto</span> head = solution.<span class="built_in">reverseList</span>(dummy-&gt;next);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = head; i; i = i-&gt;next) &#123;</span><br><span class="line">        cout &lt;&lt; i-&gt;val &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>核心代码(递归法)：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果是空链表或者链表只有一个节点，则返回head</span></span><br><span class="line">        <span class="keyword">if</span> (!head || !head-&gt;next) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不需要关心后面的实现，只要看head即可</span></span><br><span class="line">        <span class="keyword">auto</span> tail = <span class="built_in">reverseList</span>(head-&gt;next);</span><br><span class="line">        </span><br><span class="line">        head-&gt;next-&gt;next = head;</span><br><span class="line">        head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> tail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="合并两个排序的链表"><a href="#合并两个排序的链表" class="headerlink" title="合并两个排序的链表"></a>合并两个排序的链表</h1><p><a href="https://leetcode-cn.com/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/">合并两个排序的链表</a></p>
<p><strong>思路：</strong></p>
<p>类似归并排序的算法</p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> l1p = l1, l2p = l2;</span><br><span class="line">        <span class="keyword">auto</span> dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">auto</span> cur = dummy;</span><br><span class="line">        <span class="keyword">while</span> (l1p &amp;&amp; l2p) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l1p-&gt;val &lt;= l2p-&gt;val) &#123;</span><br><span class="line">                cur-&gt;next = l1p;</span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">                l1p = l1p-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur-&gt;next = l2p;</span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">                l2p = l2p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l1p) &#123;</span><br><span class="line">            cur-&gt;next = l1p;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">            l1p = l1p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l2p) &#123;</span><br><span class="line">            cur-&gt;next = l2p;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">            l2p = l2p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="树的子结构"><a href="#树的子结构" class="headerlink" title="树的子结构"></a>树的子结构</h1><p><a href="https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof/">树的子结构</a></p>
<p><strong>时间复杂度：<em>O(nm)</em></strong></p>
<p>最坏情况下，我们对于树A中的每个节点都要递归判断一遍，每次判断在最坏情况下需要遍历完树B中的所有节点。<br>所以时间复杂度是 O(nm)，其中 n 是树A中的节点数， m 是树B中的节点数。</p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSubStructure</span><span class="params">(TreeNode* A, TreeNode* B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!A || !B) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isPart</span>(A, B)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">isSubStructure</span>(A-&gt;left, B) || <span class="built_in">isSubStructure</span>(A-&gt;right, B);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPart</span><span class="params">(TreeNode* A, TreeNode* B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!B) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (A &amp;&amp; A-&gt;val == B-&gt;val) <span class="keyword">return</span> <span class="built_in">isPart</span>(A-&gt;left, B-&gt;left) &amp;&amp; <span class="built_in">isPart</span>(A-&gt;right, B-&gt;right); </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="二叉树的镜像"><a href="#二叉树的镜像" class="headerlink" title="二叉树的镜像"></a>二叉树的镜像</h1><p><a href="https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/">二叉树的镜像</a></p>
<p><strong>思路：</strong></p>
<p>我们可以发现镜像后的树就是将原树的所有节点的左右儿子互换！<br>所以我们递归遍历原树的所有节点，将每个节点的左右儿子互换即可。</p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TreeNode* p;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">mirrorTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span> (!root-&gt;left &amp;&amp; !root-&gt;right) <span class="keyword">return</span> root;</span><br><span class="line">        p = root-&gt;left;</span><br><span class="line">        root-&gt;left = root-&gt;right;</span><br><span class="line">        root-&gt;right = p;</span><br><span class="line">        <span class="built_in">mirrorTree</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">mirrorTree</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="对称的二叉树"><a href="#对称的二叉树" class="headerlink" title="对称的二叉树"></a>对称的二叉树</h1><p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(root-&gt;left, root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(TreeNode* l, TreeNode* r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!l &amp;&amp; !r) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!l &amp;&amp; r || l &amp;&amp; !r) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (l-&gt;val == r-&gt;val) <span class="keyword">return</span> <span class="built_in">dfs</span>(l-&gt;left, r-&gt;right) &amp;&amp; <span class="built_in">dfs</span>(l-&gt;right, r-&gt;left);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="顺时针打印矩阵"><a href="#顺时针打印矩阵" class="headerlink" title="顺时针打印矩阵"></a>顺时针打印矩阵</h1><p><a href="https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/">顺时针打印矩阵</a></p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">spiralOrder</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (matrix.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> matrix[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> n = matrix.<span class="built_in">size</span>(), m = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">f</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m + <span class="number">1</span>));</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="type">int</span> di[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;, dj[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>; k &lt; n * m; k++) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(matrix[i][j]);</span><br><span class="line">            f[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> a = i + di[r], b = j + dj[r];</span><br><span class="line">            <span class="keyword">if</span> (a &gt;= <span class="number">0</span> &amp;&amp; a &lt; n &amp;&amp; b &gt;= <span class="number">0</span> &amp;&amp; b &lt; m &amp;&amp; f[a][b] == <span class="number">0</span>) &#123;</span><br><span class="line">                i = a, j = b;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r = (r + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">                i = i + di[r], j = j + dj[r];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="包含min函数的栈"><a href="#包含min函数的栈" class="headerlink" title="包含min函数的栈"></a>包含min函数的栈</h1><p><a href="https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof/">包含min函数的栈</a></p>
<p><strong>思路：</strong></p>
<p><strong>单调栈：</strong><br>我们除了维护基本的栈结构之外，还需要维护一个单调栈，来实现返回最小值的操作。<br>下面介绍如何维护单调栈：</p>
<ul>
<li>当我们向栈中压入一个数时，如果该数 ≤ 单调栈的栈顶元素，则将该数同时压入单调栈中；否则，不压入，这是由于栈具有先进后出性质，所以在该数被弹出之前，栈中一直存在一个数比该数小，所以该数一定不会被当做最小数输出。</li>
<li>当我们从栈中弹出一个数时，如果该数等于单调栈的栈顶元素，则同时将单调栈的栈顶元素弹出。</li>
<li>单调栈由于其具有单调性，所以它的栈顶元素，就是当前栈中的最小数。</li>
</ul>
<p><strong>时间复杂度：<em>O(1)</em></strong></p>
<p>四种操作都只有常数次入栈出栈操作，所以时间复杂度都是O(1)</p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MinStack</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; res, cache;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">MinStack</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            res.<span class="built_in">push</span>(x);</span><br><span class="line">            cache.<span class="built_in">push</span>(x);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="built_in">push</span>(x);</span><br><span class="line">        <span class="keyword">if</span> (cache.<span class="built_in">top</span>() &gt;= x) cache.<span class="built_in">push</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="built_in">top</span>() == cache.<span class="built_in">top</span>()) cache.<span class="built_in">pop</span>();</span><br><span class="line">        res.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cache.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack* obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj-&gt;push(x);</span></span><br><span class="line"><span class="comment"> * obj-&gt;pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj-&gt;min();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="栈的压入、弹出序列"><a href="#栈的压入、弹出序列" class="headerlink" title="栈的压入、弹出序列"></a>栈的压入、弹出序列</h1><p><a href="https://leetcode-cn.com/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/">栈的压入、弹出序列</a></p>
<p><strong>思路：</strong></p>
<p><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E5%89%91%E6%8C%87offer.assets/Snipaste_2022-03-27_09-43-21.png" alt="在这里插入图片描述"></p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">validateStackSequences</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; pushed, vector&lt;<span class="type">int</span>&gt;&amp; popped)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pushed.<span class="built_in">empty</span>() &amp;&amp; popped.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (pushed.<span class="built_in">size</span>() != popped.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : pushed) &#123;</span><br><span class="line">            stk.<span class="built_in">push</span>(x);</span><br><span class="line">            <span class="keyword">while</span> (stk.<span class="built_in">size</span>() &amp;&amp; stk.<span class="built_in">top</span>() == popped[i]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stk.<span class="built_in">empty</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>ACM模式代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">validateStackSequences</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; pushed, vector&lt;<span class="type">int</span>&gt;&amp; popped)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pushed.<span class="built_in">empty</span>() &amp;&amp; popped.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (pushed.<span class="built_in">size</span>() != popped.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x : pushed) &#123;</span><br><span class="line">        stk.<span class="built_in">push</span>(x);</span><br><span class="line">        <span class="keyword">while</span> (stk.<span class="built_in">size</span>() &amp;&amp; stk.<span class="built_in">top</span>() == popped[i]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stk.<span class="built_in">empty</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; pushed = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; popped = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">validateStackSequences</span>(pushed, popped) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="从上到下打印二叉树"><a href="#从上到下打印二叉树" class="headerlink" title="从上到下打印二叉树"></a>从上到下打印二叉树</h1><p><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/">从上到下打印二叉树</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">levelOrder</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> ans;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">            ans.<span class="built_in">push_back</span>(t-&gt;val);</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (t-&gt;left) q.<span class="built_in">push</span>(t-&gt;left);</span><br><span class="line">            <span class="keyword">if</span> (t-&gt;right) q.<span class="built_in">push</span>(t-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="从上到下打印二叉树-II"><a href="#从上到下打印二叉树-II" class="headerlink" title="从上到下打印二叉树 II"></a>从上到下打印二叉树 II</h1><p><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/">从上到下打印二叉树 II</a></p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p>每一层结束的时候，往queue里塞一个NULL做标记。</p>
<p>在queue里读取一个数出来之后，先看看是不是level标识符NULL(因为是BFS，当前level读完，下一个level有哪些要读的也都放在queue里了，可以在queue结尾给加一个新的NULL), 是的话再看看是不是整个树读完了(即queue里没有点了)。</p>
<p>时间复杂度分析：每个点遍历一次</p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> res;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="literal">NULL</span>);<span class="comment">// root层的标识符</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; level;</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!t) &#123;</span><br><span class="line">                <span class="keyword">if</span> (level.<span class="built_in">empty</span>()) <span class="keyword">break</span>;</span><br><span class="line">                res.<span class="built_in">push_back</span>(level);</span><br><span class="line">                level.<span class="built_in">clear</span>();</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="literal">NULL</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            level.<span class="built_in">push_back</span>(t-&gt;val);</span><br><span class="line">            <span class="keyword">if</span> (t-&gt;left) q.<span class="built_in">push</span>(t-&gt;left);</span><br><span class="line">            <span class="keyword">if</span> (t-&gt;right) q.<span class="built_in">push</span>(t-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="从上到下打印二叉树-III"><a href="#从上到下打印二叉树-III" class="headerlink" title="从上到下打印二叉树 III"></a>从上到下打印二叉树 III</h1><p><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/submissions/">从上到下打印二叉树 III</a></p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">levelOrder</span>(TreeNode* root) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> res;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="literal">NULL</span>);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; level;</span><br><span class="line">        <span class="comment">// 奇数行为false</span></span><br><span class="line">        <span class="type">bool</span> z = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!t) &#123;</span><br><span class="line">                <span class="keyword">if</span> (level.<span class="built_in">empty</span>()) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 偶数行翻转level</span></span><br><span class="line">                <span class="keyword">if</span> (z) <span class="built_in">reverse</span>(level.<span class="built_in">begin</span>(), level.<span class="built_in">end</span>());</span><br><span class="line">                res.<span class="built_in">push_back</span>(level);</span><br><span class="line">                level.<span class="built_in">clear</span>();</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 偶数行为true</span></span><br><span class="line">                z = !z;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            level.<span class="built_in">push_back</span>(t-&gt;val);</span><br><span class="line">            <span class="keyword">if</span> (t-&gt;left) q.<span class="built_in">push</span>(t-&gt;left);</span><br><span class="line">            <span class="keyword">if</span> (t-&gt;right) q.<span class="built_in">push</span>(t-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="二叉搜索树的后序遍历序列"><a href="#二叉搜索树的后序遍历序列" class="headerlink" title="二叉搜索树的后序遍历序列"></a>二叉搜索树的后序遍历序列</h1><p><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/">二叉搜索树的后序遍历序列</a></p>
<p><strong>思路：</strong></p>
<p><strong>合法样例:</strong><br>后序遍历二叉树，5为根节点，左子树的所有节点都比根节点小，右子树的所有点都比根节点大<br><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E5%89%91%E6%8C%87offer.assets/Snipaste_2022-03-27_09-43-48.png" alt="在这里插入图片描述"><br>递归左右子树<br><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E5%89%91%E6%8C%87offer.assets/Snipaste_2022-03-27_09-44-04.png" alt="在这里插入图片描述"><br><strong>不合法样例</strong><br>无法分成比10小和比10大的左右两边<br><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E5%89%91%E6%8C%87offer.assets/Snipaste_2022-03-27_09-44-17.png" alt="在这里插入图片描述"></p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; pos;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">verifyPostorder</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; postorder)</span> </span>&#123;</span><br><span class="line">        pos = postorder;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(<span class="number">0</span>, pos.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> root = pos[r];</span><br><span class="line">        <span class="type">int</span> k = l;</span><br><span class="line">        <span class="keyword">for</span> (; k &lt; r &amp;&amp; pos[k] &lt;= root; k++);</span><br><span class="line">        <span class="type">int</span> tempR = k - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; k &lt; r; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pos[k] &gt; root) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(l, tempR) &amp;&amp; <span class="built_in">dfs</span>(tempR + <span class="number">1</span>, r - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="二叉树中和为某一值的路径"><a href="#二叉树中和为某一值的路径" class="headerlink" title="二叉树中和为某一值的路径"></a>二叉树中和为某一值的路径</h1><p><a href="https://leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/">二叉树中和为某一值的路径</a></p>
<p><strong>思路：</strong></p>
<p>直接DFS走一遍即可</p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="type">int</span> tar;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">pathSum</span>(TreeNode* root, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> u = <span class="number">0</span>;</span><br><span class="line">        tar = target;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="built_in">dfs</span>(root, u, res);</span><br><span class="line">        <span class="keyword">return</span> ans;kj</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(TreeNode* &amp;root, <span class="type">int</span> u, vector&lt;<span class="type">int</span>&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line">        res.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">        u += root-&gt;val;</span><br><span class="line">        <span class="keyword">if</span> (u == tar &amp;&amp; !root-&gt;left &amp;&amp; !root-&gt;right) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(res);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(root-&gt;left, u, res);</span><br><span class="line">        <span class="built_in">dfs</span>(root-&gt;right, u, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="复杂链表的复制"><a href="#复杂链表的复制" class="headerlink" title="复杂链表的复制"></a>复杂链表的复制</h1><p><a href="https://leetcode-cn.com/problems/fu-za-lian-biao-de-fu-zhi-lcof/">复杂链表的复制</a></p>
<p><strong>方法一：</strong></p>
<p>哈希表存储原链表节点和新链表节点的对应关系，先构建只有 next 的新链表<br>然后再遍历原链表，把原链表的 random 对应的哈希表储存的节点赋给新链表的 random</p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node* next;</span></span><br><span class="line"><span class="comment">    Node* random;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        next = NULL;</span></span><br><span class="line"><span class="comment">        random = NULL;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 哈希表存储原链表节点和新链表节点的对应关系</span></span><br><span class="line">    unordered_map&lt;Node*, Node*&gt; hash;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 虚拟头节点</span></span><br><span class="line">    Node* dummy = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">-10005</span>);</span><br><span class="line">    <span class="comment">// 当前遍历到的节点</span></span><br><span class="line">    Node* cur = dummy;</span><br><span class="line"></span><br><span class="line">    <span class="function">Node* <span class="title">copyRandomList</span><span class="params">(Node* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p = head; p; p = p-&gt;next) &#123;</span><br><span class="line">            <span class="keyword">auto</span> np = <span class="keyword">new</span> <span class="built_in">Node</span>(p-&gt;val); </span><br><span class="line">            cur-&gt;next = np;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">            hash.<span class="built_in">insert</span>(&#123;p, np&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p = head; p; p = p-&gt;next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;random) &#123;</span><br><span class="line">                cur = hash[p];</span><br><span class="line">                cur-&gt;random = hash[p-&gt;random];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>方法二：</strong></p>
<p>原链表图形：<br><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E5%89%91%E6%8C%87offer.assets/Snipaste_2022-03-27_09-45-46.png" alt="Snipaste_2022-02-19_18-54-11.png"><br>1、在每个节点的后面加上它的复刻，将原链表和复刻链表连在一起。<br><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E5%89%91%E6%8C%87offer.assets/Snipaste_2022-03-27_09-46-06.png" alt="Snipaste_2022-02-19_18-54-24.png"><br>2、从前往后遍历每一个原链表节点，对于有random指针的节点p，我们让它的<br>p-&gt;next-&gt;random &#x3D; p-&gt;random-&gt;next,这样我们就完成了对原链表random指针的复刻。<br><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E5%89%91%E6%8C%87offer.assets/Snipaste_2022-03-27_09-46-23.png" alt="Snipaste_2022-02-19_18-58-52.png"><br>3、最后我们把原链表和复刻链表拆分出来，并将原链表复原。<br><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E5%89%91%E6%8C%87offer.assets/Snipaste_2022-03-27_09-46-37.png" alt="Snipaste_2022-02-19_18-59-00.png"></p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node* next;</span></span><br><span class="line"><span class="comment">    Node* random;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        next = NULL;</span></span><br><span class="line"><span class="comment">        random = NULL;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">copyRandomList</span><span class="params">(Node* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p = head; p;) &#123;</span><br><span class="line">            <span class="keyword">auto</span> np = <span class="keyword">new</span> <span class="built_in">Node</span>(p-&gt;val);</span><br><span class="line">            np-&gt;next = p-&gt;next;</span><br><span class="line">            p-&gt;next = np;</span><br><span class="line">            p = np-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p = head; p; ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;random) p-&gt;next-&gt;random = p-&gt;random-&gt;next;</span><br><span class="line">            p = p-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> dummy = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">-10005</span>);</span><br><span class="line">        <span class="keyword">auto</span> cur = dummy;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p = head; p; p = p-&gt;next) &#123;</span><br><span class="line">            cur-&gt;next = p-&gt;next;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 前面破坏了原链表，这里要恢复链表</span></span><br><span class="line">            p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="二叉搜索树与双向链表"><a href="#二叉搜索树与双向链表" class="headerlink" title="二叉搜索树与双向链表"></a>二叉搜索树与双向链表</h1><p><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/"> 二叉搜索树与双向链表</a></p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p>原地算法，没有新建任何节点</p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">public:</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    Node* left;</span></span><br><span class="line"><span class="comment">    Node* right;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        left = NULL;</span></span><br><span class="line"><span class="comment">        right = NULL;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Node(int _val, Node* _left, Node* _right) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        left = _left;</span></span><br><span class="line"><span class="comment">        right = _right;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">treeToDoublyList</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        pair&lt;Node*, Node*&gt; sides = <span class="built_in">dfs</span>(root);</span><br><span class="line">        sides.first-&gt;left = sides.second;</span><br><span class="line">        sides.second-&gt;right = sides.first;</span><br><span class="line">        <span class="keyword">return</span> sides.first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">pair&lt;Node*, Node*&gt; <span class="title">dfs</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root-&gt;left &amp;&amp; !root-&gt;right) <span class="keyword">return</span> &#123;root, root&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left &amp;&amp; root-&gt;right) &#123;</span><br><span class="line">            <span class="keyword">auto</span> lside = <span class="built_in">dfs</span>(root-&gt;left), rside = <span class="built_in">dfs</span>(root-&gt;right);</span><br><span class="line">            lside.second-&gt;right = root, root-&gt;left = lside.second;</span><br><span class="line">            rside.first-&gt;left = root, root-&gt;right = rside.first;</span><br><span class="line">            <span class="keyword">return</span> &#123;lside.first, rside.second&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left) &#123;</span><br><span class="line">            <span class="keyword">auto</span> lside = <span class="built_in">dfs</span>(root-&gt;left);</span><br><span class="line">            lside.second-&gt;right = root, root-&gt;left = lside.second;</span><br><span class="line">            <span class="keyword">return</span> &#123;lside.first, root&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right) &#123;</span><br><span class="line">            <span class="keyword">auto</span> rside = <span class="built_in">dfs</span>(root-&gt;right);</span><br><span class="line">            rside.first-&gt;left = root, root-&gt;right = rside.first;</span><br><span class="line">            <span class="keyword">return</span> &#123;root, rside.second&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="序列化二叉树"><a href="#序列化二叉树" class="headerlink" title="序列化二叉树"></a>序列化二叉树</h1><p><a href="https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/submissions/">序列化二叉树</a></p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>层序遍历：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Codec</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Encodes a tree to a single string.</span></span><br><span class="line">    <span class="function">string <span class="title">serialize</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        string ans;</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="comment">// 空格作为分隔符,&#x27;#&#x27;表示空指针</span></span><br><span class="line">            <span class="keyword">if</span> (!t) ans += <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ans += <span class="built_in">to_string</span>(t-&gt;val); </span><br><span class="line">                q.<span class="built_in">push</span>(t-&gt;left);</span><br><span class="line">                q.<span class="built_in">push</span>(t-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            ans += <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;string&gt; str;</span><br><span class="line">    <span class="comment">// Decodes your encoded data to tree.</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">deserialize</span><span class="params">(string data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        str = <span class="built_in">split</span>(data, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line"></span><br><span class="line">        queue&lt;TreeNode*&gt; q;</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="built_in">stoi</span>(str[<span class="number">0</span>]));</span><br><span class="line">        q.<span class="built_in">push</span>(root);</span><br><span class="line">        <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            TreeNode* front = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (str[i] != <span class="string">&quot;#&quot;</span>) &#123;</span><br><span class="line">                front-&gt;left = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="built_in">stoi</span>(str[i]));</span><br><span class="line">                q.<span class="built_in">push</span>(front-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">            ++i;</span><br><span class="line">            <span class="keyword">if</span> (str[i] != <span class="string">&quot;#&quot;</span>) &#123;</span><br><span class="line">                front-&gt;right = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(<span class="built_in">stoi</span>(str[i]));</span><br><span class="line">                q.<span class="built_in">push</span>(front-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">split</span><span class="params">(string data, <span class="type">char</span> sp)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; data.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; data.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (data[j] == sp) &#123;</span><br><span class="line">                    ans.<span class="built_in">push_back</span>(data.<span class="built_in">substr</span>(i, j - i));</span><br><span class="line">                    i = j + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your Codec object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// Codec codec;</span></span><br><span class="line"><span class="comment">// codec.deserialize(codec.serialize(root));</span></span><br></pre></td></tr></table></figure>

<p><strong>前序遍历：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Codec</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Encodes a tree to a single string.</span></span><br><span class="line">    <span class="function">string <span class="title">serialize</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        string res;</span><br><span class="line">        <span class="built_in">dfs_s</span>(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs_s</span><span class="params">(TreeNode* root, string &amp;res)</span> </span>&#123; <span class="comment">// 构造前序遍历</span></span><br><span class="line">        <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">            res += <span class="string">&quot;null &quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res += <span class="built_in">to_string</span>(root-&gt;val);</span><br><span class="line">        res += <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="built_in">dfs_s</span>(root-&gt;left, res);</span><br><span class="line">        <span class="built_in">dfs_s</span>(root-&gt;right, res);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes your encoded data to tree.</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">deserialize</span><span class="params">(string data)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs_d</span>(data, u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">TreeNode* <span class="title">dfs_d</span><span class="params">(string data, <span class="type">int</span> &amp;u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == data.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> k = u; <span class="comment">// 记录当前这个数是几位数</span></span><br><span class="line">        <span class="keyword">while</span> (data[k] != <span class="string">&#x27; &#x27;</span>) k++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果当前字符串是“null”，则回到下一个数字的首部，表示这次构造的是一个null节点，并没孩子节点，所以跳过后面的递归</span></span><br><span class="line">        <span class="keyword">if</span> (data[u] == <span class="string">&#x27;n&#x27;</span>) &#123;</span><br><span class="line">            u = k + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> val = <span class="number">0</span>; <span class="comment">// val存的是当前的数字</span></span><br><span class="line">        <span class="keyword">if</span> (data[u] == <span class="string">&#x27;-&#x27;</span>) &#123; <span class="comment">// 如果数字是负的</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = u + <span class="number">1</span>; i &lt; k; i++) &#123;</span><br><span class="line">                val = val * <span class="number">10</span> + data[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            val = -val;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 如果是数字是正的</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = u; i &lt; k; i++) &#123;</span><br><span class="line">                val = val * <span class="number">10</span> + data[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        u = k + <span class="number">1</span>; <span class="comment">// 回到下个数字的首部</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(val);</span><br><span class="line">        root-&gt;left = <span class="built_in">dfs_d</span>(data, u);</span><br><span class="line">        root-&gt;right = <span class="built_in">dfs_d</span>(data, u);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your Codec object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// Codec codec;</span></span><br><span class="line"><span class="comment">// codec.deserialize(codec.serialize(root));</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="字符串的排列"><a href="#字符串的排列" class="headerlink" title="字符串的排列"></a>字符串的排列</h1><p><a href="https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof/submissions/">字符串的排列</a></p>
<p><strong>思路：</strong></p>
<p>做一次全排列（DFS+回溯），然后用哈希表去重。最容易想到的办法，但是时间复杂度不太好，相当于暴力做法</p>
<p><strong>时间复杂度：<em>O(n<sup>n</sup>)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;string&gt; ans;</span><br><span class="line">    string path;</span><br><span class="line">    <span class="type">bool</span> st[<span class="number">10</span>];</span><br><span class="line">    unordered_set&lt;string&gt; hash;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">permutation</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(s, u);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(string s, <span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (u == s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hash.<span class="built_in">find</span>(path) == hash.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                hash.<span class="built_in">insert</span>(path);</span><br><span class="line">                ans.<span class="built_in">push_back</span>(path);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (st[i] == <span class="literal">false</span>) &#123;</span><br><span class="line">                path += s[i];</span><br><span class="line">                u++;</span><br><span class="line">                st[i] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">dfs</span>(s, u);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 回溯</span></span><br><span class="line">                u--;</span><br><span class="line">                st[i] = <span class="literal">false</span>;</span><br><span class="line">                path.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="数组中出现次数超过一半的数字"><a href="#数组中出现次数超过一半的数字" class="headerlink" title="数组中出现次数超过一半的数字"></a>数组中出现次数超过一半的数字</h1><p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/">数组中出现次数超过一半的数字</a></p>
<p><strong>排序法思路：</strong></p>
<p>超过一半，快排以后取中间的数即可</p>
<p><strong>时间复杂度：<em>O(nlog<sub>2<sub>n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">majorityElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> nums[nums.<span class="built_in">size</span>() / <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>摩尔投票法：</strong></p>
<p>如果这个数&#x3D;&#x3D;val，则计数+1；否则计数-1；最后剩下的数一定是出现一半以上的数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">majorityElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> n : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!count) count = <span class="number">1</span>, val = n;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (val == n) count++;</span><br><span class="line">                <span class="keyword">else</span> count--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="最小的k个数"><a href="#最小的k个数" class="headerlink" title="最小的k个数"></a>最小的k个数</h1><p><a href="https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/">最小的k个数</a></p>
<p><strong>思路：</strong></p>
<p>快排，取前 k 个数</p>
<p><strong>时间复杂度：<em>O(nlog<sub>2<sub>n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getLeastNumbers</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="数据流中的中位数"><a href="#数据流中的中位数" class="headerlink" title="数据流中的中位数"></a>数据流中的中位数</h1><p><a href="https://leetcode-cn.com/problems/shu-ju-liu-zhong-de-zhong-wei-shu-lcof/">数据流中的中位数</a></p>
<p><strong>思路：</strong></p>
<p>暴解肯定不行，因为 n 最多是 50000，n<sup>2</sup>logn会超时。</p>
<p><strong>这题可以使用大小堆算法：</strong> 维护大根堆和小根堆的时间复杂度都是 O(logn)<br>输入的时候将数字分为两半，小的一半放在大根堆中，大的一半放在小根堆的中。输入的同时保证两堆的大小之差不超过一，如果超过，则将数量多的堆弹出堆顶元素放到另一个堆中。<br>取中位数的时候，奇数返回数量多的堆顶元素；偶数返回两堆的堆顶平均数即可。</p>
<p><strong>时间复杂度：<em>O(nlogn)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MedianFinder</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="built_in">MedianFinder</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 大根堆，也就是根节点是最大的</span></span><br><span class="line">    priority_queue&lt;<span class="type">int</span>&gt; max_heap; </span><br><span class="line">    <span class="type">int</span> max_num = <span class="number">0</span>; <span class="comment">// 大根堆中节点数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 小根堆，也就是根节点是最小的</span></span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt; &gt; min_heap; </span><br><span class="line">    <span class="type">int</span> min_num = <span class="number">0</span>; <span class="comment">// 小根堆中节点数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addNum</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 为空时，插入大根堆</span></span><br><span class="line">        <span class="keyword">if</span> (max_heap.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            max_heap.<span class="built_in">push</span>(num);</span><br><span class="line">            max_num++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// num 如果小于等于大根堆堆顶，就把他插入大根堆</span></span><br><span class="line">        <span class="keyword">if</span> (num &lt;= max_heap.<span class="built_in">top</span>()) &#123;</span><br><span class="line">            max_heap.<span class="built_in">push</span>(num);</span><br><span class="line">            max_num++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            min_heap.<span class="built_in">push</span>(num);</span><br><span class="line">            min_num++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果大小根堆数量之差大于 1 那么就把多的弹到另一个堆里面</span></span><br><span class="line">        <span class="keyword">if</span> (max_num - min_num &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            min_heap.<span class="built_in">push</span>(max_heap.<span class="built_in">top</span>());</span><br><span class="line">            max_heap.<span class="built_in">pop</span>();</span><br><span class="line">            max_num--;</span><br><span class="line">            min_num++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (min_num - max_num &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            max_heap.<span class="built_in">push</span>(min_heap.<span class="built_in">top</span>());</span><br><span class="line">            min_heap.<span class="built_in">pop</span>();</span><br><span class="line">            max_num++;</span><br><span class="line">            min_num--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">findMedian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((max_num + min_num) % <span class="number">2</span> == <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> (<span class="type">double</span>)(max_heap.<span class="built_in">top</span>() + min_heap.<span class="built_in">top</span>()) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> max_num &gt; min_num ? (<span class="type">double</span>)max_heap.<span class="built_in">top</span>() : (<span class="type">double</span>)min_heap.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MedianFinder object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MedianFinder* obj = new MedianFinder();</span></span><br><span class="line"><span class="comment"> * obj-&gt;addNum(num);</span></span><br><span class="line"><span class="comment"> * double param_2 = obj-&gt;findMedian();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="连续子数组的最大和"><a href="#连续子数组的最大和" class="headerlink" title="连续子数组的最大和"></a>连续子数组的最大和</h1><p><a href="https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/">连续子数组的最大和</a></p>
<p><strong>思路：</strong></p>
<p><strong>动态规划：</strong><br>s这个变量中存储的是 以前一个数结尾的子数组中，和最大的是多少<br>如果s &lt; 0，那么就将s置为0，因为可能存在负数，不能将负收益的s加进来<br>如果s &gt;&#x3D; 0，就让s +&#x3D; x。<br>因为是求最大值，所以res的初值置为 无穷小INT_MIN。同时，每一次迭代，都要更新res，也就是res &#x3D; max(res, s)。最后返回的res就是 最大值。</p>
<p><strong>时间复杂度：<em>O(n)</em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">// 此时s是以前一个数结尾的子数组中，和最大的是多少</span></span><br><span class="line">        <span class="type">int</span> res = INT_MIN, s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s &lt; <span class="number">0</span>) s = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 这里s指的是，以当前数结尾的，子数组的和的最大值</span></span><br><span class="line">            s += x;</span><br><span class="line">            res = <span class="built_in">max</span>(res, s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="1～n-整数中-1-出现的次数"><a href="#1～n-整数中-1-出现的次数" class="headerlink" title="1～n 整数中 1 出现的次数"></a>1～n 整数中 1 出现的次数</h1><p><a href="https://leetcode-cn.com/problems/1nzheng-shu-zhong-1chu-xian-de-ci-shu-lcof/">1～n 整数中 1 出现的次数</a></p>
<p><strong>思路：</strong></p>
<p>按位枚举<br><img src="https://typora1321.oss-cn-beijing.aliyuncs.com/%E5%89%91%E6%8C%87offer.assets/Snipaste_2022-03-27_09-47-27.png" alt="在这里插入图片描述"></p>
<p><strong>时间复杂度：<em>O(log<sub>2</sub>n)<sup>2</sup></em></strong></p>
<p><strong>核心代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countDigitOne</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; num;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把每一位取出来，例如123，放进数组就是[3, 2, 1]</span></span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            num.<span class="built_in">push_back</span>(n % <span class="number">10</span>);</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从最高位开始，枚举每一位</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = num.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">// left指的是枚举的那一位前面的数，例如枚举的是abcdef中的c，那么left就是ab;，那么right就是def，如果def是三位，t就是10&lt;sup&gt;3</span></span><br><span class="line">            <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, t = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = num.<span class="built_in">size</span>() - <span class="number">1</span>; j &gt; i; j--) &#123;</span><br><span class="line">                left = left * <span class="number">10</span> + num[j];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                right = right * <span class="number">10</span> + num[j];</span><br><span class="line">                t *= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 首先将情况①加进去</span></span><br><span class="line">            ans += left * t;</span><br><span class="line">            <span class="comment">// 加入情况②的(2)</span></span><br><span class="line">            <span class="keyword">if</span> (num[i] == <span class="number">1</span>) ans += right + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 加入情况②的(3)</span></span><br><span class="line">            <span class="keyword">if</span> (num[i] &gt; <span class="number">1</span>) ans += t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="二叉树的深度"><a href="#二叉树的深度" class="headerlink" title="二叉树的深度"></a>二叉树的深度</h1><p><a href="https://leetcode.cn/problems/er-cha-shu-de-shen-du-lcof/">二叉树的深度</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果节点为空，则返回0。否则返回左右子树的最大值+1</span></span><br><span class="line">        <span class="keyword">return</span> !root ? <span class="number">0</span> : <span class="built_in">max</span>(<span class="built_in">maxDepth</span>(root-&gt;left), <span class="built_in">maxDepth</span>(root-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h1><p><a href="https://leetcode.cn/problems/ping-heng-er-cha-shu-lcof/">平衡二叉树</a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">bool</span> ans = <span class="literal">true</span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isBalanced</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="built_in">dfs</span>(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">dfs</span>(root-&gt;left), right = <span class="built_in">dfs</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(left - right) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            ans = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(left, right) + <span class="number">1</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>剑指 offer</category>
      </categories>
      <tags>
        <tag>剑指 offer</tag>
      </tags>
  </entry>
</search>
